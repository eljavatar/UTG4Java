testHasAudioToCompile() { com.bixly.pastevid.recorders.RecorderTest.log("hasAudioToCompile"); com.bixly.pastevid.recorders.Recorder instance = new com.bixly.pastevid.recorders.Recorder(new com.bixly.pastevid.recorders.RecorderTest.TestMeasurable()); instance.setCaptureRectangle(new java.awt.Rectangle(200, 100)); instance.recordVideo(); while ((instance.getSecondsTime()) < 10) { } instance.stopVideo(); boolean result = instance.hasAudioToCompile(); org.junit.Assert.assertNotNull(result); } hasAudioToCompile() { return audioRecorder.hasRecorded(); }
testGetPropertyInfo() { io.sniffy.Driver driver = io.sniffy.DriverManager.getDriver("sniffer:jdbc:h2:mem:"); io.sniffy.DriverPropertyInfo[] propertyInfo = driver.getPropertyInfo("jdbc:h2:~/test", new java.util.Properties()); org.junit.Assert.assertNotNull(propertyInfo); } getPropertyInfo(java.lang.String, java.util.Properties) { io.sniffy.sql.Driver originDriver = getOriginDriver(url); return originDriver.getPropertyInfo(url, info); }
testAddHeader() { javax.mail.internet.MimeMessage m = javax.mail.internet.ModifyMessageTest.createMessage(); javax.mail.internet.MimeMultipart mp = ((javax.mail.internet.MimeMultipart) (m.getContent())); m.setHeader("a", "b"); m.saveChanges(); javax.mail.internet.MimeMessage m2 = new javax.mail.internet.MimeMessage(m); org.junit.Assert.assertEquals("b", m2.getHeader("a", null)); } getHeader(java.lang.String, java.lang.String) { if ((folder) != null) ((com.sun.mail.mbox.MboxFolder) (folder)).checkOpen(); if (isExpunged()) throw new com.sun.mail.mbox.MessageRemovedException("mbox<sp>message<sp>expunged"); return super.getHeader(name, delimiter); }
testNotifySuccess() { org.junit.Assert.assertFalse(result.completed()); BatchResult.Callback < java.lang.Boolean, com.google.cloud.dns.DnsException > callback = org.easymock.EasyMock.createStrictMock(BatchResult.Callback.class); callback.success(true); org.easymock.EasyMock.replay(callback); result.notify(callback); result.success(true); try { result.notify(callback); org.junit.Assert.fail("The<sp>batch<sp>has<sp>been<sp>completed."); } catch (java.lang.IllegalStateException exception) { } org.easymock.EasyMock.verify(callback); } completed() { return completed; }
testNoRunningExecutions() { org.springframework.batch.mongo.dao.Set < org.springframework.batch.mongo.dao.JobExecution > values = dao.findRunningJobExecutions("no-such-job"); org.junit.Assert.assertEquals(0, values.size()); } findRunningJobExecutions(java.lang.String) { org.springframework.batch.mongo.dao.DBCursor instancesCursor = db.getCollection(org.springframework.batch.core.JobInstance.class.getSimpleName()).find(new org.springframework.batch.mongo.dao.BasicDBObject(MongoJobInstanceDao.JOB_NAME_KEY, jobName), org.springframework.batch.mongo.dao.MongoJobInstanceDao.jobInstanceIdObj(1L)); org.springframework.batch.mongo.dao.List < java.lang.Long > ids = new org.springframework.batch.mongo.dao.ArrayList < java.lang.Long > (); while (instancesCursor.hasNext()) { ids.add(((java.lang.Long) (instancesCursor.next().get(org.springframework.batch.mongo.dao.MongoJobInstanceDao.JOB_INSTANCE_ID_KEY)))); } org.springframework.batch.mongo.dao.DBCursor dbCursor = getCollection().find(org.springframework.batch.mongo.dao.BasicDBObjectBuilder.start().add(org.springframework.batch.mongo.dao.MongoJobInstanceDao.JOB_INSTANCE_ID_KEY, new org.springframework.batch.mongo.dao.BasicDBObject("$in", ids.toArray())).add(org.springframework.batch.mongo.dao.END_TIME_KEY, null).get()).sort(org.springframework.batch.mongo.dao.MongoJobExecutionDao.jobExecutionIdObj((- 1L))); org.springframework.batch.mongo.dao.Set < org.springframework.batch.core.JobExecution > result = new org.springframework.batch.mongo.dao.HashSet < org.springframework.batch.core.JobExecution > (); while (dbCursor.hasNext()) { result.add(mapJobExecution(dbCursor.next())); } return result; }
testFailMoveEntryAlreadyExists() { org.apache.directory.ldap.client.api.LdapConnection connection = getAdminConnection(getService()); org.apache.directory.api.ldap.model.entry.Entry entry = new org.apache.directory.api.ldap.model.entry.DefaultEntry (getService().getSchemaManager(), "ou=users,ou=groups,ou=system", "ObjectClass:<sp>top", "ObjectClass:<sp>OrganizationalUnit", "ou:<sp>users"); connection.add(entry); connection.rename(entry.getDn(), new org.apache.directory.api.ldap.model.name.Rdn(getService().getSchemaManager(), "ou=users")); org.apache.directory.api.ldap.model.entry.Entry userzEntry = new org.apache.directory.api.ldap.model.entry.DefaultEntry (getService().getSchemaManager(), "ou=userz,ou=groups,ou=system", "ObjectClass:<sp>top", "ObjectClass:<sp>OrganizationalUnit", "ou:<sp>userz"); connection.add(userzEntry); try { connection.rename("ou=userz,ou=groups,ou=system", "ou=users", true); org.junit.Assert.fail(); } catch (org.apache.directory.api.ldap.model.exception.LdapEntryAlreadyExistsException leaee) { org.junit.Assert.assertTrue(true); } } rename(org.apache.directory.api.ldap.model.name.Dn, org.apache.directory.api.ldap.model.name.Rdn, boolean) { rename(dn, newRdn, deleteOldRdn, LogChange.TRUE); }
should_be_equal_when_having_0_value() { fr.norad.visuwall.api.domain.quality.QualityMeasure qm1 = new fr.norad.visuwall.api.domain.quality.QualityMeasure(); fr.norad.visuwall.api.domain.quality.QualityMeasure qm2 = new fr.norad.visuwall.api.domain.quality.QualityMeasure(); org.junit.Assert.assertEquals(qm1, qm2); }
testWriteNotNestedProperties() { eu.esdihumboldt.cst.test.TransformationExample example = eu.esdihumboldt.cst.test.TransformationExamples.getExample(TransformationExamples.SIMPLE_COMPLEX); java.util.List < java.lang.String > header = java.util.Arrays.asList("id", "name"); java.util.List < java.lang.String > firstDataRow = java.util.Arrays.asList("id0", "name0"); eu.esdihumboldt.hale.io.xls.writer.XLSInstanceWriter writer = new eu.esdihumboldt.hale.io.xls.writer.XLSInstanceWriter(); org.eclipse.core.runtime.content.IContentType contentType = eu.esdihumboldt.hale.common.core.HalePlatform.getContentTypeManager().getContentType("eu.esdihumboldt.hale.io.xls.xls"); writer.setParameter(InstanceTableIOConstants.SOLVE_NESTED_PROPERTIES, eu.esdihumboldt.hale.common.core.io.Value.of(false)); java.io.File tmpFile = tmpFolder.newFile("excelNotNestedProperties.xls"); writer.setInstances(example.getSourceInstances()); writer.setTarget(new eu.esdihumboldt.hale.common.core.io.supplier.FileIOSupplier(tmpFile)); writer.setContentType(contentType); eu.esdihumboldt.hale.common.core.io.report.IOReport report = writer.execute(null); org.junit.Assert.assertTrue(report.isSuccess()); org.apache.poi.ss.usermodel.Workbook wb = org.apache.poi.ss.usermodel.WorkbookFactory.create(tmpFile); org.apache.poi.ss.usermodel.Sheet sheet = wb.getSheetAt(0); checkHeader(sheet, header); checkSheetName(sheet, "person"); checkFirstDataRow(sheet, firstDataRow); } isSuccess() { return success; }
testConnStringNoWriteConcern() { final com.mongodb.ConnectionString connString = new com.mongodb.ConnectionString("mongodb://localhost:27017/mydb?replicaSet=myapp"); com.mongodb.WriteConcern rp = new io.vertx.ext.mongo.impl.config.WriteConcernParser(connString, new io.vertx.core.json.JsonObject()).writeConcern(); org.junit.Assert.assertNull(rp); } writeConcern() { return writeConcern; }
testGetClazzNotFound() { final com.inspiresoftware.lib.dto.geda.adapter.ExtensibleBeanFactory fb = new com.inspiresoftware.lib.dto.geda.adapter.impl.ClassLoaderBeanFactory(com.inspiresoftware.lib.dto.geda.adapter.impl.ClassLoaderBeanFactoryTest.class.getClassLoader()); final java.lang.Class myDtoClass = fb.getClazz("myDto"); org.junit.Assert.assertNull(myDtoClass); } getClazz(java.lang.String) { if (interfaces.containsKey(entityBeanKey)) { return interfaces.get(entityBeanKey); } else if (classes.containsKey(entityBeanKey)) { return classes.get(entityBeanKey); } return null; }
testScannerRun() { System.out.println("Scanning<sp>3<sp>times"); final org.csstudio.archive.engine.scanner.Scanner scanner = new org.csstudio.archive.engine.scanner.Scanner(); final org.csstudio.archive.engine.scanner.ScannerUnitTest.ScanItem item = new org.csstudio.archive.engine.scanner.ScannerUnitTest.ScanItem("Item"); scanner.add(item, org.csstudio.archive.engine.scanner.ScannerUnitTest.fast_period); while ((item.scans) < 3) { System.out.println("scan..."); scanner.scanOnce(); } org.junit.Assert.assertTrue(((item.scans) >= 3)); System.out.format("Idle:<sp>%.2f<sp>%%\n", scanner.getIdlePercentage()); } scanOnce() { try { if (isDueAtAll()) { final long delay = (getNextDueTime()) - (java.lang.System.currentTimeMillis()); if (delay > (idle_delay)) { idle_percentage.update(100.0); java.lang.Thread.sleep(idle_delay); return; } if (delay > 0) { idle_percentage.update(((delay * 100.0) / (idle_delay))); java.lang.Thread.sleep(delay); scanDueScanLists(); return; } idle_percentage.update(0.0); scanDueScanLists(); return; } idle_percentage.update(100.0); java.lang.Thread.sleep(idle_delay); } catch (java.lang.InterruptedException ex) { org.csstudio.archive.engine.Activator.getLogger().log(Level.WARNING, "Scanner<sp>interrupted", ex); } }
testFetchByPrimaryKeysWithNoPrimaryKeys() { java.util.Set < java.io.Serializable > primaryKeys = new java.util.HashSet < java.io.Serializable > (); java.util.Map < java.io.Serializable, com.liferay.social.kernel.model.SocialRelation > socialRelations = _persistence.fetchByPrimaryKeys(primaryKeys); org.junit.Assert.assertTrue(socialRelations.isEmpty()); } isEmpty() { return _portalCacheListeners.isEmpty(); }
testNotStaleWhenHasData() { final java.io.ByteArrayInputStream inStream = org.mockito.Mockito.spy(new java.io.ByteArrayInputStream(new byte[] { 1, 2, 3, 4, 5 })); org.mockito.Mockito.when(socket.getInputStream()).thenReturn(inStream); conn.bind(socket); conn.ensureOpen(); org.junit.Assert.assertFalse(conn.isStale()); } isStale() { if (!(isOpen())) { return true; } try { final int bytesRead = fillInputBuffer(1); return bytesRead < 0; } catch (final java.net.SocketTimeoutException ex) { return false; } catch (final java.net.SocketException ex) { return true; } }
testOptionsThing() { org.jboss.resteasy.test.rx.resource.Thing t = org.jboss.resteasy.test.rx.rxjava2.Rx2SingleProxyServerAsyncTest.proxy.optionsThing(); org.junit.Assert.assertEquals(new org.jboss.resteasy.test.rx.resource.Thing("x"), t); } optionsThing() { return org.jboss.resteasy.test.rx.rxjava2.resource.Rx2ObservableResourceNoStreamImpl.buildObservableThing("x", 3); }
shouldAllowCreateRelationshipWithSameStartAsEndNode() { long nodeId = org.neo4j.server.rest.web.DatabaseActionsTest.graphdbHelper.createNode(); java.util.Map < java.lang.String, java.lang.Object > properties = java.util.Collections.emptyMap(); org.neo4j.server.rest.repr.RelationshipRepresentation rel = org.neo4j.server.rest.web.DatabaseActionsTest.actions.createRelationship(nodeId, nodeId, "Loves", properties); org.junit.Assert.assertNotNull(rel); } createRelationship(long, long, java.lang.String, java.util.Map) { org.neo4j.graphdb.Node start; org.neo4j.graphdb.Node end; try { start = node(startNodeId); } catch (org.neo4j.server.rest.web.NodeNotFoundException e) { throw new org.neo4j.server.rest.domain.StartNodeNotFoundException(e); } try { end = node(endNodeId); } catch (org.neo4j.server.rest.web.NodeNotFoundException e) { throw new org.neo4j.server.rest.domain.EndNodeNotFoundException(e); } org.neo4j.graphdb.Relationship rel = start.createRelationshipTo(end, org.neo4j.graphdb.RelationshipType.withName(type)); propertySetter.setProperties(rel, properties); return new org.neo4j.server.rest.repr.RelationshipRepresentation(rel); }
test_single() { org.junit.Assert.assertTrue(((com.zlikun.jee.Singleton3.getInstance()) == (com.zlikun.jee.Singleton3.getInstance()))); } getInstance() { if ((com.zlikun.jee.Singleton3.INSTANCE) == null) { synchronized(com.zlikun.jee.Singleton3.class) { if ((com.zlikun.jee.Singleton3.INSTANCE) == null) { com.zlikun.jee.Singleton3.INSTANCE = new com.zlikun.jee.Singleton3(); } } } return com.zlikun.jee.Singleton3.INSTANCE; }
removingNothingIsOk() { action.execute(state); org.junit.Assert.assertTrue(action.isExecuted()); compareFields(); } isExecuted() { if ((executed) == null) { return de.rub.nds.tlsattacker.core.workflow.action.TlsAction.EXECUTED_DEFAULT; } return executed; }
testSingle() { java.time.ZoneId zone = java.time.ZoneId.of("GMT"); com.questdb.std.time.TimeZoneRulesImpl rules = new com.questdb.std.time.TimeZoneRulesImpl("GMT", zone.getRules()); int y = 2017; int m = 3; int d = 29; java.time.LocalDateTime dt = java.time.LocalDateTime.of(y, m, d, 0, 0); long millis = com.questdb.std.time.Dates.toMillis(y, m, d, 0, 0); java.time.ZonedDateTime zdt = dt.atZone(zone); long expected = zdt.getOffset().getTotalSeconds(); long changed = (com.questdb.std.time.Dates.toMillis(zdt.getYear(), zdt.getMonthValue(), zdt.getDayOfMonth(), zdt.getHour(), zdt.getMinute())) + ((zdt.getSecond()) * 1000); expected += (changed - millis) / 1000; long offset = rules.getOffset(millis, y, com.questdb.std.time.Dates.isLeapYear(y)); try { org.junit.Assert.assertEquals(expected,(offset / 1000)); } catch (java.lang.Throwable e) { System.out.println((((((zone.getId()) + ";<sp>") + zdt) + ";<sp>") + (com.questdb.std.time.Dates.toString((millis + offset))))); throw e; } } isLeapYear(int) { return((year & 3) == 0) && (((year % 100) != 0) || ((year % 400) == 0)); }
testGetCustomUuidGenerator() { org.springframework.context.support.StaticApplicationContext applicationContext = new org.springframework.context.support.StaticApplicationContext(); applicationContext.registerSingleton("uuidGenerator", org.apache.camel.support.SimpleUuidGenerator.class); factory.setApplicationContext(applicationContext); factory.afterPropertiesSet(); org.apache.camel.spi.UuidGenerator uuidGenerator = factory.getContext().getUuidGenerator(); org.junit.Assert.assertTrue((uuidGenerator instanceof org.apache.camel.support.SimpleUuidGenerator)); } getUuidGenerator() { if ((uuidGenerator) == null) { synchronized(lock) { if ((uuidGenerator) == null) { setUuidGenerator(createUuidGenerator()); } } } return uuidGenerator; }
getRootVariableScope() { org.junit.Assert.assertEquals(org.pentaho.di.trans.steps.scriptvalues_mod.ScriptValuesAddedFunctions.getVariableScope("r"), ScriptValuesAddedFunctions.VariableScope.ROOT); } getVariableScope(java.lang.String) { switch(codeOfScope) { case "s" : return org.pentaho.di.trans.steps.scriptvalues_mod.ScriptValuesAddedFunctions.VariableScope.SYSTEM; case "r" : return org.pentaho.di.trans.steps.scriptvalues_mod.ScriptValuesAddedFunctions.VariableScope.ROOT; case "p" : return org.pentaho.di.trans.steps.scriptvalues_mod.ScriptValuesAddedFunctions.VariableScope.PARENT; case "g" : return org.pentaho.di.trans.steps.scriptvalues_mod.ScriptValuesAddedFunctions.VariableScope.GRAND_PARENT; default : throw org.mozilla.javascript.Context.reportRuntimeError(("The<sp>argument<sp>type<sp>of<sp>function<sp>call<sp>" + "setVariable<sp>should<sp>either<sp>be<sp>\"s\",<sp>\"r\",<sp>\"p\",<sp>or<sp>\"g\".")); } }
