testRead_01bit_MoreThanOneBandIsUnsupported() { try { testReadFullLevel0(org.geotools.arcsde.raster.gce.TYPE_1BIT, 2); org.junit.Assert.fail("Expected<sp>IAE"); } catch (java.lang.IllegalArgumentException e) { org.junit.Assert.assertTrue(true); } } testReadFullLevel0(org.geotools.arcsde.raster.info.RasterCellType, int) { return testReadFullLevel0(cellType, numBands, cellType); }
testCreateNetworkApi() { resource.configure("BrocadeVcsResource", parameters); when(api.createNetwork(com.cloud.network.resource.BrocadeVcsResourceTest.VLAN_ID, com.cloud.network.resource.BrocadeVcsResourceTest.NETWORK_ID)).thenReturn(true); final com.cloud.agent.api.CreateNetworkCommand cmd = new com.cloud.agent.api.CreateNetworkCommand(com.cloud.network.resource.BrocadeVcsResourceTest.VLAN_ID, com.cloud.network.resource.BrocadeVcsResourceTest.NETWORK_ID, "owner"); final com.cloud.agent.api.CreateNetworkAnswer answer = ((com.cloud.agent.api.CreateNetworkAnswer) (resource.executeRequest(cmd))); org.junit.Assert.assertTrue(answer.getResult()); } getResult() { return this.result; }
values_reflectsChanges() { java.util.List < com.eclipsesource.json.JsonValue > values = array.values(); array.add(true); org.junit.Assert.assertEquals(array.values(), values); } values() { return java.util.Collections.unmodifiableList(values); }
testTaskCreateFailedWithLog() { org.jbpm.services.task.wih.HTWorkItemHandlerBaseTest.TestWorkItemManager manager = new org.jbpm.services.task.wih.HTWorkItemHandlerBaseTest.TestWorkItemManager(); ((org.jbpm.services.task.wih.AbstractHTWorkItemHandler) (handler)).setAction(OnErrorAction.LOG); org.kie.api.task.TaskLifeCycleEventListener listener = new org.jbpm.services.task.wih.HTWorkItemHandlerBaseTest.AddedTaskListener(true); ((org.kie.internal.task.api.EventService < org.kie.api.task.TaskLifeCycleEventListener >) (taskService)).registerTaskEventListener(listener); ksession.setWorkItemManager(manager); org.drools.core.process.instance.impl.WorkItemImpl workItem = new org.drools.core.process.instance.impl.WorkItemImpl(); workItem.setName("Human<sp>Task"); workItem.setParameter("NodeName", "TaskName"); workItem.setParameter("Comment", "Comment"); workItem.setParameter("Priority", "10"); workItem.setParameter("ActorId", "DoesNotExist"); workItem.setProcessInstanceId(10); handler.executeWorkItem(workItem, manager); org.junit.Assert.assertFalse(manager.isAborted()); ((org.kie.internal.task.api.EventService < org.kie.api.task.TaskLifeCycleEventListener >) (taskService)).removeTaskEventListener(listener); } isAborted() { return aborted; }
testGetAuthorizationUrl_1() { org.jinstagram.auth.InstagramApi fixture = new org.jinstagram.auth.InstagramApi(); org.jinstagram.auth.model.OAuthConfig config = new org.jinstagram.auth.model.OAuthConfig("", "", "", "", ""); java.lang.String result = fixture.getAuthorizationUrl(config); org.junit.Assert.assertNotNull(result); } getAuthorizationUrl(org.jinstagram.auth.model.OAuthConfig) { org.jinstagram.utils.Preconditions.checkValidUrl(config.getCallback(), "Must<sp>provide<sp>a<sp>valid<sp>url<sp>as<sp>callback.<sp>Instagram<sp>does<sp>not<sp>support<sp>OOB"); if (config.hasScope()) { return java.lang.String.format(Constants.SCOPED_AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback()), config.getScope()); } else { return java.lang.String.format(Constants.AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback())); } }
testActionBadCountry () { oasis.names.tc.xacml._3_0.core.schema.wd_17.RequestType request = ddf.security.pdp.realm.xacml.XacmlPdpTest.testRealm.createXACMLRequest(ddf.security.pdp.realm.xacml.XacmlPdpTest.USER_NAME, generateSubjectInfo("CAN"), new ddf.security.permission.KeyValueCollectionPermission(ddf.security.pdp.realm.xacml.XacmlPdpTest.QUERY_ACTION)); org.junit.Assert.assertThat(ddf.security.pdp.realm.xacml.XacmlPdpTest.testRealm.isPermitted(request), org.hamcrest.Matchers.equalTo(false)); } isPermitted(oasis.names.tc.xacml._3_0.core.schema.wd_17.RequestType) { boolean permitted; oasis.names.tc.xacml._3_0.core.schema.wd_17.ResponseType xacmlResponse; try { ddf.security.pdp.realm.xacml.XacmlPdp.LOGGER.debug("Calling<sp>PDP<sp>to<sp>evaluate<sp>XACML<sp>request."); xacmlResponse = pdp.evaluate(xacmlRequest); ddf.security.pdp.realm.xacml.XacmlPdp.LOGGER.debug("Received<sp>response<sp>from<sp>PDP."); permitted = (xacmlResponse != null) && ((xacmlResponse.getResult().get(0).getDecision()) == (oasis.names.tc.xacml._3_0.core.schema.wd_17.DecisionType.PERMIT)); ddf.security.pdp.realm.xacml.XacmlPdp.LOGGER.debug("Permitted:<sp>{}", permitted); } catch (ddf.security.pdp.realm.xacml.processor.PdpException e) { ddf.security.pdp.realm.xacml.XacmlPdp.LOGGER.debug(e.getMessage(), e); permitted = false; } return permitted; }
checkIObjectWrapperInterfaceMethods() { info.smart_tools.smartactors.iobject.iobject.IObject env = mock(info.smart_tools.smartactors.iobject.iobject.IObject.class); info.smart_tools.smartactors.iobject.iobject.IObject message = mock(info.smart_tools.smartactors.iobject.iobject.IObject.class); when(env.getValue(new info.smart_tools.smartactors.iobject.field_name.FieldName("message"))).thenReturn(message); info.smart_tools.smartactors.iobject.iobject.IObject wObj = new info.smart_tools.smartactors.iobject_extension.wds_object.WDSObject(((info.smart_tools.smartactors.iobject.iobject.IObject) (null))); ((info.smart_tools.smartactors.iobject.iobject_wrapper.IObjectWrapper) (wObj)).init(env); info.smart_tools.smartactors.iobject.iobject.IObject result = ((info.smart_tools.smartactors.iobject.iobject_wrapper.IObjectWrapper) (wObj)).getEnvironmentIObject(new info.smart_tools.smartactors.iobject.field_name.FieldName("message")); org.junit.Assert.assertSame(result, message); } getEnvironmentIObject(info.smart_tools.smartactors.iobject.ifield_name.IFieldName) { try { return((info.smart_tools.smartactors.iobject.iobject.IObject) (environment.getValue(fieldName))); } catch (info.smart_tools.smartactors.iobject.iobject.exception.ReadValueException e) { throw new info.smart_tools.smartactors.base.exception.invalid_argument_exception.InvalidArgumentException("Invalid<sp>fieldName", e); } }
testSelectBindings() { java.lang.String queryString = "PREFIX<sp>:<sp><http://www.semanticweb.org/ontologies/2013/7/untitled-ontology-150#><sp>" + "SELECT<sp>*<sp>WHERE<sp>{?x<sp>:hasVal1<sp>?v1.}"; it.unibz.inf.ontop.rdf4j.repository.TupleQuery query = conn.prepareTupleQuery(QueryLanguage.SPARQL, queryString); query.setBinding("x", new org.eclipse.rdf4j.model.impl.URIImpl("http://www.semanticweb.org/ontologies/2013/7/untitled-ontology-150#Class1-1")); it.unibz.inf.ontop.rdf4j.repository.TupleQueryResult result = query.evaluate(); int count = 0; while (result.hasNext()) { result.next(); count++; } result.close(); org.junit.Assert.assertEquals(1, count); } close() { try { resultSet.close(); } catch (it.unibz.inf.ontop.exception.OntopConnectionException e) { throw new it.unibz.inf.ontop.owlapi.exception.OntopOWLException(e); } }
test_sysExit() { java.lang.String command = "import<sp>sys\n" + ("sys.exit(1)\n" + "output['content']='no<sp>error?'"); execute(command); org.junit.Assert.assertTrue(true); } execute(com.netsuite.webservices.test.platform.NetSuitePortType) { com.netsuite.webservices.test.platform.messages.LoginRequest request = new com.netsuite.webservices.test.platform.messages.LoginRequest(); request.setPassport(passport); com.netsuite.webservices.test.platform.messages.LoginResponse response = port.login(request); return response.getSessionResponse(); }
testMultipleProviderServices() { org.osgi.framework.BundleContext implBC = mockSPIBundleContext(org.easymock.EasyMock.createNiceMock(org.osgi.framework.ServiceRegistration.class)); org.osgi.framework.Bundle implBundle = mockMultiSPIBundle(implBC); org.osgi.framework.Bundle spiBundle = org.easymock.EasyMock.createNiceMock(org.osgi.framework.Bundle.class); org.easymock.EasyMock.expect(spiBundle.getBundleId()).andReturn(25L).anyTimes(); org.easymock.EasyMock.replay(spiBundle); org.apache.aries.spifly.ProviderBundleTrackerCustomizer customizer = new org.apache.aries.spifly.ProviderBundleTrackerCustomizer(org.easymock.EasyMock.createNiceMock(org.apache.aries.spifly.BaseActivator.class), spiBundle); org.junit.Assert.assertEquals(2, customizer.addingBundle(implBundle, null).size()); } addingBundle(org.osgi.framework.Bundle, org.osgi.framework.BundleEvent) { try { activator.addConsumerWeavingData(bundle, headerName); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } return bundle; }
testWithVariableColumns() { final com.orangesignal.csv.CsvConfig cfg = new com.orangesignal.csv.CsvConfig(); cfg.withVariableColumns(false); org.junit.Assert.assertThat(cfg.isVariableColumns(), org.hamcrest.core.Is.is(false)); } isVariableColumns() { return variableColumns; }
swallowRuntimeException() { final java.lang.String result = org.kie.workbench.common.stunner.core.graph.util.Exceptions.swallow(() -> methodThatThrowsRuntimeException(), org.kie.workbench.common.stunner.core.graph.util.ExceptionsTest.DEFAULT_RESULT); org.junit.Assert.assertEquals(result, org.kie.workbench.common.stunner.core.graph.util.ExceptionsTest.DEFAULT_RESULT); } methodThatThrowsRuntimeException() { throw new java.lang.RuntimeException(); }
testEqualsFalseDiffId() { final com.cloud.utils.nio.Link link1 = mock(com.cloud.utils.nio.Link.class); final com.cloud.agent.manager.ConnectedAgentAttache agentAttache1 = new com.cloud.agent.manager.ConnectedAgentAttache(null, 1, null, link1, false); final com.cloud.agent.manager.ConnectedAgentAttache agentAttache2 = new com.cloud.agent.manager.ConnectedAgentAttache(null, 2, null, link1, false); org.junit.Assert.assertFalse(agentAttache1.equals(agentAttache2)); } equals(java.lang.Object) { if (o == null) { return false; } if (o instanceof com.cloud.utils.events.SubscriptionMgr.SubscriberInfo) { return(((this.clazz) == (((com.cloud.utils.events.SubscriptionMgr.SubscriberInfo) (o)).clazz)) && ((this.subscriber) == (((com.cloud.utils.events.SubscriptionMgr.SubscriberInfo) (o)).subscriber))) && (this.methodName.equals(((com.cloud.utils.events.SubscriptionMgr.SubscriberInfo) (o)).methodName)); } return false; }
testGetEncountersInPatientListShouldNotReturnPatientsAccordingToNotInList() { org.raxa.module.raxacore.PatientList mainList = new org.raxa.module.raxacore.PatientList(); org.raxa.module.raxacore.PatientList notInList1 = new org.raxa.module.raxacore.PatientList(); mainList.setName("GetPatientsTestList"); notInList1.setName("TestPatientsNotInList"); notInList1.setSearchQuery(("?encounterType=61ae96f4-6afe-4351-b6f8-cd4fc383ctyy" + "&startDate=2000-01-01T00:00:00&endDate=2012-01-02T00:00:00")); s.savePatientList(notInList1); mainList.setSearchQuery((("?encounterType=61ae96f4-6afe-4351-b6f8-cd4fc383ctyr" + "&startDate=2000-01-01T00:00:00&endDate=2012-01-02T00:00:00&notInList=") + (notInList1.getUuid()))); java.util.List < org.openmrs.Encounter > encs = s.getEncountersInPatientList(mainList); org.junit.Assert.assertEquals(encs.size(), 2); } getEncountersInPatientList(org.raxa.module.raxacore.PatientList) { if ((patientList.getSearchQuery()) == null) { return new java.util.ArrayList < org.openmrs.Encounter > (); } java.lang.String query = patientList.getSearchQuery(); if ((query.indexOf("?encounterType=<uuid>&startDate=2012-05-07&endDate=2012-05-08&inlist=<uuidForList>&notinlist=<uuidForList>" 3)) == 0) { query = query.substring(1); } org.openmrs.EncounterType encType = null; java.util.Date startDate = null; java.util.Date endDate = null; org.openmrs.Provider provid = null; org.openmrs.Patient patient = null; java.lang.String uuid = null; java.util.List < org.openmrs.Encounter > inListEncounters = null; java.util.List < org.openmrs.Patient > notInListPatients = new java.util.ArrayList < org.openmrs.Patient > (); java.util.List < org.openmrs.Encounter > notInListEncounters = new java.util.ArrayList < org.openmrs.Encounter > (); org.openmrs.Location location = null; java.lang.String containsOrderType = ""; java.lang.String[] queryFields = query.split("&"); for (int i = 0; i < (queryFields.length); i++) { if ((queryFields[i].indexOf("encounterType=")) != (- 1)) { encType = org.openmrs.api.context.Context.getEncounterService().getEncounterTypeByUuid(queryFields[i].substring(14)); } else if ((queryFields[i].indexOf("location=")) != (- 1)) { location = org.openmrs.api.context.Context.getLocationService().getLocationByUuid(queryFields[i].substring(9)); } else if ((queryFields[i].indexOf("startDate=")) != (- 1)) { startDate = getDateFromString(queryFields[i].substring(10)); } else if ((queryFields[i].indexOf("?encounterType=<uuid>&startDate=2012-05-07&endDate=2012-05-08&inlist=<uuidForList>&notinlist=<uuidForList>" 4)) != (- 1)) { endDate = getDateFromString(queryFields[i].substring(8)); } else if ((queryFields[i].indexOf("inList=")) != (- 1)) { inListEncounters = new java.util.ArrayList < org.openmrs.Encounter > (); java.lang.String[] inListUuids = queryFields[i].substring(7).split("?encounterType=<uuid>&startDate=2012-05-07&endDate=2012-05-08&inlist=<uuidForList>&notinlist=<uuidForList>" 2); for (int j = 0; j < (inListUuids.length); j++) { inListEncounters.addAll(getEncountersInPatientList(getPatientListByUuid(inListUuids[j]))); } } else if ((queryFields[i].indexOf("notInList=")) != (- 1)) { java.lang.String[] notInListUuids = queryFields[i].substring(10).split("?encounterType=<uuid>&startDate=2012-05-07&endDate=2012-05-08&inlist=<uuidForList>&notinlist=<uuidForList>" 2); for (int k = 0; k < (notInListUuids.length); k++) { notInListPatients.addAll(getPatientsInPatientList(getPatientListByUuid(notInListUuids[k]))); notInListEncounters.addAll(getEncountersInPatientList(getPatientListByUuid(notInListUuids[k]))); } } else if ((queryFields[i].indexOf("?encounterType=<uuid>&startDate=2012-05-07&endDate=2012-05-08&inlist=<uuidForList>&notinlist=<uuidForList>" 0)) != (- 1)) { uuid = queryFields[i].substring(9); provid = org.openmrs.api.context.Context.getProviderService().getProviderByUuid(uuid); } else if ((queryFields[i].indexOf("?encounterType=<uuid>&startDate=2012-05-07&endDate=2012-05-08&inlist=<uuidForList>&notinlist=<uuidForList>" 1)) != (- 1)) { uuid = queryFields[i].substring(8); patient = org.openmrs.api.context.Context.getPatientService().getPatientByUuid(uuid); } else if ((queryFields[i].indexOf("containsOrderType=")) != (- 1)) { containsOrderType = queryFields[i].substring(18); } } java.util.List < org.openmrs.EncounterType > encTypes = new java.util.ArrayList < org.openmrs.EncounterType > (); java.util.List < org.openmrs.Provider > provids = new java.util.ArrayList < org.openmrs.Provider > (); java.util.List < org.openmrs.Encounter > encs = new java.util.ArrayList < org .
givenPersonObject_whenSerializeWithAdapter_thenGetPersonJson() { javax.json.bind.JsonbConfig config = new javax.json.bind.JsonbConfig().withAdapters(new com.baeldung.adapter.PersonAdapter()); javax.json.bind.Jsonb jsonb = javax.json.bind.JsonbBuilder.create(config); com.baeldung.jsonb.Person person = new com.baeldung.jsonb.Person(1, "Jhon", "jhon@test.com", 0, java.time.LocalDate.of(2019, 9, 7), java.math.BigDecimal.valueOf(1000.0)); java.lang.String jsonPerson = jsonb.toJson(person); java.lang.String jsonExpected = "{\"id\":1," + "\"name\":\"Jhon\"}"; org.junit.Assert.assertTrue(jsonExpected.equals(jsonPerson)); } equals(java.lang.Object) { if ((this) == obj) { return true; } if (obj == null) { return false; } if (!(obj instanceof com.baeldung.jackson.entities.MyPair)) { return false; } com.baeldung.jackson.entities.MyPair other = ((com.baeldung.jackson.entities.MyPair) (obj)); if ((first) == null) { if ((other.first) != null) { return false; } } else if (!(first.equals(other.first))) { return false; } if ((second) == null) { if ((other.second) != null) { return false; } } else if (!(second.equals(other.second))) { return false; } return true; }
testGetBundleWhenRequestingBundleShouldReturnBundle() { java.lang.String canonicalName = com.pentaho.big.data.bundles.impl.shim.common.ShimBridgingClassloader.class.getCanonicalName(); java.lang.String packageName = com.pentaho.big.data.bundles.impl.shim.common.ShimBridgingClassloader.class.getPackage().getName(); java.net.URL url = getClass().getClassLoader().getResource(((canonicalName.replace(".", "/")) + ".class")); when(bundleWiring.findEntries(("/" + (packageName.replace(".", "/"))),((com.pentaho.big.data.bundles.impl.shim.common.ShimBridgingClassloader.class.getSimpleName()) + ".class"), 0)).thenReturn(java.util.Arrays.asList(url)); when(parentClassLoader.loadClass(anyString(), anyBoolean())).thenAnswer(new org.mockito.stubbing.Answer < java.lang.Class<?> > () { @com.pentaho.big.data.bundles.impl.shim.common.Override public java.lang.Class<?> answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable { java.lang.Object[] arguments = invocation.getArguments(); return new com.pentaho.big.data.bundles.impl.shim.common.ShimBridgingClassloader.PublicLoadResolveClassLoader(getClass().getClassLoader()).loadClass(((java.lang.String) (arguments[0])),((boolean) (arguments[1]))); } }); java.lang.Class<?> shimBridgingClassloaderClass = shimBridgingClassloader.loadClass(canonicalName, true); when(shimBridgingClassloader.getBundle()).thenReturn(bundle); org.osgi.framework.Bundle actualBundle = org.osgi.framework.FrameworkUtil.getBundle(shimBridgingClassloaderClass); org.junit.Assert.assertEquals(actualBundle, bundle); } getBundle() { return this.bundleWiring.getBundle(); }
getDocument_nullXml() { billingData.setResultXML(null); org.w3c.dom.Document document = billingData.getDocument(); org.junit.Assert.assertNull(document); } getDocument() { java.lang.String resultXml = getResultXML(); if (resultXml == null) { return null; } if (((xmlHash) != (resultXml.hashCode())) || ((document) == null)) { document = org.oscm.converter.XMLConverter.convertToDocument(resultXml, true); xmlHash = resultXml.hashCode(); } return document; }
shouldFindButtonByClass() { openStartActivity(); java.lang.String buttonText = "EN<sp>Button"; org.openqa.selenium.WebElement clickMe = driver().findElement(org.openqa.selenium.By.className("android.widget.Button")); org.junit.Assert.assertEquals(buttonText, clickMe.getText()); } getText() { throw new java.lang.RuntimeException(io.selendroid.server.model.AndroidRElement.NOT_IMPLEMENTED_ERROR_MSG); }
testFormatSqsQueueName_DoesNotTouchExistingDashes() { java.lang.String expected = "prod-foo-bar"; java.lang.String actual = com.streamreduce.util.SqsQueueNameFormatter.formatSqsQueueName("foo-bar", "prod"); org.junit.Assert.assertEquals(expected, actual); } formatSqsQueueName(java.lang.String, java.lang.String) { if ((org.apache.commons.lang.StringUtils.isBlank(originalQueueName)) || (org.apache.commons.lang.StringUtils.isBlank(environmentPrefix))) { throw new java.lang.IllegalArgumentException("queueName<sp>and<sp>environmentPrefix<sp>must<sp>be<sp>non-blank"); } java.lang.String queueNameWithPrefix = ((com.streamreduce.util.SqsQueueNameFormatter.addMachineNameToPrefixIfNeeded(environmentPrefix)) + "-") + originalQueueName; java.lang.String modifiedQueueName = queueNameWithPrefix.trim().replaceAll("[^a-zA-Z1-9_-]", "-"); return org.apache.commons.lang.StringUtils.substring(modifiedQueueName, 0, com.streamreduce.util.SqsQueueNameFormatter.MAX_LENGTH_OF_SQS_QUEUE); }
testMarshallWithNot() { java.lang.String whenBenNotVilgaxRule = ((((((((((((((("when\n" 0 + (getClass().getCanonicalName())) + ".*\n") + "rule<sp>one\n") + "when\n") + "<sp>Ben()\n") + "<sp>not(Vilgax())\n") + "then\n") + "<sp>//System.out.println(\"Ben!\"when\n" 1) + "when\n" 2) + "\n") + "rule<sp>two\n") + "when\n") + "<sp>Ben()\n") + "then\n") + "<sp>//System.out.println(\"Vilgax..\"when\n" 1) + "when\n" 2; org.kie.api.KieBase knowledgeBase = initializeKnowledgeBase(whenBenNotVilgaxRule); org.kie.api.runtime.KieSession ksession = knowledgeBase.newKieSession(); ksession.insert(new org.drools.compiler.integrationtests.UnmarshallingTest.Ben()); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); org.kie.internal.marshalling.MarshallerFactory.newMarshaller(knowledgeBase).marshall(baos, ksession); ksession.dispose(); knowledgeBase = initializeKnowledgeBase(whenBenNotVilgaxRule); java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(baos.toByteArray()); try { ksession = org.kie.internal.marshalling.MarshallerFactory.newMarshaller(knowledgeBase).unmarshall(bais); } catch (java.lang.Throwable t) { t.printStackTrace(); org.junit.Assert.fail(((t.getClass().getSimpleName()) + "<sp>thrown<sp>when<sp>trying<sp>to<sp>unmarshall<sp> (see<sp>stack<sp>trace<sp>in<sp>output).")); } int rules = ksession.fireAllRules(); org.junit.Assert.assertEquals(2, rules); } fireAllRules() { return 0; }
capacityViolationAfterAct2_shouldWorkWhenViolated() { buildAnotherScenarioWithOnlyOneVehicleAndWithoutAnyConstraintsBefore(); jsprit.core.reporting.SolutionPrinter.print(vrp, solution, SolutionPrinter.Print.VERBOSE); jsprit.core.analysis.SolutionAnalyser analyser = new jsprit.core.analysis.SolutionAnalyser(vrp, solution, new jsprit.core.problem.cost.TransportDistance() { @jsprit.core.analysis.Override public double getDistance(jsprit.core.problem.Location from, jsprit.core.problem.Location to) { return vrp.getTransportCosts().getTransportCost(from, to, 0.0, null, null); } }); jsprit.core.problem.solution.route.VehicleRoute route = solution.getRoutes().iterator().next(); jsprit.core.problem.Capacity cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(1), route); org.junit.Assert.assertEquals(50, cap.get(0)); }
whenEmptyDictionary_thenReturnUnchangedSet() { java.util.List dictionary = com.google.common.collect.Lists.newArrayList(); java.util.List < java.lang.String > metrics = com.google.common.collect.Lists.newArrayList("Capacity", "Size"); com.appdynamics.extensions.cassandra.filters.IncludeFilter filter = new com.appdynamics.extensions.cassandra.filters.IncludeFilter(dictionary); java.util.Set < java.lang.String > filteredSet = com.google.common.collect.Sets.newHashSet("Hits"); filter.applyFilter(filteredSet, metrics); org.junit.Assert.assertTrue(((filteredSet.size()) == 1)); } applyFilter(com.appdynamics.extensions.cassandra.filters.Set, com.appdynamics.extensions.cassandra.filters.List) { if ((allMetrics == null) || ((dictionary) == null)) { return; } for (java.lang.Object obj : dictionary) { com.appdynamics.extensions.cassandra.filters.Map metric = ((com.appdynamics.extensions.cassandra.filters.Map) (obj)); com.appdynamics.extensions.cassandra.filters.Map.Entry firstEntry = ((com.appdynamics.extensions.cassandra.filters.Map.Entry) (metric.entrySet().iterator().next())); java.lang.String metricName = firstEntry.getKey().toString(); if (com.appdynamics.extensions.cassandra.CassandraUtil.isCompositeObject(metricName)) { metricName = com.appdynamics.extensions.cassandra.CassandraUtil.getMetricNameFromCompositeObject(metricName); } if (allMetrics.contains(metricName)) { filteredSet.add(metricName); } } }
testServiceRegistration() { org.junit.Assert.assertNotNull(cs); }
clearDatePartForCalendar() { java.util.Date date = new java.util.Date(); java.util.Calendar cal = java.util.Calendar.getInstance(); cal.setTime(date); java.util.Calendar cal2 = java.util.Calendar.getInstance(); cal2.setTime(date); cal.set(Calendar.YEAR, 1970); cal.set(Calendar.MONTH, Calendar.JANUARY); cal.set(Calendar.DATE, 1); org.junit.Assert.assertThat(org.slim3.util.DateUtil.clearDatePart(cal2), org.hamcrest.CoreMatchers.is(cal)); } clearDatePart(java.util.Date) { if (date == null) { return null; } java.util.Calendar cal = org.slim3.util.DateUtil.toCalendar(date); cal = org.slim3.util.DateUtil.clearDatePart(cal); return cal.getTime(); }
MethodDeclaration() { java.lang.Class<?> klass = getTypeDeclaration(klass("Testing", f.newMethodDeclaration(null, java.util.Arrays.asList(new com.asakusafw.utils.java.model.syntax.Attribute[] { f.newModifier(ModifierKind.PUBLIC) }), java.util.Collections.emptyList(), com.asakusafw.utils.java.model.util.Models.toType(f, java.lang.String.class), f.newSimpleName("method"), java.util.Collections.emptyList(), 0, java.util.Arrays.asList(new com.asakusafw.utils.java.model.syntax.Type[] { com.asakusafw.utils.java.model.util.Models.toType(f, com.asakusafw.utils.java.internal.model.util.Exception.class) }), f.newBlock(java.util.Arrays.asList(new com.asakusafw.utils.java.model.syntax.Statement[] { f.newReturnStatement(com.asakusafw.utils.java.model.util.Models.toLiteral(f, "hello")) }))))); java.lang.Object obj = create(klass); java.lang.reflect.Method method = klass.getDeclaredMethod("method"); org.junit.Assert.assertThat(method.invoke(obj), is(((java.lang.Object) ("hello")))); } invoke(java.lang.String[]) { try { java.util.List < java.lang.String > arguments = new java.util.ArrayList(); java.util.Collections.addAll(arguments, args); java.util.Collections.addAll(arguments, "--conf", writeConfFile().getAbsolutePath()); if ((workingDir) != null) { java.util.Collections.addAll(arguments, "--working-directory", workingDir.getAbsolutePath()); } java.io.File outFile = new java.io.File(folder.getRoot(), "__OUTPUT__"); java.util.Collections.addAll(arguments, "--output", outFile.getAbsolutePath()); java.util.Collections.addAll(arguments, "--encoding", StandardCharsets.UTF_8.name()); com.asakusafw.operation.tools.directio.DirectIoToolsTestRoot.LOG.info("{}.{}<sp>:<sp>{}", getClass().getSimpleName(), testName.getMethodName(), java.util.Arrays.toString(args)); try { com.asakusafw.operation.tools.directio.DirectIo.exec(arguments.toArray(new java.lang.String[arguments.size()])); } catch (java.lang.RuntimeException e) { com.asakusafw.operation.tools.directio.DirectIoToolsTestRoot.collectOutput(outFile).forEach((s) -> com.asakusafw.operation.tools.directio.DirectIoToolsTestRoot.LOG.info("{}", s)); throw e; } com.asakusafw.operation.tools.directio.DirectIoToolsTestRoot.collectOutput(outFile).forEach((s) -> com.asakusafw.operation.tools.directio.DirectIoToolsTestRoot.LOG.info("{}", s)); return com.asakusafw.operation.tools.directio.DirectIoToolsTestRoot.collectOutput(outFile); } catch (java.io.IOException e) { throw new java.lang.AssertionError(e); } }
testLastStatus() { final org.apache.reef.bridge.client.DriverStatusHTTPHandler tester = org.apache.reef.bridge.client.TestDriverStatusHTTPHandler.getInstance(); for (final org.apache.reef.proto.ReefServiceProtos.JobStatusProto status : allStatuses) { tester.onNext(status); org.junit.Assert.assertSame(status, tester.getLastStatus()); } } getLastStatus() { return this.lastStatus; }
testCalculateITableName_IndexIdentifier() { logger.debug("calculateITableName"); com.pearson.docussandra.domain.objects.IndexIdentifier indexId = new com.pearson.docussandra.domain.objects.IndexIdentifier(com.pearson.docussandra.testhelper.Fixtures.createTestIndexOneField().getId()); java.lang.String expResult = "mydb_mytable_myindexwithonefield"; java.lang.String result = com.pearson.docussandra.Utils.calculateITableName(indexId); org.junit.Assert.assertEquals(expResult, result); } calculateITableName(com.pearson.docussandra.domain.objects.Index) { return com.pearson.docussandra.Utils.calculateITableName(index.getDatabaseName(), index.getTableName(), index.getName()); }
setToNextTimeOnMoment() { net.time4j.Moment tsp = net.time4j.PlainTimestamp.of(2014, 8, 19, 14, 30).atUTC(); tsp = tsp.with(PlainTime.COMPONENT.setToNext(net.time4j.PlainTime.of(21, 45)).inTimezone(ZonalOffset.UTC)); org.junit.Assert.assertThat(tsp, org.hamcrest.CoreMatchers.is(net.time4j.PlainTimestamp.of(2014, 8, 19, 21, 45).atUTC())); } of(int, int, int, int, int) { return net.time4j.PlainTimestamp.of(year, month, dayOfMonth, hour, minute, 0); }
shouldEqualGivenSelf() { uk.co.webamoeba.mockito.collections.util.OrderedSet < java.lang.Object > orderedSet = new uk.co.webamoeba.mockito.collections.util.OrderedSet < java.lang.Object > (); boolean equals = orderedSet.equals(orderedSet); org.junit.Assert.assertTrue(equals); } equals(java.lang.Object) { return collection.equals(o); }
testLinkStopWithoutExtraEdges() { org.opentripplanner.graph_builder.linking.SimpleStreetSplitter splitter = new org.opentripplanner.graph_builder.linking.SimpleStreetSplitter(graph); splitter.link(); org.junit.Assert.assertEquals(16, graph.getEdges().size()); } getEdges() { org.opentripplanner.routing.graph.Set < org.opentripplanner.routing.graph.Edge > edges = new org.opentripplanner.routing.graph.HashSet < org.opentripplanner.routing.graph.Edge > (); for (org.opentripplanner.routing.graph.Vertex v : this.getVertices()) { edges.addAll(v.getOutgoing()); } return edges; }
testPacingInterval() { org.omg.CosNotification.StructuredEvent[] _events = new org.omg.CosNotification.StructuredEvent[] { testUtils_.getStructuredEvent(), testUtils_.getStructuredEvent(), testUtils_.getStructuredEvent() }; org.omg.CORBA.Any maxBatchSize = setup.getClientOrb().create_any(); maxBatchSize.insert_long(2); org.omg.CORBA.Any pacingInterval = setup.getClientOrb().create_any(); org.omg.TimeBase.TimeTHelper.insert(pacingInterval, 200000); org.jacorb.test.notification.SequencePushSender _pushSender = new org.jacorb.test.notification.SequencePushSender(setup.getClientOrb(), _events); org.jacorb.test.notification.SequencePushReceiver _pushReceiver = new org.jacorb.test.notification.SequencePushReceiver(setup.getClientOrb()); _pushReceiver.setExpected(4); _pushSender.connect(channel_, false); _pushReceiver.connect(channel_, false); _pushReceiver.getPushSupplier().set_qos(new org.omg.CosNotification.Property[] { new org.omg.CosNotification.Property(org.omg.CosNotification.MaximumBatchSize.value, maxBatchSize), new org.omg.CosNotification.Property(org.omg.CosNotification.PacingInterval.value, pacingInterval) }); _pushReceiver.start(); _pushSender.start(); _pushSender.join(); _pushReceiver.join(); org.junit.Assert.assertEquals(3, _pushReceiver.getResult().size()); } getResult() { try { return org.jacorb.test.bugs.bugjac178.JAC178Impl.result.toString(); } finally { org.jacorb.test.bugs.bugjac178.JAC178Impl.result.clear(); } }
testGetSources() { java.util.Set < java.io.File > sources = testMojo.getSources(); org.junit.Assert.assertEquals(0, sources.size()); } getSources() { return getFiles(sources, org.codehaus.gmavenplus.mojo.AbstractGroovySourcesMojo.MAIN, false); }
testSetWeightType() { ew.setWeightType(WeightTypes.WEIGHT); org.junit.Assert.assertEquals(WeightTypes.WEIGHT, ew.type); } setWeightType(org.cytoscape.view.layout.WeightTypes) { this.type = type; }
testApplicationLifecycle() { org.apache.eagle.metadata.model.SiteEntity siteEntity = new org.apache.eagle.metadata.model.SiteEntity(); siteEntity.setSiteId("test_site"); siteEntity.setSiteName("Test<sp>Site"); siteEntity.setDescription("Test<sp>Site<sp>for<sp>ExampleApplicationProviderTest"); siteResource.createSite(siteEntity); org.junit.Assert.assertNotNull(siteEntity.getUuid()); org.apache.eagle.app.service.ApplicationOperations.InstallOperation installOperation = new org.apache.eagle.app.service.ApplicationOperations.InstallOperation("test_site", "TEST_APPLICATION", ApplicationEntity.Mode.LOCAL); installOperation.setConfiguration(getConf()); org.apache.eagle.metadata.model.ApplicationEntity applicationEntity = applicationResource.installApplication(installOperation).getData(); applicationResource.startApplication(new org.apache.eagle.app.service.ApplicationOperations.StartOperation(applicationEntity.getUuid())); statusUpdateService.updateApplicationEntityStatus(applicationEntity); applicationResource.stopApplication(new org.apache.eagle.app.service.ApplicationOperations.StopOperation(applicationEntity.getUuid())); awaitApplicationStop(applicationEntity); applicationResource.uninstallApplication(new org.apache.eagle.app.service.ApplicationOperations.UninstallOperation(applicationEntity.getUuid())); try { applicationResource.getApplicationEntityByUUID(applicationEntity.getUuid()); org.junit.Assert.fail((("Application<sp>instance<sp> (UUID:<sp>" + (applicationEntity.getUuid())) + ")<sp>should<sp>have<sp>been<sp>uninstalled")); } catch (java.lang.Exception ex) { } } getUuid() { return uuid; }
testReadWriteString() { java.lang.String val = "abcdefg"; org.eclipse.tracecompass.datastore.core.serialization.ISafeByteBufferWriter buffer = org.eclipse.tracecompass.datastore.core.serialization.SafeByteBufferFactory.wrapWriter(fMainBuffer, 512); buffer.putString(val); fMainBuffer.flip(); org.eclipse.tracecompass.datastore.core.serialization.ISafeByteBufferReader reader = org.eclipse.tracecompass.datastore.core.serialization.SafeByteBufferFactory.wrapReader(fMainBuffer, 512); org.junit.Assert.assertEquals(val, reader.getString()); } getString() { int strSize = fBuffer.getShort(); byte[] array = new byte[strSize]; fBuffer.get(array); return new java.lang.String(array); }
sameProperties() { java.lang.String expected = "{\"all\":false,\"properties\"],\"1EmployeeId\",\"Age\"],\"links\":[]}"; java.lang.String actual = getExpandSelectTree("EmployeeId,Age,EmployeeId", null).toJsonString(); org.junit.Assert.assertEquals(expected, actual); } toJsonString() { try { java.io.StringWriter writer = new java.io.StringWriter(); com.sap.core.odata.core.ep.util.JsonStreamWriter jsonStreamWriter = new com.sap.core.odata.core.ep.util.JsonStreamWriter(writer); jsonStreamWriter.beginObject().name("all").unquotedValue(java.lang.Boolean.toString(isAll())).separator().name("properties").beginArray(); boolean first = true; for (com.sap.core.odata.api.edm.EdmProperty property : properties) { if (first) { first = false; } else { jsonStreamWriter.separator(); } jsonStreamWriter.stringValueRaw(property.getName()); } jsonStreamWriter.endArray().separator().name("links").beginArray(); first = true; for (Map.Entry < java.lang.String, com.sap.core.odata.core.uri.ExpandSelectTreeNodeImpl > entry : links.entrySet()) { if (first) { first = false; } else { jsonStreamWriter.separator(); } final java.lang.String nodeString = ((entry.getValue()) == null) ? null : entry.getValue().toJsonString(); jsonStreamWriter.beginObject().name(entry.getKey()).unquotedValue(nodeString).endObject(); } jsonStreamWriter.endArray().endObject(); writer.flush(); return writer.toString(); } catch (final java.io.IOException e) { throw new com.sap.core.odata.core.exception.ODataRuntimeException("IOException:<sp>", e); } catch (final com.sap.core.odata.api.edm.EdmException e) { throw new com.sap.core.odata.core.exception.ODataRuntimeException("EdmException:<sp>", e); } }
testCfmlFunctionStatement() { java.lang.String script = "savecontent<sp>variable='renderedcontent'<sp>{model<sp>=<sp>duplicate(_model);<sp>metadata<sp>=<sp>duplicate(_model);<sp>INCLUDE<sp>'/ram/#randName#';};"; cfml.parsing.cfscript.script.CFScriptStatement scriptStatement = null; scriptStatement = parseScript(script); if ((fCfmlParser.getMessages().size()) > 0) { org.junit.Assert.fail(("whoops!<sp>" + (fCfmlParser.getMessages()))); } org.junit.Assert.assertNotNull(scriptStatement); } getMessages() { return messages; }
testSwitchCase2() { org.eclipse.xtend2.lib.StringConcatenation _builder = new org.eclipse.xtend2.lib.StringConcatenation(); _builder.append("private<sp>void<sp>doSwitch2()<sp>{" 3); _builder.newLine(); _builder.append("\t"); _builder.append("private<sp>void<sp>doSwitch2()<sp>{"); _builder.newLine(); _builder.append("private<sp>void<sp>doSwitch2()<sp>{" 2); _builder.append("int<sp>i<sp>=<sp>0;"); _builder.newLine(); _builder.append("private<sp>void<sp>doSwitch2()<sp>{" 2); _builder.append("switch<sp> (i)<sp>{"); _builder.newLine(); _builder.append("\t\t\t"); _builder.append("case<sp>1:"); _builder.newLine(); _builder.append("private<sp>void<sp>doSwitch2()<sp>{" 1); _builder.append("i++;"); _builder.newLine(); _builder.append("private<sp>void<sp>doSwitch2()<sp>{" 1); _builder.append("return;"); _builder.newLine(); _builder.append("\t\t\t"); _builder.append("private<sp>void<sp>doSwitch2()<sp>{" 0); _builder.newLine(); _builder.append("private<sp>void<sp>doSwitch2()<sp>{" 1); _builder.append("return;"); _builder.newLine(); _builder.append("\t\t\t"); _builder.append("}"); _builder.newLine(); _builder.append("\t\t\t"); _builder.append("default:"); _builder.newLine(); _builder.append("private<sp>void<sp>doSwitch2()<sp>{" 1); _builder.append("return;"); _builder.newLine(); _builder.append("private<sp>void<sp>doSwitch2()<sp>{" 2); _builder.append("}"); _builder.newLine(); _builder.append("\t"); _builder.append("}"); _builder.newLine(); _builder.append("}"); org.eclipse.xtend.core.xtend.XtendClass clazz = this.toValidXtendClass(_builder); org.junit.Assert.assertNotNull(clazz); } toValidXtendClass(java.lang.CharSequence) { org.eclipse.xtend.core.xtend.XtendTypeDeclaration _validTypeDeclaration = this.toValidTypeDeclaration("Clazz", javaCode); return((org.eclipse.xtend.core.xtend.XtendClass) (_validTypeDeclaration)); }
testUnconsumedReads() { org.apache.beam.runners.dataflow.options.DataflowPipelineOptions dataflowOptions = buildPipelineOptions(); org.apache.beam.runners.dataflow.DataflowRunnerTest.RuntimeTestOptions options = dataflowOptions.as(org.apache.beam.runners.dataflow.DataflowRunnerTest.RuntimeTestOptions.class); org.apache.beam.sdk.Pipeline p = buildDataflowPipeline(dataflowOptions); p.apply(org.apache.beam.sdk.io.TextIO.read().from(options.getInput())); org.apache.beam.runners.dataflow.DataflowRunner.fromOptions(dataflowOptions).replaceTransforms(p); final java.util.concurrent.atomic.AtomicBoolean unconsumedSeenAsInput = new java.util.concurrent.atomic.AtomicBoolean(); p.traverseTopologically(new org.apache.beam.sdk.Pipeline.PipelineVisitor.Defaults() { @org.apache.beam.runners.dataflow.Override public void visitPrimitiveTransform(org.apache.beam.sdk.runners.TransformHierarchy.Node node) { unconsumedSeenAsInput.set(true); } }); org.junit.Assert.assertThat(unconsumedSeenAsInput.get(), org.hamcrest.Matchers.is(true)); } get() { org.apache.beam.runners.core.construction.ArtifactServiceStager.StagingCallable.PutArtifactResponseObserver responseObserver = new org.apache.beam.runners.core.construction.ArtifactServiceStager.StagingCallable.PutArtifactResponseObserver(); org.apache.beam.vendor.grpc.v1p13p1.io.grpc.stub.StreamObserver < org.apache.beam.model.jobmanagement.v1.ArtifactApi.PutArtifactRequest > requestObserver = stub.putArtifact(responseObserver); org.apache.beam.model.jobmanagement.v1.ArtifactApi.ArtifactMetadata metadata = org.apache.beam.model.jobmanagement.v1.ArtifactApi.ArtifactMetadata.newBuilder().setName(file.getStagingName()).build(); org.apache.beam.model.jobmanagement.v1.ArtifactApi.PutArtifactMetadata putMetadata = org.apache.beam.model.jobmanagement.v1.ArtifactApi.PutArtifactMetadata.newBuilder().setMetadata(metadata).setStagingSessionToken(stagingSessionToken).build(); requestObserver.onNext(org.apache.beam.model.jobmanagement.v1.ArtifactApi.PutArtifactRequest.newBuilder().setMetadata(putMetadata).build()); org.apache.beam.vendor.guava.v20_0.com.google.common.hash.Hasher hasher = org.apache.beam.vendor.guava.v20_0.com.google.common.hash.Hashing.sha256().newHasher(); java.nio.channels.FileChannel channel = new java.io.FileInputStream(file.getFile()).getChannel(); java.nio.ByteBuffer readBuffer = java.nio.ByteBuffer.allocate(bufferSize); while ((!(responseObserver.isTerminal())) && ((channel.position()) < (channel.size()))) { readBuffer.clear(); channel.read(readBuffer); readBuffer.flip(); org.apache.beam.vendor.grpc.v1p13p1.com.google.protobuf.ByteString chunk = org.apache.beam.vendor.grpc.v1p13p1.com.google.protobuf.ByteString.copyFrom(readBuffer); hasher.putBytes(chunk.toByteArray()); readBuffer.rewind(); org.apache.beam.model.jobmanagement.v1.ArtifactApi.PutArtifactRequest request = org.apache.beam.model.jobmanagement.v1.ArtifactApi.PutArtifactRequest.newBuilder().setData(org.apache.beam.model.jobmanagement.v1.ArtifactApi.ArtifactChunk.newBuilder().setData(chunk).build()).build(); requestObserver.onNext(request); } requestObserver.onCompleted(); responseObserver.awaitTermination(); if ((responseObserver.err.get()) != null) { throw new java.lang.RuntimeException(responseObserver.err.get()); } return metadata.toBuilder().setSha256(hasher.hash().toString()).build(); }
multipleGeometryTypes() { final java.nio.file.Path tmpFile = java.nio.file.Files.createTempFile(tempDir, "multiple", ".mif"); try (final org.geotoolkit.data.mapinfo.mif.MIFFeatureStore store = new org.geotoolkit.data.mapinfo.mif.MIFFeatureStore(tmpFile.toUri())) { final org.apache.sis.feature.builder.FeatureTypeBuilder ftb = new org.apache.sis.feature.builder.FeatureTypeBuilder(); ftb.setName("multi"); ftb.addAttribute(java.lang.String.class).setName("otherProperty"); ftb.addAttribute(org.locationtech.jts.geom.Geometry.class).setName("geometry").setCRS(CommonCRS.WGS84.normalizedGeographic()).addRole(AttributeRole.DEFAULT_GEOMETRY); final org.opengis.feature.FeatureType featureType = ftb.build(); store.createFeatureType(featureType); final java.util.Set < org.opengis.util.GenericName > names = store.getNames(); org.junit.Assert.assertEquals(1, names.size()); org.opengis.util.GenericName name = names.iterator().next(); final java.util.List < org.opengis.feature.Feature > expectedFeatures = new java.util.ArrayList(4); try (final org.geotoolkit.data.FeatureWriter fw = store.getFeatureWriter(org.geotoolkit.data.query.QueryBuilder.filtered(name.toString(), Filter.EXCLUDE))) { org.opengis.feature.Feature feature = fw.next(); feature.setPropertyValue("otherProperty", "here<sp>is<sp>a<sp>point"); final org.locationtech.jts.geom.Point point = org.geotoolkit.data.mapinfo.MIFFeatureStoreTest.GF.createPoint(new org.locationtech.jts.geom.Coordinate(10.3, 15.7)); feature.setPropertyValue("geometry", point); fw.write(); expectedFeatures.add(feature); feature = fw.next(); feature.setPropertyValue("otherProperty", "here<sp>is<sp>a<sp>line"); final org.locationtech.jts.geom.Coordinate startPoint = new org.locationtech.jts.geom.Coordinate((- 1.6),(- 5.4)); org.locationtech.jts.geom.Coordinate[] coords = new org.locationtech.jts.geom.Coordinate[] { startPoint, new org.locationtech.jts.geom.Coordinate(0, 0), new org.locationtech.jts.geom.Coordinate(3.1, 3.4) }; final org.locationtech.jts.geom.MultiLineString line = org.geotoolkit.data.mapinfo.MIFFeatureStoreTest.GF.createMultiLineString(new org.locationtech.jts.geom.LineString[] { org.geotoolkit.data.mapinfo.MIFFeatureStoreTest.GF.createLineString(coords) }); feature.setPropertyValue("geometry", line); fw.write(); expectedFeatures.add(feature); feature = fw.next(); feature.setPropertyValue("otherProperty", "here<sp>is<sp>a<sp>polygon"); coords = new org.locationtech.jts.geom.Coordinate[] { startPoint, new org.locationtech.jts.geom.Coordinate((- 6),(- 6)), new org.locationtech.jts.geom.Coordinate((- 3.1),(- 3.4)), startPoint }; final org.locationtech.jts.geom.MultiPolygon polygon = org.geotoolkit.data.mapinfo.MIFFeatureStoreTest.GF.createMultiPolygon(new org.locationtech.jts.geom.Polygon[] { org.geotoolkit.data.mapinfo.MIFFeatureStoreTest.GF.createPolygon(coords) }); feature.setPropertyValue("geometry", polygon); fw.write(); expectedFeatures.add(feature); feature = fw.next(); feature.setPropertyValue("otherProperty", "here<sp>is<sp>a<sp>collection<sp>of<sp>geometries."); final org.locationtech.jts.geom.Geometry[] geometries = new org.locationtech.jts.geom.Geometry[] { polygon, line, org.geotoolkit.data.mapinfo.MIFFeatureStoreTest.GF.createMultiPoint(new org.locationtech.jts.geom.Point[] { point }) }; feature.setPropertyValue("geometry", org.geotoolkit.data.mapinfo.MIFFeatureStoreTest.GF.createGeometryCollection(geometries)); fw.write(); expectedFeatures.add(feature); } org.geotoolkit.data.mapinfo.MIFFeatureStoreTest.checkFeatures(expectedFeatures, store, org.geotoolkit.data.query.QueryBuilder.all(name.toString())); } } size() { return values.size(); }
test_abs_positive() { org.joda.money.BigMoney test = org.joda.money.TestBigMoney.GBP_2_34.abs(); org.junit.Assert.assertSame(org.joda.money.TestBigMoney.GBP_2_34, test); } abs() { return isNegative() ? negated() : this; }
testNormalizeArchiveNameForRootWar() { final java.lang.String normalizeArchiveName = org.jboss.arquillian.container.tomcat.CommonTomcatManagerTest.COMMON_TOMCAT_MANAGER.normalizeArchiveName("ROOT.war"); org.junit.Assert.assertEquals("", normalizeArchiveName); } normalizeArchiveName(java.lang.String) { org.jboss.arquillian.container.tomcat.Validate.notNull(name, "Archive<sp>name<sp>must<sp>not<sp>be<sp>empty"); if ("ROOT.war".equals(name)) { return ""; } if ((name.indexOf('.')) != (- 1)) { return name.substring(0, name.lastIndexOf(".")); } return name; }
listInteratorCantMoveBeyondUpperBound() { java.util.LinkedList < java.lang.String > list = new java.util.LinkedList(); list.addAll(java.util.Arrays.asList("1", "2", "3", "a", "b")); java.util.ListIterator < java.lang.String > iter = list.listIterator(4); org.junit.Assert.assertEquals("b", iter.next()); iter.next(); } next() { if ((offset) >= ((end) - 1)) { offset = end; return DONE; } return attrString.text.charAt((++ (offset))); }
getArrayBuffer() { v8.executeVoidScript("var<sp>buffer<sp>=<sp>new<sp>ArrayBuffer(8);"); com.eclipsesource.v8.V8ArrayBuffer buffer = ((com.eclipsesource.v8.V8ArrayBuffer) (v8.get("buffer"))); org.junit.Assert.assertNotNull(buffer); buffer.close(); } get(int) { v8.checkThread(); checkReleased(); int type = getType(); switch(type) { case FLOAT_32_ARRAY : return((java.lang.Number) (super.get(index))).floatValue(); case FLOAT_64_ARRAY : return super.get(index); case INT_32_ARRAY : return super.get(index); case INT_16_ARRAY : return((java.lang.Number) (super.get(index))).shortValue(); case INT_8_ARRAY : return((java.lang.Number) (super.get(index))).byteValue(); case UNSIGNED_INT_16_ARRAY : return 65535 &((java.lang.Integer) (super.get(index))); case UNSIGNED_INT_32_ARRAY : return - 1 &(((java.lang.Number) (super.get(index))).longValue()); case UNSIGNED_INT_8_CLAMPED_ARRAY : return((short) (255 &(((java.lang.Number) (super.get(index))).byteValue()))); case UNSIGNED_INT_8_ARRAY : return((short) (255 &(((java.lang.Number) (super.get(index))).shortValue()))); } return null; }
link$skip_AssociationEnd1() { java.lang.String skip = java.lang.Integer.toString(skipMaxNum); org.json.simple.JSONObject body = new org.json.simple.JSONObject(); try { body.put("__id", toUserDataId); createUserData(body, HttpStatus.SC_CREATED, Setup.TEST_CELL1, Setup.TEST_BOX1, Setup.TEST_ODATA, "SalesDetail"); body.put("__id", fromUserDataId); createUserData(body, HttpStatus.SC_CREATED, Setup.TEST_CELL1, Setup.TEST_BOX1, Setup.TEST_ODATA, "Sales"); linkUserData("SalesDetail", toUserDataId, "Sales", fromUserDataId); com.fujitsu.dc.test.utils.TResponse res = com.fujitsu.dc.test.utils.Http.request("box/odatacol/list-link-with-query.txt").with("cellPath", Setup.TEST_CELL1).with("srcPath" 3, Setup.TEST_BOX1).with("srcPath" 1, Setup.TEST_ODATA).with("srcPath",((("Sales" + "srcPath" 4) + (fromUserDataId)) + "srcPath" 5)).with("trgPath", "SalesDetail").with("srcPath" 6,("srcPath" 2 + skip)).with("srcPath" 0, com.fujitsu.dc.core.DcCoreConfig.getMasterToken()).with("accept", MediaType.APPLICATION_JSON).returns().statusCode(HttpStatus.SC_OK).debug(); org.json.simple.JSONArray results = ((org.json.simple.JSONArray) (((org.json.simple.JSONObject) (res.bodyAsJson().get("d"))).get("results"))); org.junit.Assert.assertEquals(0, results.size()); } finally { deleteUserDataLinks("SalesDetail", toUserDataId, "Sales", fromUserDataId); deleteUserData(Setup.TEST_CELL1, Setup.TEST_BOX1, Setup.TEST_ODATA, "Sales", fromUserDataId, com.fujitsu.dc.core.DcCoreConfig.getMasterToken(), HttpStatus.SC_NO_CONTENT); deleteUserData(Setup.TEST_CELL1, Setup.TEST_BOX1, Setup.TEST_ODATA, "SalesDetail", toUserDataId, com.fujitsu.dc.core.DcCoreConfig.getMasterToken(), HttpStatus.SC_NO_CONTENT); } } get(java.lang.String) { com.fujitsu.dc.test.jersey.DcRequest req = new com.fujitsu.dc.test.jersey.DcRequest(url); req.method = javax.ws.rs.HttpMethod.GET; return req; }
testThatWorksForOverridenMethodsOnMoreThanOneLevel() { java.lang.reflect.Method method = new net.vidageek.mirror.reflect.DefaultMethodReflector(provider, "equals", net.vidageek.mirror.fixtures.ChildFixture.class).withAnyArgs(); org.junit.Assert.assertNotNull(method); } withAnyArgs() { java.util.List < java.lang.reflect.Constructor < T > > constructors = new net.vidageek.mirror.dsl.Mirror(provider).on(clazz).reflectAll().constructors(); if ((constructors.size()) != 1) { throw new net.vidageek.mirror.exception.MirrorException((("there<sp>is<sp>more<sp>than<sp>one<sp>constructor<sp>on<sp>class<sp>" + (clazz.getName())) + ".<sp>withAnyArgs<sp>must<sp>be<sp>called<sp>only<sp>on<sp>classes<sp>with<sp>a<sp>single<sp>constructor.")); } return constructors.get(0); }
testSetRecursive() { final B builder = getBuilderInstance(); builder.setRecursive(); final A chmod = builder.build(); org.junit.Assert.assertEquals(true, chmod.isRecursive()); } isRecursive() { return recursive; }
typedObjectFromIntAndDouble() { com.pardot.rhombus.cobject.CField field = new com.pardot.rhombus.cobject.CField("test", "double"); java.lang.Integer jsonValue = 1234567890; double expected = 1234567890; java.lang.Object result = com.pardot.rhombus.util.JsonUtil.typedObjectFromValueAndField(jsonValue, field); org.junit.Assert.assertEquals(expected, result); } typedObjectFromValueAndField(java.lang.Object, com.pardot.rhombus.cobject.CField) { try { return com.pardot.rhombus.util.JsonUtil.typedObjectFromValueAndFieldType(jsonValue, field.getType()); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.IllegalArgumentException(((((((("Field<sp>" + (field.getName())) + ":<sp>Unable<sp>to<sp>convert<sp>") + jsonValue) + "<sp>of<sp>type<sp>") + (jsonValue.getClass())) + "<sp>to<sp>C*<sp>type<sp>") + (field.getType().toString()))); } }
medianWithNansTest() { for (int i = 0; i < (org.sing_group.gc4s.utilities.MatrixUtilsTest.MEDIANS_NANS.length); i++) { double mean = org.sing_group.gc4s.utilities.MatrixUtils.mean(org.sing_group.gc4s.utilities.MatrixUtilsTest.MATRIX[i], false); org.junit.Assert.assertEquals(org.sing_group.gc4s.utilities.MatrixUtilsTest.MEDIANS_NANS[i], mean, 0.0); } } mean(double[], boolean) { double sum = 0; if (excludeNan) { data = org.sing_group.gc4s.utilities.MatrixUtils.removeNan(data); } for (int i = 0; i < (data.length); i++) { sum += data[i]; } return sum / (data.length); }
isNameSequenceReversed_Japan() { setCurrentLocale(Locale.JAPAN); boolean result = sessionBean.getNameSequenceReversed(); org.junit.Assert.assertTrue(result); } getNameSequenceReversed() { return new org.oscm.ui.beans.UiDelegate().isNameSequenceReversed(); }
postTest() { when(req.getParameter("name")).thenReturn(((com.palantir.stash.stashbot.admin.JenkinsConfigurationServletTest.JN) + "emailNotificationsEnabled" 4)); when(req.getParameter("url")).thenReturn(((com.palantir.stash.stashbot.admin.JenkinsConfigurationServletTest.JURL) + "emailNotificationsEnabled" 4)); when(req.getParameter("username")).thenReturn(((com.palantir.stash.stashbot.admin.JenkinsConfigurationServletTest.JU) + "emailNotificationsEnabled" 4)); when(req.getParameter("emailNotificationsEnabled" 5)).thenReturn(((com.palantir.stash.stashbot.admin.JenkinsConfigurationServletTest.JP) + "emailNotificationsEnabled" 4)); when(req.getParameter("emailNotificationsEnabled" 6)).thenReturn(((com.palantir.stash.stashbot.admin.JenkinsConfigurationServletTest.SU) + "emailNotificationsEnabled" 4)); when(req.getParameter("stashPassword")).thenReturn(((com.palantir.stash.stashbot.admin.JenkinsConfigurationServletTest.SP) + "emailNotificationsEnabled" 4)); when(req.getParameter("emailNotificationsEnabled")).thenReturn("true"); when(req.getParameter("maxVerifyChain")).thenReturn(com.palantir.stash.stashbot.admin.JenkinsConfigurationServletTest.MVC_S); jcs.doPost(req, res); verify(cpm).setJenkinsServerConfigurationFromRequest(req); verify(res).setContentType("emailNotificationsEnabled" 0); verify(rr).requireContext("emailNotificationsEnabled" 1); @com.palantir.stash.stashbot.admin.SuppressWarnings({ "unchecked", "emailNotificationsEnabled" 2 }) java.lang.Class < java.util.Map < java.lang.String, java.lang.Object > > cls = ((java.lang.Class) (java.util.Map.class)); org.mockito.ArgumentCaptor < java.util.Map < java.lang.String, java.lang.Object > > mapCaptor = org.mockito.ArgumentCaptor.forClass(cls); verify(soyTemplateRenderer).render(eq(writer), eq("com.palantir.stash.stashbot:stashbotConfigurationResources"), eq("emailNotificationsEnabled" 3), mapCaptor.capture()); verify(pum, atLeastOnce()).createStashbotUser(any(com.palantir.stash.stashbot.persistence.JenkinsServerConfiguration.class)); java.util.Map < java.lang.String, java.lang.Object > map = mapCaptor.getValue(); @com.palantir.stash.stashbot.admin.SuppressWarnings("unchecked") java.util.List < com.palantir.stash.stashbot.persistence.JenkinsServerConfiguration > jscs = ((java.util.List < com.palantir.stash.stashbot.persistence.JenkinsServerConfiguration >) (map.get("jenkinsConfigs"))); org.junit.Assert.assertEquals(jsc, jscs.get(0)); } createStashbotUser(com.palantir.stash.stashbot.persistence.JenkinsServerConfiguration) { com.atlassian.stash.user.StashUser user = us.getUserByName(jsc.getStashUsername()); if (user != null) { return; } uas.createUser(jsc.getStashUsername(), jsc.getStashPassword(), jsc.getStashUsername(), STASH_EMAIL); user = us.getUserByName(jsc.getStashUsername()); if (user == null) { throw new java.lang.RuntimeException(("Unable<sp>to<sp>create<sp>user<sp>" + (jsc.getUsername()))); } }
isFinite5() { org.diirt.util.stats.Range range1 = org.diirt.util.stats.Ranges.range(0.0, Double.NaN); org.junit.Assert.assertThat(range1.isFinite(), equalTo(false)); } isFinite() { return(((((min) != (max)) && (!(java.lang.Double.isNaN(min)))) && (!(java.lang.Double.isInfinite(min)))) && (!(java.lang.Double.isNaN(max)))) && (!(java.lang.Double.isInfinite(max))); }
testValueChanged() { java.util.Date date = DateFieldPopupSetValue.changedDate; java.lang.String value = new java.text.SimpleDateFormat("MM/dd/yy").format(date); df.setValue(value); counter.waitForVaadin(); org.junit.Assert.assertEquals("1", counter.getText()); } getText() { return getInputField().getAttribute("value"); }
testDiffBothDeny() { _policyBuilder.addStatement(new org.batfish.datamodel.routing_policy.statement.Statements.StaticStatement(org.batfish.datamodel.routing_policy.statement.Statements.ExitReject)).build(); _deltaPolicyBuilder.addStatement(new org.batfish.datamodel.routing_policy.statement.Statements.StaticStatement(org.batfish.datamodel.routing_policy.statement.Statements.ExitReject)).build(); org.batfish.datamodel.BgpRoute inputRoute = org.batfish.datamodel.BgpRoute.builder().setNetwork(Prefix.ZERO).setOriginatorIp(Ip.ZERO).setOriginType(OriginType.IGP).setProtocol(RoutingProtocol.BGP).build(); org.batfish.question.testroutepolicies.TestRoutePoliciesQuestion question = new org.batfish.question.testroutepolicies.TestRoutePoliciesQuestion(org.batfish.datamodel.routing_policy.Environment.Direction.IN, com.google.common.collect.ImmutableList.of(inputRoute), org.batfish.question.testroutepolicies.TestRoutePoliciesAnswererTest.HOSTNAME, org.batfish.question.testroutepolicies.TestRoutePoliciesAnswererTest.POLICY_NAME); org.batfish.question.testroutepolicies.TestRoutePoliciesAnswerer answerer = new org.batfish.question.testroutepolicies.TestRoutePoliciesAnswerer(question, _batfish); org.batfish.datamodel.table.TableAnswerElement diffAnswer = ((org.batfish.datamodel.table.TableAnswerElement) (answerer.answerDiff())); org.junit.Assert.assertEquals(diffAnswer.getRows().size(), 0); } getRows() { return _rows; }
testBrpPersoonslijstGetter() { final java.lang.String berichtOrigineel = org.apache.commons.io.IOUtils.toString(nl.moderniseringgba.isc.esb.message.brp.impl.NotificatieVerzoekBerichtTest.class.getResourceAsStream("erkenningVerzoekBericht.xml")); final nl.moderniseringgba.isc.esb.message.brp.impl.ErkenningVerzoekBericht erkenningVerzoekBericht = ((nl.moderniseringgba.isc.esb.message.brp.impl.ErkenningVerzoekBericht) (factory.getBericht(berichtOrigineel))); org.junit.Assert.assertNotNull(erkenningVerzoekBericht.getBrpPersoonslijst()); } getBrpPersoonslijst() { return asBrpPersoonslijst(leesUitBrpAntwoordType.getBrpPl()); }
nodeName_emptyText() { final org.xmldb.api.base.ResourceSet result = org.exist.xquery.XQueryFunctionsTest.existEmbeddedServer.executeQuery("<a>b</a>/fn:node-name(text())"); org.junit.Assert.assertEquals(0, result.getSize()); } getSize() { return model.size(); }
testCheckMinMaxInt_haserror() { org.restfulwhois.rdap.common.validation.ValidationResult validationResult = new org.restfulwhois.rdap.common.validation.ValidationResult(); org.restfulwhois.rdap.common.util.UpdateValidateUtil.checkMinMaxInt((- 1), UpdateValidateUtil.MIN_VAL_FOR_INT_COLUMN, UpdateValidateUtil.MAX_VAL_FOR_INT_COLUMN, "maxSigLife", validationResult); org.junit.Assert.assertTrue(validationResult.hasError()); } hasError() { return(errors.size()) > 0; }
testLayerNormOPNoBias() { final org.nd4j.linalg.api.ndarray.INDArray random = org.nd4j.linalg.factory.Nd4j.rand(new int[] { 10, 4 }); final org.nd4j.linalg.api.ndarray.INDArray standardized = random.ulike(); org.nd4j.linalg.factory.Nd4j.getExecutioner().exec(new org.nd4j.linalg.api.ops.impl.transforms.custom.Standardize(random, standardized, 1)); final org.nd4j.linalg.api.ndarray.INDArray gain = org.nd4j.linalg.factory.Nd4j.rand(new int[] { 1, 4 }); final org.nd4j.linalg.api.ndarray.INDArray res = standardized.mulRowVector(gain); final org.nd4j.linalg.api.ndarray.INDArray output = org.nd4j.linalg.factory.Nd4j.zerosLike(res); org.nd4j.linalg.factory.Nd4j.getExecutioner().exec(new org.nd4j.linalg.api.ops.impl.transforms.custom.LayerNorm(standardized, gain, output, 1)); org.junit.Assert.assertEquals(res, output); } getExecutioner() { return org.nd4j.linalg.factory.Nd4j.OP_EXECUTIONER_INSTANCE; }
testAverageBelowTransform() { com.salesforce.dva.argus.service.metric.transform.Transform averageBelowTransform = new com.salesforce.dva.argus.service.metric.transform.AverageBelowTransform(); java.util.Map < java.lang.Long, java.lang.Double > datapoints1 = new java.util.HashMap < java.lang.Long, java.lang.Double > (); datapoints1.put(1L, 1.0); datapoints1.put(2L, 2.0); datapoints1.put(3L, 3.0); datapoints1.put(4L, 4.0); com.salesforce.dva.argus.entity.Metric below = new com.salesforce.dva.argus.entity.Metric("below-scope", "below-metric"); below.setDatapoints(datapoints1); java.util.Map < java.lang.Long, java.lang.Double > datapoints2 = new java.util.HashMap < java.lang.Long, java.lang.Double > (); datapoints2.put(1L, 10.0); datapoints2.put(2L, 2.0); datapoints2.put(3L, 3.0); datapoints2.put(4L, 15.0); com.salesforce.dva.argus.entity.Metric above = new com.salesforce.dva.argus.entity.Metric("above-scope", "above-metric"); above.setDatapoints(datapoints2); java.util.List < com.salesforce.dva.argus.entity.Metric > metrics = new java.util.ArrayList < com.salesforce.dva.argus.entity.Metric > (); metrics.add(above); metrics.add(below); java.util.List < java.lang.String > constants = new java.util.ArrayList < java.lang.String > (1); constants.add("5"); java.util.List < com.salesforce.dva.argus.entity.Metric > result = averageBelowTransform.transform(null, metrics, constants); org.junit.Assert.assertEquals(result.size(), 1); } transform(com.salesforce.dva.argus.util.QueryContext, java.util.List, java.util.List) { com.salesforce.dva.argus.system.SystemAssert.requireArgument((metrics != null), "Cannot<sp>transform<sp>null<sp>metrics"); com.salesforce.dva.argus.system.SystemAssert.requireArgument(((constants != null) && ((constants.size()) >= 2)), "Constants<sp>list<sp>cannot<sp>be<sp>null<sp>and<sp>its<sp>size<sp>must<sp>be<sp>2<sp>or<sp>more."); com.salesforce.dva.argus.service.metric.transform.TransformFactory.Function functionName = null; int functionElementId = - 1; for (int i = (constants.size()) - 1; i >= 0; i--) { java.lang.String constant = constants.get(i); try { functionName = TransformFactory.Function.valueOf(constant); functionElementId = i; break; } catch (java.lang.IllegalArgumentException ex) { } } if (functionName == null) { throw new java.lang.UnsupportedOperationException("GroupByTag<sp>needs<sp>a<sp>function<sp>name<sp>to<sp>be<sp>provided"); } java.util.List < java.lang.String > tags = constants.subList(0, functionElementId); if (tags.isEmpty()) { throw new java.lang.UnsupportedOperationException("GroupByTag<sp>needs<sp>at<sp>least<sp>one<sp>tag<sp>to<sp>be<sp>provided"); } java.util.List < java.lang.String > transformConstants = (functionElementId == ((constants.size()) - 1)) ? new java.util.ArrayList() : constants.subList((functionElementId + 1), constants.size()); java.util.Map < java.lang.String, java.util.List < com.salesforce.dva.argus.entity.Metric > > groups = new java.util.HashMap(); for (com.salesforce.dva.argus.entity.Metric metric : metrics) { java.lang.String key = tags.stream().map(metric :: getTag).filter(Objects :: nonNull).collect(java.util.stream.Collectors.joining(",")); groups.putIfAbsent(key, new java.util.ArrayList()); groups.get(key).add(metric); } com.salesforce.dva.argus.service.metric.transform.Transform transform = _factory.getTransform(functionName.getName()); java.util.List < com.salesforce.dva.argus.entity.Metric > result = new java.util.ArrayList(); for (java.util.Map.Entry < java.lang.String, java.util.List < com.salesforce.dva.argus.entity.Metric > > entry : groups.entrySet()) { java.util.List < com.salesforce.dva.argus.entity.Metric > metricsInThisGroup = entry.getValue(); java.util.List < com.salesforce.dva.argus.entity.Metric > reducedMetrics = (transformConstants.isEmpty()) ? transform.transform(null, metricsInThisGroup) : transform .
findCustomerNames() { org.eclipse.collections.api.list.MutableList < java.lang.String > names = null; org.eclipse.collections.api.list.MutableList < java.lang.String > expectedNames = Lists.mutable.with("Fred", "Mary", "Bill"); org.junit.Assert.assertEquals(expectedNames, names); }
testInitiate_IAtomContainerSet_ArrayList_ArrayList() { org.openscience.cdk.reaction.IReactionMechanism mechanism = new org.openscience.cdk.reaction.mechanism.RemovingSEofNBMechanism(); org.junit.Assert.assertNotNull(mechanism); }
testLambdaIssuesEmittedOnce() { org.eclipse.xtext.xbase.XExpression expr = parser.parse("{<sp>val<sp>list<sp>=<sp>#[]<sp>list.filter[it<sp>==<sp>null]<sp>}"); java.util.List < org.eclipse.xtext.validation.Issue > issues = helper.validate(expr); org.junit.Assert.assertEquals(1, issues.size()); } size() { return 1; }
testPutGet() { java.lang.String key = "org.apache.gora:http:/"; org.apache.gora.store.DataStore < java.lang.String, org.apache.gora.examples.generated.WebPage > store = new org.apache.gora.memory.store.MemStore(); org.junit.Assume.assumeTrue(((store.get(key, new java.lang.String[0])) == null)); store.put(key, org.apache.gora.examples.generated.WebPage.newBuilder().build()); org.junit.Assert.assertNotNull(store.get(key, new java.lang.String[0])); store.close(); } get(K, java.lang.String[]) { try { org.apache.accumulo.core.client.Scanner scanner = new org.apache.accumulo.core.client.IsolatedScanner(conn.createScanner(mapping.tableName, Authorizations.EMPTY)); org.apache.accumulo.core.data.Range rowRange = new org.apache.accumulo.core.data.Range(new org.apache.hadoop.io.Text(toBytes(key))); scanner.setRange(rowRange); setFetchColumns(scanner, fields); T persistent = org.apache.gora.accumulo.store.AccumuloStore.newPersistent(); org.apache.accumulo.core.data.ByteSequence row = populate(scanner.iterator(), persistent); if (row == null) return null; return persistent; } catch (java.lang.Exception e) { throw new org.apache.gora.util.GoraException(e); } }
whenCheckingIsSubtypeOf_shouldReturnTrueIfClassIsExtendedFrom() { com.google.common.reflect.TypeToken < java.util.ArrayList < java.lang.String > > stringList = new com.google.common.reflect.TypeToken < java.util.ArrayList < java.lang.String > > () { }; com.google.common.reflect.TypeToken < java.util.List > list = new com.google.common.reflect.TypeToken < java.util.List > () { }; boolean isSubtypeOf = stringList.isSubtypeOf(list); org.junit.Assert.assertTrue(isSubtypeOf); }
set_arrayProperty_ok() { xmpMeta.set(TikaCoreProperties.SUBJECT, new java.lang.String[] { "keyword1", "keyword2" }); java.lang.String[] values = xmpMeta.getValues(TikaCoreProperties.SUBJECT); org.junit.Assert.assertEquals(2, values.length); checkArrayValues(values, "keyword"); } getValues(java.lang.String) { checkKey(name); java.lang.String[] value = null; java.lang.String[] keyParts = splitKey(name); java.lang.String ns = org.apache.tika.xmp.XMPMetadata.registry.getNamespaceURI(keyParts[0]); if (ns != null) { try { com.adobe.xmp.properties.XMPProperty prop = xmpData.getProperty(ns, keyParts[1]); if ((prop != null) && (prop.getOptions().isSimple())) { value = new java.lang.String[1]; value[0] = prop.getValue(); } else if ((prop != null) && (prop.getOptions().isArray())) { int size = xmpData.countArrayItems(ns, keyParts[1]); value = new java.lang.String[size]; boolean onlySimpleChildren = true; for (int i = 0; (i < size) && onlySimpleChildren; i++) { prop = xmpData.getArrayItem(ns, keyParts[1],(i + 1)); if (prop.getOptions().isSimple()) { value[i] = prop.getValue(); } else { onlySimpleChildren = false; } } if (! onlySimpleChildren) { value = null; } } } catch (com.adobe.xmp.XMPException e) { } } return value; }
getGenericTypes() { java.util.List < nl.jqno.equalsverifier.internal.prefabvalues.TypeTag > expected = java.util.Arrays.asList(new nl.jqno.equalsverifier.internal.prefabvalues.TypeTag(nl.jqno.equalsverifier.internal.prefabvalues.Integer.class), new nl.jqno.equalsverifier.internal.prefabvalues.TypeTag(java.util.List.class, new nl.jqno.equalsverifier.internal.prefabvalues.TypeTag(java.lang.String.class))); org.junit.Assert.assertEquals(expected, nl.jqno.equalsverifier.internal.prefabvalues.TypeTagTest.SOME_LONG_TYPETAG.getGenericTypes()); } getGenericTypes() { java.util.List < nl.jqno.equalsverifier.internal.prefabvalues.TypeTag > expected = java.util.Arrays.asList(new nl.jqno.equalsverifier.internal.prefabvalues.TypeTag(nl.jqno.equalsverifier.internal.prefabvalues.Integer.class), new nl.jqno.equalsverifier.internal.prefabvalues.TypeTag(java.util.List.class, new nl.jqno.equalsverifier.internal.prefabvalues.TypeTag(java.lang.String.class))); org.junit.Assert.assertEquals(expected, nl.jqno.equalsverifier.internal.prefabvalues.TypeTagTest.SOME_LONG_TYPETAG.getGenericTypes()); }
testVraagOpKandidaatVaderMetOverledenVaderNL() { final nl.bzk.brp.model.hisvolledig.momentview.kern.PersoonView moeder = bouwMoeder(20101231, 20110301, NationaliteitcodeAttribuut.NL_NATIONALITEIT_CODE_STRING, null, null, null); final java.util.List < nl.bzk.brp.model.hisvolledig.momentview.kern.PersoonView > kandidaten = brby0002.bepaalKandidatenVader(moeder, new nl.bzk.brp.model.algemeen.attribuuttype.kern.DatumEvtDeelsOnbekendAttribuut(20120101)); org.junit.Assert.assertEquals(1, kandidaten.size()); } size() { return elementen.size(); }
test_clickUpdatesCaretPosition() { text.setText("1\n2\n3\n"); org.eclipse.swt.widgets.Event event = new org.eclipse.swt.widgets.Event(); event.button = 1; event.count = 1; event.x = 0; event.y = text.getLinePixel(1); text.notifyListeners(SWT.MouseDown, event); org.junit.Assert.assertEquals(2, text.getCaretOffset()); } getCaretOffset() { org.eclipse.swt.accessibility.AccessibleTextEvent event = new org.eclipse.swt.accessibility.AccessibleTextEvent(this); event.offset = - 1; for (int i = 0; i < (accessibleTextExtendedListenersSize()); i++) { org.eclipse.swt.accessibility.AccessibleTextListener listener = accessibleTextExtendedListeners.get(i); listener.getCaretOffset(event); } if ((event.offset) == (- 1)) { for (int i = 0; i < (accessibleTextListenersSize()); i++) { event.childID = ACC.CHILDID_SELF; org.eclipse.swt.accessibility.AccessibleTextListener listener = accessibleTextListeners.get(i); listener.getCaretOffset(event); } } return event.offset; }
scanEar() { net.jonasbandi.EarScanner.EarPathHelper stubEarPathHelper = new net.jonasbandi.EarScanner.EarPathHelper() { java.lang.String getApplicationXmResourcelUrl() { return STUB_JBOSS_VFSURL; } }; net.jonasbandi.EarScanner earScanner = new net.jonasbandi.EarScanner(stubEarPathHelper); java.util.List < java.lang.String > classList = earScanner.getClassesAnnotatedWith(javax.ejb.Stateless.class); org.junit.Assert.assertThat(classList.size(), org.hamcrest.CoreMatchers.is(1)); } getClassesAnnotatedWith(java.lang.Class) { java.lang.String applicationXmlResourceUrl = _earPathHelper.getApplicationXmResourcelUrl(); java.lang.String earPath = _earPathHelper.getEarPathFromResourceUrl(applicationXmlResourceUrl); boolean isExploded = _earPathHelper.isExplodedEar(earPath); java.util.ArrayList < javassist.bytecode.ClassFile > classFilesContainingAnnotation = null; if (! isExploded) { classFilesContainingAnnotation = scanJarFileForAnnotation(earPath, annotationClass); } else { classFilesContainingAnnotation = scanDirectoryForAnnotation(earPath, annotationClass); } java.util.ArrayList < java.lang.String > classNames = new java.util.ArrayList < java.lang.String > (); for (javassist.bytecode.ClassFile classFile : classFilesContainingAnnotation) { classNames.add(classFile.getName()); } return classNames; }
testGetIconClasses() { java.lang.String icon = "fa-some-icon"; java.lang.String expResult = "wc-icon<sp>fa-some-icon"; java.lang.String result = com.github.bordertech.wcomponents.util.HtmlIconUtil.getIconClasses(icon); org.junit.Assert.assertEquals(expResult, result); } getIconClasses(java.lang.String) { return com.github.bordertech.wcomponents.util.HtmlIconUtil.getIconClasses(icon, null); }
testIpGroupRoundTrip() { edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.IpGroup original = new edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.IpGroup(); original.setDescription("Ip<sp>group<sp>description"); original.setDisplayName("Test-ip-group"); original.setId(42L); original.setPersistedGroupAlias("test-ip-group"); original.setGroupProvider(new edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.IpGroupProvider(null)); original.add(edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddressRange.make(edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddress.valueOf("1.2.1.1"), edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddress.valueOf("1.2.1.10"))); original.add(edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddressRange.make(edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddress.valueOf("1.1.1.1"), edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddress.valueOf("1.1.1.1"))); original.add(edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddressRange.make(edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddress.valueOf("1:2:3::4:5"), edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddress.valueOf("1:2:3::4:5"))); original.add(edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddressRange.make(edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddress.valueOf("1:2:3::3:ff"), edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddress.valueOf("1:2:3::3:5"))); javax.json.JsonObject serialized = edu.harvard.iq.dataverse.util.json.JsonPrinter.json(original).build(); System.out.println(serialized.toString()); edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.IpGroup parsed = new edu.harvard.iq.dataverse.util.json.JsonParser().parseIpGroup(serialized); org.junit.Assert.assertEquals(original, parsed); } parseIpGroup(javax.json.JsonObject) { edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.IpGroup retVal = new edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.IpGroup(); if (obj.containsKey("id")) { retVal.setId(java.lang.Long.valueOf(obj.getInt("id"))); } retVal.setDisplayName(obj.getString("name", null)); retVal.setDescription(obj.getString("description", null)); retVal.setPersistedGroupAlias(obj.getString("alias", null)); if (obj.containsKey("ranges")) { obj.getJsonArray("ranges").stream().filter((jv) -> (jv.getValueType()) == JsonValue.ValueType.ARRAY).map((jv) -> ((javax.json.JsonArray) (jv))).forEach((rr) -> { retVal.add(edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddressRange.make(edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddress.valueOf(rr.getString(0)), edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddress.valueOf(rr.getString(1)))); }); } if (obj.containsKey("addresses")) { obj.getJsonArray("addresses").stream().map((jsVal) -> edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddress.valueOf(((javax.json.JsonString) (jsVal)).getString())).map((addr) -> edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IpAddressRange.make(addr, addr)).forEach(retVal :: add); } return retVal; }
clockAdvancing() { long t0 = clock.millis(); while ((clock.millis()) == t0) { } org.junit.Assert.assertTrue(((clock.millis()) > t0)); } millis() { return java.lang.System.currentTimeMillis(); }
testNoUnrecognizedArg() { java.lang.String[] args = new java.lang.String[] { "-unrecognizedarg" }; createCommands(args, true); org.junit.Assert.assertNull(commands); } createCommands(java.lang.String[], boolean) { try { commands = new apps.provisioning.Commands(args); } catch (org.apache.commons.cli.ParseException e) { if (! shouldFail) { org.junit.Assert.fail(("Error<sp>when<sp>processing<sp>command<sp>line<sp>arguments:" + (e.getMessage()))); } } }
testPopulateVertexIndex() { org.junit.Assert.assertEquals(0, count(graph.vertices())); graph.addVertex(T.id, id(10), T.label, "a", "key1", 11); graph.addVertex(T.id, id(11), T.label, "a", "key1", 12); graph.addVertex(T.id, id(12), T.label, "a", "key2", 12); graph.addVertex(T.id, id(13), T.label, "a", "key1", 11); graph.addVertex(T.id, id(14), T.label, "b", "key1", 11); graph.createIndex(ElementType.VERTEX, "a", "key1", false, true, true); io.hgraphdb.mapreduce.index.HBaseGraphConfiguration hconf = graph.configuration(); org.apache.hadoop.conf.Configuration conf = hconf.toHBaseConfiguration(); io.hgraphdb.mapreduce.index.Connection conn = graph.connection(); io.hgraphdb.mapreduce.index.Table table = conn.getTable(io.hgraphdb.mapreduce.index.HBaseGraphUtils.getTableName(hconf, Constants.VERTEX_INDICES)); runPopulateIndex(conf, new java.lang.String[] { "key2" 0, "vertex", "-l", "a", "key2" 1, "key1", "-d", "true", "key2" 2, "true", "-op", "/tmp" }); verifyTableCount(table, 3); table.close(); } vertices() { final io.hgraphdb.readers.VertexReader parser = new io.hgraphdb.readers.VertexReader(graph); org.apache.hadoop.hbase.client.ResultScanner scanner = null; try { scanner = table.getScanner(new org.apache.hadoop.hbase.client.Scan()); return io.hgraphdb.models.HBaseGraphUtils.mapWithCloseAtEnd(scanner, parser :: parse); } catch (java.io.IOException e) { throw new io.hgraphdb.models.HBaseGraphException(e); } }
testIsNetworkAWithinNetworkBWithEmptyValues() { org.junit.Assert.assertEquals(false, com.cloud.utils.net.NetUtils.isNetworkAWithinNetworkB("", null)); } isNetworkAWithinNetworkB(java.lang.String, java.lang.String) { if (!(com.cloud.utils.net.NetUtils.areCidrsNotEmpty(cidrA, cidrB))) { return false; } java.lang.Long[] cidrALong = com.cloud.utils.net.NetUtils.cidrToLong(cidrA); java.lang.Long[] cidrBLong = com.cloud.utils.net.NetUtils.cidrToLong(cidrB); long shift = (com.cloud.utils.net.NetUtils.MAX_CIDR) - (cidrBLong[1]); return(((cidrALong[0]) > > shift) == ((cidrBLong[0]) > > shift)) && ((cidrALong[1]) >= (cidrBLong[1])); }
getUserSecurityName() { java.lang.String user = "vmmtestuser"; java.lang.String securityName = "vmmtestuser"; com.ibm.websphere.simplicity.log.Log.info(com.ibm.ws.security.wim.adapter.ldap.fat.URAPIs_SUNLDAPTest.c, "getUserSecurityName", "Checking<sp>with<sp>a<sp>valid<sp>user."); org.junit.Assert.assertEquals(securityName, com.ibm.ws.security.wim.adapter.ldap.fat.URAPIs_SUNLDAPTest.servlet.getUserSecurityName(user)); } getUserSecurityName(java.lang.String) { return userRegistry.getUserSecurityName(uniqueId); }
testAnalyzeSelectStatement_OK_OrderBy() { final java.lang.String sql = "select<sp>id,<sp>count(id),<sp>max(score)<sp>max_score<sp>from<sp>student<sp>" + "group<sp>by<sp>class<sp>having<sp>max_score<sp>>=<sp>95<sp>order<sp>by<sp>max_score<sp>desc"; final org.codefamily.crabs.jdbc.lang.Statement actual = org.codefamily.crabs.jdbc.compiler.GrammarAnalyzer.analyze(sql); final org.codefamily.crabs.jdbc.lang.Statement expected = new org.codefamily.crabs.jdbc.lang.extension.statement.SelectStatement(new org.codefamily.crabs.jdbc.compiler.SelectClause(null, null, new org.codefamily.crabs.jdbc.compiler.SelectClause.ResultColumnDeclare(((java.lang.String) (null)), new org.codefamily.crabs.jdbc.lang.expression.Reference(null, "id")), new org.codefamily.crabs.jdbc.compiler.SelectClause.ResultColumnDeclare(((java.lang.String) (null)), new org.codefamily.crabs.jdbc.compiler.CountFunction(new org.codefamily.crabs.jdbc.lang.expression.Reference(null, "id"))), new org.codefamily.crabs.jdbc.compiler.SelectClause.ResultColumnDeclare("max_score", new org.codefamily.crabs.jdbc.compiler.MaxinumFunction(new org.codefamily.crabs.jdbc.lang.expression.Reference(null, "score")))), new org.codefamily.crabs.jdbc.compiler.FromClause(new org.codefamily.crabs.jdbc.compiler.FromClause.SimpleTableDeclare(null, "student")), null, new org.codefamily.crabs.jdbc.compiler.GroupByClause(new org.codefamily.crabs.jdbc.lang.expression.Reference(null, "class")), new org.codefamily.crabs.jdbc.compiler.HavingClause(new org.codefamily.crabs.jdbc.compiler.GreaterThanOrEqualToExpression(new org.codefamily.crabs.jdbc.lang.expression.Reference(null, "max_score"), new org.codefamily.crabs.jdbc.lang.expression.Constant(95))), new org.codefamily.crabs.jdbc.compiler.OrderByClause(new org.codefamily.crabs.jdbc.compiler.OrderByClause.OrderSpecification(new org.codefamily.crabs.jdbc.lang.expression.Reference(null, "max_score"), false)), null); org.junit.Assert.assertEquals(expected, actual); } analyze(java.lang.String) { if (sql == null) { throw new java.lang.IllegalArgumentException("Argument[sql]<sp>is<sp>null."); } final org.codefamily.crabs.jdbc.compiler.GrammarAnalyzer.GrammarAnalyzeContext context = new org.codefamily.crabs.jdbc.compiler.GrammarAnalyzer.GrammarAnalyzeContext(sql); context.toNextToken(); final org.codefamily.crabs.jdbc.lang.Statement statement = org.codefamily.crabs.jdbc.compiler.GrammarAnalyzer.StatementGrammarAnalyzer.analyze(context); context.toNextToken(); if (((context.currentTokenType()) == (org.codefamily.crabs.jdbc.compiler.GrammarAnalyzer.TokenType.SYMBOL)) && ((context.currentTokenToSymbol()) == ';')) { context.toNextToken(); } if ((context.currentTokenType()) == (org.codefamily.crabs.jdbc.compiler.GrammarAnalyzer.TokenType.EOF)) { return statement; } throw org.codefamily.crabs.jdbc.compiler.GrammarAnalyzer.newSQLException(context, "Unexpected<sp>sql<sp>end.", context.currentTokenStartPosition()); }
testGetTailExample1() { java.lang.String p = "{0}{1}{2}{4,choice,-1#|0#|0<...<sp>{4,number,integer}<sp>more}\n"; com.sun.mail.util.logging.CollectorFormatter cf = new com.sun.mail.util.logging.CollectorFormatter(p); com.sun.mail.util.logging.LogRecord r = new com.sun.mail.util.logging.LogRecord(Level.WARNING, "warning<sp>message"); cf.format(r); r = new com.sun.mail.util.logging.LogRecord(Level.SEVERE, "Encoding<sp>failed."); java.lang.RuntimeException npe = new java.lang.NullPointerException(); java.lang.StackTraceElement frame = new java.lang.StackTraceElement("java.lang.String", "getBytes", "String.java", 913); npe.setStackTrace(new java.lang.StackTraceElement[] { frame }); r.setThrown(npe); cf.format(r); cf.format(new com.sun.mail.util.logging.LogRecord(Level.INFO, "info")); cf.format(new com.sun.mail.util.logging.LogRecord(Level.INFO, "info")); java.lang.String output = cf.getTail(((com.sun.mail.util.logging.Handler) (null))); org.junit.Assert.assertNotNull(output); } getTail(java.util.logging.Handler) { format.getTail(h); return footer.getTail(h); }
nonMatchingValueFails() { result = topicGraph.getAtomsByTitleQuery("Zaphod", filter); org.junit.Assert.assertEquals(0, result.size()); } getAtomsByTitleQuery(java.lang.String, net.fortytwo.smsn.brain.model.Filter) { return filterAndSort(wrapper.getVerticesByTitle(query), filter); }
testGetDataExceptions() { org.easymock.EasyMock.expect(uploadResource.getSize()).andStubReturn(((long) (Long.MAX_VALUE))); org.easymock.EasyMock.expect(uploadResource.getInputStream()).andStubAnswer(org.richfaces.request.UploadedFile25Test.INPUT_STREAM_SUPPLIER); environment.getControl().replay(); try { uploadedFile.getData(); org.junit.Assert.fail(); } catch (org.richfaces.exception.FileUploadException e) { } environment.getControl().reset(); org.easymock.EasyMock.expect(uploadResource.getSize()).andStubReturn(1L); org.easymock.EasyMock.expect(uploadResource.getInputStream()).andStubThrow(new java.io.IOException("No<sp>stream<sp>available")); environment.getControl().replay(); try { uploadedFile.getData(); org.junit.Assert.fail(); } catch (org.richfaces.exception.FileUploadException e) { org.junit.Assert.assertTrue(((e.getCause()) instanceof java.io.IOException)); } } getCause() { if ((failure) instanceof java.lang.Exception) { return((java.lang.Exception) (failure)); } return super.getCause(); }
testUniformShortestPathSearch() { com.tinkerpop.blueprints.Vertex origin = es.usc.citius.hipster.thirdparty.graphs.JUNGHipsterGraphAdapterTest.graph.query().has("label", "Cochepaille").vertices().iterator().next(); com.tinkerpop.blueprints.Vertex dest = es.usc.citius.hipster.thirdparty.graphs.JUNGHipsterGraphAdapterTest.graph.query().has("label", "Tholomyes").vertices().iterator().next(); es.usc.citius.hipster.graph.HipsterDirectedGraph < com.tinkerpop.blueprints.Vertex, com.tinkerpop.blueprints.Edge > adaptedGraph = new es.usc.citius.hipster.thirdparty.graphs.jung.JUNGHipsterDirectedGraphAdapter < com.tinkerpop.blueprints.Vertex, com.tinkerpop.blueprints.Edge > (new com.tinkerpop.blueprints.oupls.jung.GraphJung(es.usc.citius.hipster.thirdparty.graphs.JUNGHipsterGraphAdapterTest.graph)); es.usc.citius.hipster.model.problem.SearchProblem < com.tinkerpop.blueprints.Edge, com.tinkerpop.blueprints.Vertex, es.usc.citius.hipster.model.impl.WeightedNode < com.tinkerpop.blueprints.Edge, com.tinkerpop.blueprints.Vertex, java.lang.Double > > p = es.usc.citius.hipster.graph.GraphSearchProblem.startingFrom(origin).in(adaptedGraph).takeCostsFromEdges().build(); java.util.List < java.lang.String > expectedPath = java.util.Arrays.asList("Cochepaille", "Bamatabois", "Fantine", "Tholomyes"); java.util.List < com.tinkerpop.blueprints.Vertex > shortestPath = es.usc.citius.hipster.algorithm.Hipster.createAStar(p).search(dest).getOptimalPaths().get(0); for (int i = 0; i < (shortestPath.size()); i++) { org.junit.Assert.assertEquals(expectedPath.get(i), shortestPath.get(i).getProperty("label")); } } size() { return elements.size(); }
setUnit_va_unitIsSet() { java.lang.String unitOfMeasure = "VA"; sampledValue.setUnit(unitOfMeasure); org.junit.Assert.assertThat(sampledValue.getUnit(), org.hamcrest.CoreMatchers.equalTo(unitOfMeasure)); } getUnit() { return unit; }
applyNull() { when(fileStatus.getOwner()).thenReturn(null); org.junit.Assert.assertEquals(Result.FAIL, user.apply(item)); } apply(org.apache.hadoop.fs.shell.PathData) { java.lang.String user = getFileStatus(item).getOwner(); if ((user == null) || (user.equals(""))) { return Result.PASS; } return Result.FAIL; }
testRawData() { if ((reader) == null) return; System.out.println((("Raw<sp>samples<sp>for<sp>" + (name)) + ":")); final java.time.Instant end = java.time.Instant.now(); final java.time.Instant start = end.minus(org.csstudio.archive.reader.rdb.RDBArchiveReaderTest.TIMERANGE); final org.csstudio.apputil.time.BenchmarkTimer timer = new org.csstudio.apputil.time.BenchmarkTimer(); final org.csstudio.archive.reader.ValueIterator values = reader.getRawValues(0, name, start, end); if (org.csstudio.archive.reader.rdb.RDBArchiveReaderTest.dump) { int count = 0; org.diirt.vtype.Display display = null; while (values.hasNext()) { org.diirt.vtype.VType value = values.next(); System.out.println(value); if (display == null) display = org.diirt.vtype.ValueUtil.displayOf(value);++count; if (count > 10) { System.out.println("Skipping<sp>rest..."); break; } } values.close(); System.out.println(("Meta<sp>data:<sp>" + display)); } else { int count = 0; while (values.hasNext()) { final org.diirt.vtype.VType value = values.next(); org.junit.Assert.assertNotNull(value);++count; } timer.stop(); System.out.println(((count + "<sp>samples<sp>in<sp>") + timer)); System.out.println(((count / (timer.getSeconds())) + "<sp>samples/sec")); } } next() { lock.lock(); try { if ((nextIndex) < 0) throw new java.util.NoSuchElementException(); lastRet = nextIndex; java.lang.Runnable x = nextItem; nextIndex = inc(nextIndex); checkNext(); return x; } finally { lock.unlock(); } }
casts() { com.querydsl.sql.NumberExpression<?> num = employee.id; com.querydsl.sql.List < com.querydsl.sql.Expression<?> > exprs = com.google.common.collect.Lists.newArrayList(); add(exprs, num.byteValue(), com.querydsl.sql.MYSQL); add(exprs, num.doubleValue()); add(exprs, num.floatValue()); add(exprs, num.intValue()); add(exprs, num.longValue(), com.querydsl.sql.MYSQL); add(exprs, num.shortValue(), com.querydsl.sql.MYSQL); add(exprs, num.stringValue(), com.querydsl.sql.DERBY); for (com.querydsl.sql.Expression<?> expr : exprs) { for (java.lang.Object o : query().from(employee).select(expr).fetch()) { org.junit.Assert.assertEquals(expr.getType(), o.getClass()); } } } getType() { return type; }
processArtifactBindingValidRequest() { setRealm(false); org.mockito.Mockito.when(edOrg.getEntityId()).thenReturn(targetEdorg); org.mockito.Mockito.when(realm.getEntityId()).thenReturn("My<sp>Realm"); org.mockito.Mockito.when(repo.findOne(eq("realm"), any(org.slc.sli.domain.NeutralQuery.class))).thenReturn(realm); org.mockito.Mockito.when(repo.findById(eq("realm"), anyString())).thenReturn(realm); org.mockito.Mockito.when(repo.findOne(eq(EntityNames.EDUCATION_ORGANIZATION), any(org.slc.sli.domain.NeutralQuery.class))).thenReturn(edOrg); javax.servlet.http.HttpServletRequest request = org.mockito.Mockito.mock(javax.servlet.http.HttpServletRequest.class); javax.ws.rs.core.UriInfo uriInfo = org.mockito.Mockito.mock(javax.ws.rs.core.UriInfo.class); java.net.URI uri = new java.net.URI(issuerString); org.mockito.Mockito.when(uriInfo.getRequestUri()).thenReturn(uri); org.mockito.Mockito.when(uriInfo.getAbsolutePath()).thenReturn(uri); org.mockito.Mockito.when(request.getParameter("SAMLart")).thenReturn("AAQAAjh3bwgbBZ+LiIx3/RVwDGy0aRUu+xxuNtTZVbFofgZZVCKJQwQNQ7Q="); org.mockito.Mockito.when(request.getParameter("RelayState")).thenReturn("My<sp>Realm"); org.opensaml.saml2.core.Assertion assertion = createAssertion("01/01/2011", "01/10/2011", issuerString); org.mockito.Mockito.when(samlHelper.getAssertion(org.mockito.Mockito.any(javax.ws.rs.core.Response.class), org.mockito.Mockito.any(KeyStore.PrivateKeyEntry.class))).thenReturn(assertion); javax.ws.rs.core.Response response = org.mockito.Mockito.mock(javax.ws.rs.core.Response.class); org.slc.sli.api.resources.security.SamlFederationResource spyResource = org.mockito.Mockito.spy(resource); org.mockito.Mockito.doReturn(response).when(spyResource).authenticateUser(org.mockito.Mockito.any(org.springframework.util.LinkedMultiValueMap.class), org.mockito.Mockito.any(org.slc.sli.domain.Entity.class), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.any(org.slc.sli.domain.Entity.class), org.mockito.Mockito.any(java.net.URI.class)); javax.ws.rs.core.Response resResponse = spyResource.processArtifactBinding(request, uriInfo); org.junit.Assert.assertEquals(response, resResponse); } processArtifactBinding(javax.servlet.http.HttpServletRequest, javax.ws.rs.core.UriInfo) { java.lang.String artifact = request.getParameter("SAMLart"); java.lang.String realmId = request.getParameter("RelayState"); if (artifact == null) { throw new org.slc.sli.api.security.context.APIAccessDeniedException("No<sp>artifact<sp>provided<sp>by<sp>the<sp>IdP"); } java.lang.String artifactUrl = samlHelper.getArtifactUrl(realmId, artifact); org.opensaml.saml2.core.ArtifactResolve artifactResolve = artifactBindingHelper.generateArtifactResolveRequest(artifact, dsPKEntry, artifactUrl); org.opensaml.ws.soap.soap11.Envelope soapEnvelope = artifactBindingHelper.generateSOAPEnvelope(artifactResolve); org.opensaml.xml.XMLObject response = soapHelper.sendSOAPCommunication(soapEnvelope, artifactUrl, clientCertPKEntry); org.opensaml.saml2.core.ArtifactResponse artifactResponse = ((org.opensaml.saml2.core.ArtifactResponse) (((org.opensaml.ws.soap.soap11.impl.EnvelopeImpl) (response)).getBody().getUnknownXMLObjects().get(0))); org.opensaml.saml2.core.Response samlResponse = ((org.opensaml.saml2.core.Response) (artifactResponse.getMessage())); return processSAMLResponse(samlResponse, uriInfo); }
simpleTest2() { final java.lang.String agentId = "agentId"; final long startTimestamp = Long.MAX_VALUE; final long eventTimestamp = startTimestamp; final com.navercorp.pinpoint.thrift.dto.TAgentStat agentStat = createAgentStat(agentId, startTimestamp, eventTimestamp, 0); com.navercorp.pinpoint.common.server.bo.event.DeadlockBo deadlockBo = new com.navercorp.pinpoint.common.server.bo.event.DeadlockBo(); com.navercorp.pinpoint.common.server.bo.event.DeadlockEventBo expectedEventBo = new com.navercorp.pinpoint.common.server.bo.event.DeadlockEventBo(agentId, startTimestamp, eventTimestamp, com.navercorp.pinpoint.common.server.util.AgentEventType.AGENT_DEADLOCK_DETECTED, deadlockBo); when(this.deadlockEventBoMapper.map(any(java.lang.String.class), any(com.navercorp.pinpoint.collector.mapper.thrift.event.Long.class), any(com.navercorp.pinpoint.collector.mapper.thrift.event.Long.class), any(com.navercorp.pinpoint.thrift.dto.TDeadlock.class))).thenReturn(expectedEventBo); com.navercorp.pinpoint.common.server.bo.event.AgentEventBo actualEventBo = agentEventMapper.map(agentStat); org.junit.Assert.assertNull(actualEventBo); } map(com.navercorp.pinpoint.thrift.dto.TAgentStat) { if (tAgentStat == null) { return null; } final java.lang.String agentId = tAgentStat.getAgentId(); final long startTimestamp = tAgentStat.getStartTimestamp(); final long timestamp = tAgentStat.getTimestamp(); if (tAgentStat.isSetDeadlock()) { com.navercorp.pinpoint.thrift.dto.TDeadlock deadlock = tAgentStat.getDeadlock(); if ((deadlock != null) && (deadlock.isSetDeadlockedThreadList())) { return deadlockEventBoMapper.map(agentId, startTimestamp, timestamp, deadlock); } } return null; }
testPrefixFiltering_FiltersAllWhenThereisNoMatches() { java.util.List list = new java.util.ArrayList(); list = new java.util.ArrayList(); list.add(new org.drools.eclipse.editors.completion.RuleCompletionProposal(0, 0, "aardvark", "something")); list.add(new org.drools.eclipse.editors.completion.RuleCompletionProposal(0, 0, "smeg")); list.add(new org.drools.eclipse.editors.completion.RuleCompletionProposal(0, 0, "apple")); list.add(new org.drools.eclipse.editors.completion.RuleCompletionProposal(0, 0, "ape", "zzzzz")); org.drools.eclipse.editors.completion.DefaultCompletionProcessor.filterProposalsOnPrefix("xzyz", list); org.junit.Assert.assertEquals(0, list.size()); } size() { return fieldNames.size(); }
shouldInstrumentES6SpreadOperator() { java.lang.String source = "myFunction(...args);"; java.lang.String instrumentedSource = sourceProcessor.instrumentSource(source); java.lang.String expectedSource = "_$jscoverage[\'test.js\'].lineData[1]++;\n" + "myFunction(...args);\n"; org.junit.Assert.assertEquals(expectedSource, instrumentedSource); } instrumentSource(java.lang.String) { return instrumentSource(uri, source); }
setWidth() { com.vaadin.flow.component.HasSizeTest.HasSizeComponent c = new com.vaadin.flow.component.HasSizeTest.HasSizeComponent(); c.setWidth("100px"); org.junit.Assert.assertEquals("100px", c.getWidth()); } getWidth() { return width; }
shouldNotBeDoneIfNoTagIsDone() { org.junit.Assert.assertFalse(fixture.isDone()); } isDone() { if ((isDone) == (de.sebastianbenz.task.impl.ContentImplCustom.DoneStatus.UNKNOWN)) { isDone = resolveStatus(); } return(isDone) == (de.sebastianbenz.task.impl.ContentImplCustom.DoneStatus.COMPLETED); }
longNumberWithSpace() { final java.math.BigDecimal check = new java.math.BigDecimal("0.123456789012345678901234567890123456789012345678901234567890123456789"); final java.lang.String plainForm = (check.toPlainString()) + "<sp>"; final byte[] body = plainForm.getBytes("UTF-8"); com.dslplatform.json.DslJson < java.lang.Object > json = new com.dslplatform.json.DslJson < java.lang.Object > (); final java.math.BigDecimal result = com.dslplatform.json.Common.deserialize(json, java.math.BigDecimal.class, body, body.length); org.junit.Assert.assertEquals(check, result); } deserialize(com.dslplatform.json.DslJson, java.lang.Class, byte[], int) { T t1 = json.deserialize(target, bytes, size); T t2 = json.deserialize(target, new java.io.ByteArrayInputStream(bytes, 0, size), com.dslplatform.json.Common.buffer); org.junit.Assert.assertEquals(t1, t2); return t1; }
testCreateProcessDefinitionQuery() { org.foxbpm.engine.repository.ProcessDefinitionQuery processQuery = modelService.createProcessDefinitionQuery(); org.junit.Assert.assertNotNull("", processQuery); } createProcessDefinitionQuery() { return new org.foxbpm.engine.impl.model.ProcessDefinitionQueryImpl(commandExecutor); }
testintersect4() { org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArray[] lists = new org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArray[4]; lists[0] = new org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArray(); lists[0].add(new java.lang.Integer(13)); lists[1] = new org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArray(); lists[1].add(new java.lang.Integer(11)); lists[1].add(new java.lang.Integer(2)); lists[1].add(new java.lang.Integer(3)); lists[1].add(new java.lang.Integer(16)); lists[1].add(new java.lang.Integer(14)); lists[1].add(new java.lang.Integer(15)); lists[1].add(new java.lang.Integer(13)); lists[2] = new org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArray(); lists[2].add(new java.lang.Integer(1)); lists[2].add(new java.lang.Integer(2)); lists[2].add(new java.lang.Integer(3)); lists[2].add(new java.lang.Integer(13)); lists[2].add(new java.lang.Integer(12)); lists[2].add(new java.lang.Integer(15)); lists[2].add(new java.lang.Integer(11)); lists[3] = new org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArray(); lists[3].add(new java.lang.Integer(1)); lists[3].add(new java.lang.Integer(2)); lists[3].add(new java.lang.Integer(3)); lists[3].add(new java.lang.Integer(19)); lists[3].add(new java.lang.Integer(14)); lists[3].add(new java.lang.Integer(17)); lists[3].add(new java.lang.Integer(10)); org.eclipse.birt.data.engine.olap.data.util.IDiskArray result = org.eclipse.birt.data.engine.olap.data.util.SetUtil.getIntersection(lists); org.junit.Assert.assertEquals(result.size(), 0); result.close(); for (org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArray s : lists) { s.close(); } } size() { org.eclipse.birt.report.engine.executor.css.Token n; switch((jj_ntk) == (- 1) ? jj_ntk() : jj_ntk) { case ABSOLUTE_SIZE : n = jj_consume_token(org.eclipse.birt.report.engine.executor.css.ABSOLUTE_SIZE); { if (true) return n; } break; case RELATIVE_SIZE : n = jj_consume_token(org.eclipse.birt.report.engine.executor.css.RELATIVE_SIZE); { if (true) return n; } break; case PERCENTAGE : n = jj_consume_token(org.eclipse.birt.report.engine.executor.css.PERCENTAGE); { if (true) return n; } break; case LENGTH : n = jj_consume_token(org.eclipse.birt.report.engine.executor.css.LENGTH); { if (true) return n; } break; case BORDER_WIDTH : n = jj_consume_token(org.eclipse.birt.report.engine.executor.css.BORDER_WIDTH); { if (true) return n; } break; default : jj_la1[4] = jj_gen; jj_consume_token((- 1)); throw new org.eclipse.birt.report.engine.executor.css.ParseException(); } throw new java.lang.Error("Missing<sp>return<sp>statement<sp>in<sp>function"); }
testOfferPollProgress() { com.conversantmedia.util.concurrent.DisruptorOfferPollStressTest.ProgressCheck[] check = new com.conversantmedia.util.concurrent.DisruptorOfferPollStressTest.ProgressCheck[2]; executor.execute(new com.conversantmedia.util.concurrent.DisruptorOfferPollStressTest.PutEvens()); java.lang.Thread.sleep(1000L); executor.execute((check[0] = new com.conversantmedia.util.concurrent.DisruptorOfferPollStressTest.PollEven())); java.lang.Thread.sleep(1000L); executor.execute(new com.conversantmedia.util.concurrent.DisruptorOfferPollStressTest.PutOdds()); java.lang.Thread.sleep(1000L); executor.execute((check[1] = new com.conversantmedia.util.concurrent.DisruptorOfferPollStressTest.TakeOdd())); final long endTime = (java.lang.System.currentTimeMillis()) + (com.conversantmedia.util.concurrent.DisruptorOfferPollStressTest.MIN_RUN_TIME); boolean allProgressed = true; do { for (int i = 0; i < 2; i++) { if (!(check[i].madeProgress())) { allProgressed = false; java.lang.Thread.yield(); } } } while ((! allProgressed) && (endTime > (java.lang.System.currentTimeMillis()))); allProgressed = true; for (int i = 0; i < 2; i++) { if (check[i].madeProgress()) { System.out.println((i + "<sp>made<sp>progress")); } else { allProgressed = false; System.out.println((i + "<sp>did<sp>not<sp>progress")); } } System.out.println(); org.junit.Assert.assertTrue(allProgressed); }
testTraceAndMeasureJoinPointInMemoryMetric() { setJmxStatisticsEnabled(true); javax.management.MBeanServer mbs = java.lang.management.ManagementFactory.getPlatformMBeanServer(); classWithAspect.methodWithTrace(); java.lang.String id = "public<sp>java.lang.String<sp>com.ibm.logger.FakeClassWithAspect.methodWithTrace()"; javax.management.ObjectName channelMXBeanName = com.ibm.logger.PerformanceLogger.channelMXBeanName(id, PerformanceLogger.TOTAL_INTERVAL_NAME, com.ibm.logger.stats.TotalLogEntry.class); com.ibm.logger.jmx.TimeIntervalLogEntryMXBean logEntry = javax.management.JMX.newMBeanProxy(mbs, channelMXBeanName, com.ibm.logger.jmx.TimeIntervalLogEntryMXBean.class); long numCalls = logEntry.getCallCount(); classWithAspect.methodWithTrace(); long newNumCalls = logEntry.getCallCount(); org.junit.Assert.assertEquals((numCalls + 1), newNumCalls); } getCallCount() { return((java.lang.Number) (fieldValues.get(1))).longValue(); }
trimAll_A$String_methodAnnotation() { org.junithelper.core.filter.impl.TrimAnnotationFilter target = new org.junithelper.core.filter.impl.TrimAnnotationFilter(); java.lang.String src = "private<sp>TestMethodGenerator<sp>testMethodGenerator<sp>=<sp>new<sp>DefaultTestMethodGenerator();\r\n\t@Override\r\n\tpublic<sp>void<sp>initialize(Configuration<sp>config,<sp>String<sp>targetSourceCodeString)<sp>{"; java.lang.String actual = target.trimAll(src); java.lang.String expected = "private<sp>TestMethodGenerator<sp>testMethodGenerator<sp>=<sp>new<sp>DefaultTestMethodGenerator();\r\n\t<sp>\r\n\tpublic<sp>void<sp>initialize(Configuration<sp>config,<sp>String<sp>targetSourceCodeString)<sp>{"; org.junit.Assert.assertEquals(expected, actual); } trimAll(java.lang.String) { if (src == null) { return null; } return src.replaceFirst("@interface", "interface").replaceAll("@[^\\s\r\n\\(]+ (\\([^\\)]*\\))*", "<sp>").replaceAll("@[^\\s\r\n]+", ""); }
testKeyedStateMetaInfoSerialization() { java.lang.String name = "test"; org.apache.flink.api.common.typeutils.TypeSerializer<?> namespaceSerializer = org.apache.flink.api.common.typeutils.base.LongSerializer.INSTANCE; org.apache.flink.api.common.typeutils.TypeSerializer<?> stateSerializer = org.apache.flink.api.common.typeutils.base.DoubleSerializer.INSTANCE; org.apache.flink.runtime.state.metainfo.StateMetaInfoSnapshot metaInfo = new org.apache.flink.runtime.state.RegisteredKeyValueStateBackendMetaInfo(StateDescriptor.Type.VALUE, name, namespaceSerializer, stateSerializer).snapshot(); byte[] serialized; try (org.apache.flink.core.memory.ByteArrayOutputStreamWithPos out = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos()) { org.apache.flink.runtime.state.metainfo.StateMetaInfoSnapshotReadersWriters.getWriter().writeStateMetaInfoSnapshot(metaInfo, new org.apache.flink.core.memory.DataOutputViewStreamWrapper(out)); serialized = out.toByteArray(); } try (org.apache.flink.core.memory.ByteArrayInputStreamWithPos in = new org.apache.flink.core.memory.ByteArrayInputStreamWithPos(serialized)) { final org.apache.flink.runtime.state.metainfo.StateMetaInfoReader reader = org.apache.flink.runtime.state.metainfo.StateMetaInfoSnapshotReadersWriters.getReader(org.apache.flink.runtime.state.CURRENT_STATE_META_INFO_SNAPSHOT_VERSION, StateMetaInfoSnapshotReadersWriters.StateTypeHint.KEYED_STATE); metaInfo = reader.readStateMetaInfoSnapshot(new org.apache.flink.core.memory.DataInputViewStreamWrapper(in), java.lang.Thread.currentThread().getContextClassLoader()); } org.junit.Assert.assertEquals(name, metaInfo.getName()); } getName() { return name; }
testEntityPostRequestScore() { java.lang.String uri = "http://some.com/xyz.svc/Customers(111)"; odataUri = uriParser.parseUri(uri, entityDataModel); int score = unmarshaller.score(createODataRequestContext(createODataRequest(com.sdl.odata.unmarshaller.json.POST, com.sdl.odata.unmarshaller.json.JsonActionUnmarshallerTest.CONTENT_TYPE), odataUri, entityDataModel)); org.junit.Assert.assertThat(score, org.hamcrest.CoreMatchers.is(0)); } createODataRequest(com.sdl.odata.api.service.ODataRequest$Method, java.util.Map) { if (headers == null) { headers = new java.util.HashMap(); } return new com.sdl.odata.api.service.ODataRequest.Builder().setBodyText("test", "UTF-8").setUri(com.sdl.odata.test.util.TestUtils.SERVICE_ROOT).setHeaders(headers).setMethod(method).build(); }
shouldReturnFirstSelectedOptions() { final org.openqa.selenium.WebElement element = mock(org.openqa.selenium.WebElement.class); final org.openqa.selenium.WebElement firstOption = mock(org.openqa.selenium.WebElement.class, "first"); final org.openqa.selenium.WebElement secondOption = mock(org.openqa.selenium.WebElement.class, "second"); final java.util.List < org.openqa.selenium.WebElement > options = java.util.Arrays.asList(firstOption, secondOption); when(element.getTagName()).thenReturn("select"); when(element.getAttribute("multiple")).thenReturn("multiple"); when(element.findElements(org.openqa.selenium.By.tagName("option"))).thenReturn(options); when(firstOption.isSelected()).thenReturn(true); when(secondOption.isSelected()).thenReturn(true); org.openqa.selenium.support.ui.Select select = new org.openqa.selenium.support.ui.Select(element); org.openqa.selenium.WebElement firstSelected = select.getFirstSelectedOption(); org.junit.Assert.assertSame(firstOption, firstSelected); } getFirstSelectedOption() { for (org.openqa.selenium.WebElement option : getOptions()) { if (option.isSelected()) { return option; } } throw new org.openqa.selenium.NoSuchElementException("No<sp>options<sp>are<sp>selected"); }
unmappable_field() { com.asakusafw.runtime.io.text.driver.RecordDefinition < java.lang.String[] > def = com.asakusafw.runtime.io.text.driver.RecordDefinition.builder(java.lang.String[].class).withField(self(), field(0).build()).withField(self(), field(1).withOnUnmappableOutput(ErrorAction.IGNORE).build()).build(); java.lang.String[][] results = emit(def, new java.lang.String[][] { new java.lang.String[] { "A", "B" }, new java.lang.String[] { "C", ErrorCode.UNDEFINED_NULL_SEQUENCE.name() } }); org.junit.Assert.assertThat(results, is(new java.lang.String[][] { new java.lang.String[] { "A", "B" }, new java.lang.String[] { "C", ErrorCode.UNDEFINED_NULL_SEQUENCE.name() } })); } name() { start(new com.asakusafw.utils.java.jsr269.bridge.Callback() { @com.asakusafw.utils.java.jsr269.bridge.Override protected void test() { org.junit.Assert.assertThat(target.convert(elements.getName("something")), is(com.asakusafw.utils.java.model.util.Models.toName(f, "something"))); org.junit.Assert.assertThat(target.convert(elements.getName("com.example.jsr269")), is(com.asakusafw.utils.java.model.util.Models.toName(f, "com.example.jsr269"))); } }); }
shouldGetSingleColumnOfArticle() { java.sql.ResultSet rs = this.metaData.getColumns(null, null, "Article", "uuid"); org.junit.Assert.assertThat(rsSizeOf(rs), org.hamcrest.Matchers.is(1)); } rsSizeOf(java.sql.ResultSet) { int tableCount = 0; while (rs.next()) { tableCount++; } return tableCount; }
testCacheUploadEvents() { final long kSizeBytesMultiplier = 1234567890000L; com.facebook.buck.distributed.thrift.BuildSlaveStatus expectedStatus = createBuildSlaveStatusWithZeros(); expectedStatus.setHttpArtifactTotalBytesUploaded(((1 + 2) * kSizeBytesMultiplier)); expectedStatus.setHttpArtifactUploadsScheduledCount(6); expectedStatus.setHttpArtifactUploadsOngoingCount(2); expectedStatus.setHttpArtifactUploadsSuccessCount(3); expectedStatus.setHttpArtifactUploadsFailureCount(1); distBuildServiceMock.uploadBuildSlaveEvents(eq(stampedeId), eq(buildSlaveRunId), anyObject()); expectLastCall().anyTimes(); distBuildServiceMock.storeBuildSlaveFinishedStats(eq(stampedeId), eq(buildSlaveRunId), anyObject()); expectLastCall().anyTimes(); org.easymock.Capture < com.facebook.buck.distributed.thrift.BuildSlaveStatus > capturedStatus = org.easymock.Capture.newInstance(CaptureType.LAST); distBuildServiceMock.updateBuildSlaveStatus(eq(stampedeId), eq(buildSlaveRunId), capture(capturedStatus)); expectLastCall().atLeastOnce(); replay(distBuildServiceMock); setUpDistBuildSlaveEventBusListener(); java.util.List < com.facebook.buck.artifact_cache.HttpArtifactCacheEvent.Scheduled > scheduledEvents = new java.util.ArrayList(); java.util.List < com.facebook.buck.artifact_cache.HttpArtifactCacheEvent.Started > startedEvents = new java.util.ArrayList(); java.util.List < com.facebook.buck.artifact_cache.HttpArtifactCacheEvent.Finished > finishedEvents = new java.util.ArrayList(); for (int i = 0; i < 6;++i) { scheduledEvents.add(com.facebook.buck.artifact_cache.HttpArtifactCacheEvent.newStoreScheduledEvent(java.util.Optional.of(com.facebook.buck.core.model.BuildTargetFactory.newInstance("//target:fake")), com.google.common.collect.ImmutableSet.of(), StoreType.ARTIFACT)); startedEvents.add(com.facebook.buck.artifact_cache.HttpArtifactCacheEvent.newStoreStartedEvent(scheduledEvents.get(i))); com.facebook.buck.artifact_cache.HttpArtifactCacheEvent.Finished.Builder finishedEventBuilder = com.facebook.buck.artifact_cache.HttpArtifactCacheEvent.newFinishedEventBuilder(startedEvents.get(i)); com.facebook.buck.artifact_cache.HttpArtifactCacheEventStoreData.Builder storeData = finishedEventBuilder.getStoreBuilder(); storeData.setStoreType(StoreType.ARTIFACT); if (i < 3) { storeData.setWasStoreSuccessful(true).setArtifactSizeBytes((i * kSizeBytesMultiplier)); } else { storeData.setWasStoreSuccessful(false); } finishedEvents.add(finishedEventBuilder.build()); } eventBus.post(scheduledEvents.get(0)); eventBus.post(scheduledEvents.get(1)); eventBus.post(startedEvents.get(1)); eventBus.post(scheduledEvents.get(2)); eventBus.post(startedEvents.get(0)); eventBus.post(finishedEvents.get(1)); eventBus.post(startedEvents.get(2)); eventBus.post(scheduledEvents.get(3)); eventBus.post(scheduledEvents.get(4)); eventBus.post(scheduledEvents.get(5)); eventBus.post(startedEvents.get(3)); eventBus.post(startedEvents.get(4)); eventBus.post(startedEvents.get(5)); eventBus.post(finishedEvents.get(0)); eventBus.post(finishedEvents.get(2)); eventBus.post(finishedEvents.get(3)); listener.close(); verify(distBuildServiceMock); org.junit.Assert.assertEquals(capturedStatus.getValue(), expectedStatus); } getValue() { return value; }
removeStressTest() { final java.util.concurrent.atomic.AtomicBoolean running = new java.util.concurrent.atomic.AtomicBoolean(true); final java.util.concurrent.atomic.AtomicBoolean failed = new java.util.concurrent.atomic.AtomicBoolean(false); final java.util.Queue < java.lang.Integer > queue = newQueue(); java.lang.Thread p = new java.lang.Thread() { @org.jctools.queues.Override public void run() { int i = 0; try { while (running.get()) { if (queue.isEmpty()) { queue.offer((i++)); queue.offer((i++)); queue.offer((i++)); } } } catch (java.lang.Exception e) { e.printStackTrace(); failed.set(true); running.set(false); } } }; java.lang.Thread c = new java.lang.Thread() { @org.jctools.queues.Override public void run() { int i = 0; try { while (running.get()) { if (!(queue.isEmpty())) { if (!(queue.remove(i))) { failed.set(true); running.set(false); } i++; } } } catch (java.lang.Exception e) { e.printStackTrace(); failed.set(true); running.set(false); } } }; p.start(); c.start(); java.util.concurrent.locks.LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(250)); running.set(false); p.join(); c.join(); org.junit.Assert.assertFalse(failed.get()); } get() { long result = 0L; long[] cells = this.cells; int length = (mask) + 1; for (int i = 0; i < length; i++) { result += org.jctools.counters.UNSAFE.getLongVolatile(cells, counterOffset(i)); } return result; }
testInvalidCountsShowsAsInvalid() { co.cask.coopr.layout.NodeLayout goodNodeLayout = new co.cask.coopr.layout.NodeLayout("large-mem", "ubuntu12", com.google.common.collect.ImmutableSet.of("namenode")); com.google.common.collect.Multiset < co.cask.coopr.layout.NodeLayout > counts = com.google.common.collect.HashMultiset.create(); counts.add(goodNodeLayout, 2); co.cask.coopr.layout.ClusterLayout layout = new co.cask.coopr.layout.ClusterLayout(co.cask.coopr.layout.ClusterLayoutTest.constraints, counts); org.junit.Assert.assertFalse(layout.isValid()); } isValid() { return satisfiesConstraints(constraints); }
throwsOnUnsubscribeIfClosed() { try (io.nats.client.NatsTestServer ts = new io.nats.client.NatsTestServer(false); io.nats.client.Connection nc = io.nats.client.Nats.connect(ts.getURI())) { io.nats.client.Subscription sub = nc.subscribe("subject"); nc.close(); sub.unsubscribe(); org.junit.Assert.assertFalse(true); } } unsubscribe() { if ((this.dispatcher) != null) { throw new java.lang.IllegalStateException("Subscriptions<sp>that<sp>belong<sp>to<sp>a<sp>dispatcher<sp>cannot<sp>respond<sp>to<sp>unsubscribe<sp>directly."); } else if ((this.incoming) == null) { throw new java.lang.IllegalStateException("This<sp>subscription<sp>is<sp>inactive."); } if (isDraining()) { return; } this.connection.unsubscribe(this,(- 1)); }
testClassLoaderObjectInputStream() { com.liferay.petra.io.ClassLoaderObjectInputStreamTest.TestSerializable testSerializable = new com.liferay.petra.io.ClassLoaderObjectInputStreamTest.TestSerializable("test"); com.liferay.petra.io.unsync.UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new com.liferay.petra.io.unsync.UnsyncByteArrayOutputStream(); try (java.io.ObjectOutputStream objectOutputStream = new java.io.ObjectOutputStream(unsyncByteArrayOutputStream)) { objectOutputStream.writeObject(testSerializable); objectOutputStream.flush(); } com.liferay.petra.io.unsync.UnsyncByteArrayInputStream unsyncByteArrayInputStream = new com.liferay.petra.io.unsync.UnsyncByteArrayInputStream(unsyncByteArrayOutputStream.unsafeGetByteArray()); try (java.io.ObjectInputStream objectInputStream = getObjectInputStream(unsyncByteArrayInputStream, com.liferay.petra.io.ClassLoaderObjectInputStreamTest.class.getClassLoader())) { org.junit.Assert.assertEquals(testSerializable, objectInputStream.readObject()); } } readObject() { byte tcByte = _buffer[((_index)++)]; if (tcByte == (SerializationConstants.TC_BOOLEAN)) { return((T) (java.lang.Boolean.valueOf(readBoolean()))); } else if (tcByte == (SerializationConstants.TC_BYTE)) { return((T) (java.lang.Byte.valueOf(readByte()))); } else if (tcByte == (SerializationConstants.TC_CHARACTER)) { return((T) (java.lang.Character.valueOf(readChar()))); } else if (tcByte == (SerializationConstants.TC_CLASS)) { java.lang.String contextName = readString(); java.lang.String className = readString(); java.lang.ClassLoader classLoader = com.liferay.petra.lang.ClassLoaderPool.getClassLoader(contextName); return((T) (com.liferay.petra.lang.ClassResolverUtil.resolve(className, classLoader))); } else if (tcByte == (SerializationConstants.TC_DOUBLE)) { return((T) (java.lang.Double.valueOf(readDouble()))); } else if (tcByte == (SerializationConstants.TC_FLOAT)) { return((T) (java.lang.Float.valueOf(readFloat()))); } else if (tcByte == (SerializationConstants.TC_INTEGER)) { return((T) (java.lang.Integer.valueOf(readInt()))); } else if (tcByte == (SerializationConstants.TC_LONG)) { return((T) (java.lang.Long.valueOf(readLong()))); } else if (tcByte == (SerializationConstants.TC_NULL)) { return null; } else if (tcByte == (SerializationConstants.TC_SHORT)) { return((T) (java.lang.Short.valueOf(readShort()))); } else if (tcByte == (SerializationConstants.TC_STRING)) { return((T) (readString())); } else if (tcByte == (SerializationConstants.TC_OBJECT)) { try { java.io.ObjectInputStream objectInputStream = new com.liferay.petra.io.ProtectedAnnotatedObjectInputStream(new com.liferay.petra.io.Deserializer.BufferInputStream()); return((T) (objectInputStream.readObject())); } catch (java.io.IOException ioe) { throw new java.lang.RuntimeException(ioe); } } throw new java.lang.IllegalStateException(("Unkown<sp>TC<sp>code<sp>" + tcByte)); }
isFirstAfterSecond_A$Calendar$Calendar_false() { java.util.Calendar arg0 = com.github.seratch.taskun.util.CalendarUtil.getCalendar("2010", "3", "1"); java.util.Calendar arg1 = com.github.seratch.taskun.util.CalendarUtil.getCalendar("2010", "2", "28"); boolean actual2 = com.github.seratch.taskun.util.CalendarUtil.isFirstAfterSecond(arg1, arg0); boolean expected2 = false; org.junit.Assert.assertEquals(expected2, actual2); } isFirstAfterSecond(java.util.Calendar, java.util.Calendar) { long firstValue = first.getTimeInMillis(); long secondValue = second.getTimeInMillis(); return firstValue > secondValue ? true : false; }
whenLoadPlusServiceSizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() { com.graphhopper.jsprit.core.problem.job.Service service = mock(com.graphhopper.jsprit.core.problem.job.Service.class); when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()); com.graphhopper.jsprit.core.problem.misc.JobInsertionContext iContext = mock(com.graphhopper.jsprit.core.problem.misc.JobInsertionContext.class); when(iContext.getJob()).thenReturn(service); when(iContext.getRoute()).thenReturn(route); when(iContext.getNewVehicle()).thenReturn(vehicle); org.junit.Assert.assertFalse(constraint.fulfilled(iContext)); } fulfilled(com.graphhopper.jsprit.core.problem.misc.JobInsertionContext) { for (java.lang.String skill : insertionContext.getJob().getRequiredSkills().values()) { if (!(insertionContext.getNewVehicle().getSkills().containsSkill(skill))) { return false; } } com.graphhopper.jsprit.core.problem.Skills requiredSkillsForRoute = states.getRouteState(insertionContext.getRoute(), InternalStates.SKILLS, com.graphhopper.jsprit.core.problem.Skills.class); if (requiredSkillsForRoute == null) requiredSkillsForRoute = com.graphhopper.jsprit.core.problem.constraint.HardSkillConstraint.defaultSkills; for (java.lang.String skill : requiredSkillsForRoute.values()) { if (!(insertionContext.getNewVehicle().getSkills().containsSkill(skill))) { return false; } } return true; }
testNbLinesCommand() { analyser.addInputResource("src/test/resources/java/analysers/ActionListenerCondSimpleNestedIf.java"); analyser.run(); fr.inria.diverse.torgen.inspectorguidget.analyser.Command cmd = new java.util.ArrayList(analyser.getCommands().values()).get(0).getCommand(0); org.junit.Assert.assertEquals(4, cmd.getNbLines()); } getNbLines() { return java.util.stream.Stream.concat(statements.stream().filter((stat) -> !(stat.getStatmts().isEmpty())).map((stat) -> stat.getStatmts().get(0).getPosition()), conditions.stream().map((stat) -> stat.realStatmt.getPosition())).mapToInt((pos) -> ((pos.getEndLine()) - (pos.getLine())) + 1).sum(); }
readJSONTweet() { java.io.InputStream stream = org.openimaj.twitter.USMFStatus.class.getResourceAsStream("/org/openimaj/twitter/json_tweets.txt"); org.openimaj.twitter.USMFStatus status = org.openimaj.io.IOUtils.read(stream, new org.openimaj.twitter.USMFStatus(org.openimaj.twitter.GeneralJSONTwitter.class), "UTF-8"); status.addAnalysis("someString", "with<sp>a<sp>value"); status.addAnalysis("someInt", 1.0F); java.io.ByteArrayOutputStream outStream = new java.io.ByteArrayOutputStream(); org.openimaj.io.IOUtils.writeASCII(outStream, status, "UTF-8"); byte[] arr = outStream.toByteArray(); org.openimaj.twitter.USMFStatus readStatus = org.openimaj.io.IOUtils.read(new java.io.ByteArrayInputStream(arr), org.openimaj.twitter.USMFStatus.class, "UTF-8"); org.junit.Assert.assertTrue(status.equals(readStatus)); } equals(java.lang.Object) { if ((this) == o) return true; if (!(o instanceof org.openimaj.video.tracking.klt.Feature)) return false; if ((((((org.openimaj.video.tracking.klt.Feature) (o)).x) == (x)) && ((((org.openimaj.video.tracking.klt.Feature) (o)).y) == (y))) && ((((org.openimaj.video.tracking.klt.Feature) (o)).val) == (val))) return true; return false; }
whenCreatedFromMapWithoutWeblogicOperatorNamespace_hasEmptyString() { oracle.kubernetes.operator.helm.HelmOperatorValues values = new oracle.kubernetes.operator.helm.HelmOperatorValues(com.google.common.collect.ImmutableMap.of()); org.junit.Assert.assertThat(values.getNamespace(), org.hamcrest.Matchers.equalTo("")); } getNamespace() { return namespace; }
testEncodePostgreSQLNums() { System.out.println(((com.telefonica.iot.cygnus.utils.CommonUtilsForTests.getTestTraceHead("[NGSICharsets.encodePostgreSQL]")) + "--------<sp>Numbers<sp>are<sp>not<sp>encoded")); java.lang.String in = "0123456789"; java.lang.String expected = "0123456789"; java.lang.String out = com.telefonica.iot.cygnus.utils.NGSICharsets.encodePostgreSQL(in); try { org.junit.Assert.assertEquals(expected, out); System.out.println(((((com.telefonica.iot.cygnus.utils.CommonUtilsForTests.getTestTraceHead("[NGSICharsets.encodePostgreSQL]")) + "-<sp>OK<sp>-<sp>'") + in) + "'<sp>has<sp>not<sp>been<sp>encoded")); } catch (java.lang.AssertionError e) { System.out.println(((((((com.telefonica.iot.cygnus.utils.CommonUtilsForTests.getTestTraceHead("[NGSICharsets.encodePostgreSQL]")) + "-<sp>FAIL<sp>-<sp>'") + in) + "'<sp>has<sp>been<sp>encoded<sp>as<sp>'") + out) + "'")); throw e; } encodePostgreSQL(java.lang.String) { java.lang.String out = ""; for (int i = 0; i < (in.length()); i++) { char c = in.charAt(i); int code = c; if ((code >= 97) && (code <= 119)) { out += c; } else if (c == 'x') { java.lang.String next4; if ((i + 4) < (in.length())) { next4 = in.substring((i + 1),(i + 5)); } else { next4 = "WXYZ"; } if (next4.matches("^[0-9a-fA-F]{4}$")) { out += "xx"; } else { out += c; } } else if ((code == 121) || (code == 122)) { out += c; } else if ((code >= 48) && (code <= 57)) { out += c; } else if (c == '_') { out += c; } else if (c == '=') { out += "xffff"; } else { java.lang.String hex = java.lang.Integer.toHexString(code); out += "x" + (("0000" + hex).substring(hex.length())); } } return out; }
testInitializationFailure() { java.lang.Exception exception = new java.lang.Exception(); com.liferay.portal.test.aspects.ReflectionUtilAdvice.setDeclaredFieldThrowable(exception); try { java.lang.Class.forName(("com.liferay.portal.template.freemarker.internal." + "LiferayObjectWrapper")); org.junit.Assert.fail("ExceptionInInitializerError<sp>was<sp>not<sp>thrown"); } catch (java.lang.ExceptionInInitializerError eiie) { org.junit.Assert.assertSame(exception, eiie.getCause()); } } getCause() { return _cause; }
testGetMD5Checksum_String() { java.lang.String text = "test<sp>string"; java.lang.String expResult = "6f8db599de986fab7a21625b7916589c"; java.lang.String result = org.owasp.dependencycheck.utils.Checksum.getMD5Checksum(text); org.junit.Assert.assertEquals(expResult, result); } getMD5Checksum(java.io.File) { final byte[] b = org.owasp.dependencycheck.utils.Checksum.getChecksum(org.owasp.dependencycheck.utils.Checksum.MD5, file); return org.owasp.dependencycheck.utils.Checksum.getHex(b); }
getMetricDefSpecificSvcAgainstOpApplyAllNeg() { org.ebayopensource.turmeric.runtime.common.monitoring.MetricsRegistry registry = org.ebayopensource.turmeric.runtime.common.monitoring.MetricsRegistry.getServerInstance(); try { registerTestMetricDefs(); org.ebayopensource.turmeric.runtime.common.monitoring.MetricId specific = new org.ebayopensource.turmeric.runtime.common.monitoring.MetricId(org.ebayopensource.turmeric.runtime.tests.monitoring.MetricsRegistryTest.METRIC_NAME_TT, org.ebayopensource.turmeric.runtime.tests.monitoring.MetricsRegistryTest.SERVICE_NAME_USER, org.ebayopensource.turmeric.runtime.common.monitoring.MetricDef.OP_APPLY_TO_ALL); org.ebayopensource.turmeric.runtime.common.monitoring.MetricDef def = registry.findMetricDef(specific); org.junit.Assert.assertEquals(null, def); } finally { unregisterTestMetricDefs(); } } findMetricDef(org.ebayopensource.turmeric.runtime.common.monitoring.MetricId) { for (org.ebayopensource.turmeric.runtime.common.monitoring.MetricDef def : m_metricDefs) { if (matchDef(def, metricId)) { return def; } } return null; }
validPlatformsAndApiLevelsWithDiffBuildTools1() { final com.simpligility.maven.plugins.android.AndroidSdk sdk = new com.simpligility.maven.plugins.android.AndroidSdk(new java.io.File(sdkTestSupport.getEnv_ANDROID_HOME()), "19", "25.0.2"); org.junit.Assert.assertTrue((((sdk.getAaptPath()) != null) && (!(sdk.getAaptPath().equals(""))))); } getAaptPath() { return getPathForBuildTool(BuildToolInfo.PathId.AAPT); }
canUpdateCenterWithExternalId() { java.lang.Short loanOfficerId = center.getPersonnel().getPersonnelId(); java.lang.String newExternalId = "ext123"; org.joda.time.LocalDate dateInPast = new org.joda.time.LocalDate(center.getMfiJoiningDate()).minusWeeks(4); java.lang.String mfiJoiningDate = new java.text.SimpleDateFormat("dd/MM/yyyy").format(dateInPast.toDateMidnight().toDate()); org.mifos.dto.domain.AddressDto newAddress = null; if ((center.getAddress()) != null) { newAddress = org.mifos.framework.business.util.Address.toDto(center.getAddress()); } java.util.List < org.mifos.dto.domain.CustomFieldDto > customFields = new java.util.ArrayList < org.mifos.dto.domain.CustomFieldDto > (); java.util.List < org.mifos.dto.domain.CustomerPositionDto > customerPositions = new java.util.ArrayList < org.mifos.dto.domain.CustomerPositionDto > (); java.lang.String updatedDisplayName = "Center<sp>" + (org.apache.commons.lang.RandomStringUtils.randomAlphanumeric(5)); org.mifos.dto.domain.CenterUpdate centerUpdate = new org.mifos.dto.domain.CenterUpdate(center.getCustomerId(), updatedDisplayName, center.getVersionNo(), loanOfficerId, newExternalId, mfiJoiningDate, newAddress, customFields, customerPositions); org.mifos.security.util.UserContext userContext = org.mifos.framework.TestUtils.makeUser(); customerService.updateCenter(userContext, centerUpdate); center = customerDao.findCenterBySystemId(center.getGlobalCustNum()); org.junit.Assert.assertThat(center.getExternalId(), org.hamcrest.CoreMatchers.is(newExternalId)); } getExternalId() { return this.externalId; }
should_return_this() { org.fest.assertions.api.ByteArrayAssert returned = assertions.isEmpty(); org.junit.Assert.assertSame(returned, assertions); } isEmpty() { return diffs.isEmpty(); }
testJson() { com.ctrip.xpipe.redis.core.entity.RedisMeta redisMeta = new com.ctrip.xpipe.redis.core.entity.RedisMeta(); redisMeta.setId("id").setIp("ip").setMaster("mastr").setOffset(1111L); com.fasterxml.jackson.databind.ObjectMapper mapper = new com.fasterxml.jackson.databind.ObjectMapper(); java.lang.String json = mapper.writeValueAsString(redisMeta); System.out.println(json); com.ctrip.xpipe.redis.core.entity.RedisMeta meta = mapper.readValue(json, com.ctrip.xpipe.redis.core.entity.RedisMeta.class); org.junit.Assert.assertEquals(redisMeta, meta); } setMaster(boolean) { this.master = master; }
transformSimpleMacro() { java.lang.String expected = "beginDocument\n" + ((((("beginMacroMarkerStandalone<sp>[testsimplemacro]<sp>[]\n" + "beginParagraph\n") + "onWord<sp>[simplemacro0]\n") + "endParagraph\n") + "endMacroMarkerStandalone<sp>[testsimplemacro]<sp>[]\n") + "endDocument"); org.xwiki.rendering.block.XDOM dom = new org.xwiki.rendering.block.XDOM(java.util.Arrays.asList(((org.xwiki.rendering.block.Block) (new org.xwiki.rendering.block.MacroBlock("testsimplemacro", java.util.Collections.< java.lang.String, java.lang.String > emptyMap(), false))))); this.transformation.transform(dom, new org.xwiki.rendering.transformation.TransformationContext(dom, org.xwiki.rendering.syntax.Syntax.XWIKI_2_0)); org.xwiki.rendering.renderer.printer.WikiPrinter printer = new org.xwiki.rendering.renderer.printer.DefaultWikiPrinter(); org.xwiki.rendering.renderer.BlockRenderer eventBlockRenderer = this.componentManager.getInstance(org.xwiki.rendering.renderer.BlockRenderer.class, Syntax.EVENT_1_0.toIdString()); eventBlockRenderer.render(dom, printer); org.junit.Assert.assertEquals(expected, printer.toString()); } toString() { return getBuffer().toString(); }
listAccessLevelsForwardsCalls() { org.phenotips.data.permissions.EntityPermissionsManager internal = this.mocker.getInstance(org.phenotips.data.permissions.EntityPermissionsManager.class, "secure"); java.util.List < org.phenotips.data.permissions.AccessLevel > levels = new java.util.ArrayList(); when(internal.listAccessLevels()).thenReturn(levels); java.util.Collection < org.phenotips.data.permissions.AccessLevel > returnedLevels = this.mocker.getComponentUnderTest().listAccessLevels(); org.junit.Assert.assertSame(levels, returnedLevels); } listAccessLevels() { java.util.List < org.phenotips.data.permissions.AccessLevel > levels = new java.util.ArrayList(); levels.add(org.phenotips.data.permissions.internal.DefaultEntityAccessManagerTest.EDIT_ACCESS); levels.add(org.phenotips.data.permissions.internal.DefaultEntityAccessManagerTest.NO_ACCESS); levels.add(org.phenotips.data.permissions.internal.DefaultEntityAccessManagerTest.OWNER_ACCESS); levels.add(org.phenotips.data.permissions.internal.DefaultEntityAccessManagerTest.VIEW_ACCESS); levels.add(org.phenotips.data.permissions.internal.DefaultEntityAccessManagerTest.MANAGE_ACCESS); when(this.componentManager.< org.phenotips.data.permissions.AccessLevel > getInstanceList(org.phenotips.data.permissions.AccessLevel.class)).thenReturn(levels); java.util.Collection < org.phenotips.data.permissions.AccessLevel > returnedLevels = this.component.listAccessLevels(); org.junit.Assert.assertEquals(3, returnedLevels.size()); java.util.Iterator < org.phenotips.data.permissions.AccessLevel > it = returnedLevels.iterator(); org.junit.Assert.assertSame(org.phenotips.data.permissions.internal.DefaultEntityAccessManagerTest.VIEW_ACCESS, it.next()); org.junit.Assert.assertSame(org.phenotips.data.permissions.internal.DefaultEntityAccessManagerTest.EDIT_ACCESS, it.next()); org.junit.Assert.assertSame(org.phenotips.data.permissions.internal.DefaultEntityAccessManagerTest.MANAGE_ACCESS, it.next()); org.junit.Assert.assertFalse(returnedLevels.contains(org.phenotips.data.permissions.internal.DefaultEntityAccessManagerTest.NO_ACCESS)); org.junit.Assert.assertFalse(returnedLevels.contains(org.phenotips.data.permissions.internal.DefaultEntityAccessManagerTest.OWNER_ACCESS)); }
nullTargetType() { org.junit.Assert.assertEquals(null, status.getTargetType()); } getTargetType() { if ((targetType) == null) { return null; } return targetType.name().toLowerCase(); }
testUnregisterServiceHandler() { serviceManager.registerServiceHandler("id", mock(org.eclipse.rap.rwt.service.ServiceHandler.class)); serviceManager.unregisterServiceHandler("id"); org.junit.Assert.assertNull(serviceManager.getServiceHandler("id")); } getServiceHandler(java.lang.String) { return customHandlers.get(customId); }
next() { int expected = 10; when(this.reader.next()).thenReturn(expected); int result = this.filter.next(); org.junit.Assert.assertEquals(expected, result); } next() { java.util.List < D > list = this.databaseList; return !(list.isEmpty()) ? list.get(this.random.nextInt(list.size())) : this.primary(); }
testSearchEqAtEmptyDB() { info.smart_tools.smartactors.database_in_memory.in_memory_database.InMemoryDatabase database = new info.smart_tools.smartactors.database_in_memory.in_memory_database.InMemoryDatabase(); database.createCollection("collection_name"); java.util.List < info.smart_tools.smartactors.iobject.iobject.IObject > outputList = database.select(new info.smart_tools.smartactors.iobject.ds_object.DSObject("{\"filter\":{\"hello\":<sp>{\"$eq\":<sp>\"world\"}}}"), "collection_name"); org.junit.Assert.assertTrue(((outputList.size()) == 0)); } size() { return template.size(); }
shouldReturnCustomScannerWhenScannerForExistingSchemeGiven() { org.cognitor.cassandra.migration.scanner.CustomScanner customScanner = new org.cognitor.cassandra.migration.scanner.CustomScanner(); org.cognitor.cassandra.migration.scanner.ScannerRegistry registry = new org.cognitor.cassandra.migration.scanner.ScannerRegistry (); registry.register("jar", customScanner); org.junit.Assert.assertThat(registry.getScanner("jar"), org.hamcrest.core.Is.is(org.hamcrest.CoreMatchers.equalTo(customScanner))); } getScanner(java.lang.String) { notNullOrEmpty(scheme, "scheme"); return this.scanners.get(scheme.toLowerCase()); }
testGetWithNonExistingKeyReturnsNull() { com.eclipsesource.tabris.widgets.swipe.SwipeContext context = new com.eclipsesource.tabris.widgets.swipe.SwipeContext(); org.junit.Assert.assertNull(context.get("foo", java.lang.String.class)); } get(java.lang.String, java.lang.Class) { T result = null; java.lang.Object value = store.get(key); if (value != null) { if (type.isAssignableFrom(value.getClass())) { result = ((T) (value)); } else { throw new java.lang.IllegalArgumentException(((("Value<sp>with<sp>key<sp>" + key) + "<sp>is<sp>not<sp>of<sp>type<sp>") + (type.getName()))); } } return result; }
testConvertFromAvroLong() { org.talend.components.common.config.jdbc.TalendType expectedType = TalendType.LONG; org.apache.avro.Schema fieldSchema = org.talend.daikon.avro.AvroUtils._long(); org.junit.Assert.assertEquals(expectedType, org.talend.components.common.config.jdbc.TalendType.convertFromAvro(fieldSchema)); } convertFromAvro(org.apache.avro.Schema) { org.apache.avro.Schema type = org.talend.daikon.avro.AvroUtils.unwrapIfNullable(avroType); java.lang.String logicalType = org.talend.daikon.avro.LogicalTypeUtils.getLogicalTypeName(type); if (logicalType != null) { return org.talend.components.common.config.jdbc.TalendType.getTalendByLogicalType(logicalType); } java.lang.String javaClass = type.getProp(SchemaConstants.JAVA_CLASS_FLAG); if (javaClass != null) { return org.talend.components.common.config.jdbc.TalendType.getTalendByJavaClass(javaClass); } return org.talend.components.common.config.jdbc.TalendType.getTalendByAvroType(type.getType()); }
canConvertStockQuote() { converter = new edu.zipcloud.cloudstreetmarket.core.converters.IdentifiableToIdConverter(edu.zipcloud.cloudstreetmarket.core.converters.StockQuote.class); org.junit.Assert.assertTrue(converter.canConvert(edu.zipcloud.cloudstreetmarket.core.converters.StockQuote.class)); } canConvert(java.lang.Class) { return type.isAssignableFrom(this.type); }
regexMatchMalformed() { com.github.vincentrussell.query.mongodb.sql.converter.QueryConverter queryConverter = new com.github.vincentrussell.query.mongodb.sql.converter.QueryConverter("select<sp>*<sp>from<sp>my_table<sp>where<sp>regexMatch(column,\'^[ae\"gaf]+$\')<sp>=<sp>false<sp>"); org.junit.Assert.assertNull(queryConverter); }
testLanguageString() { it.unibz.inf.ontop.model.type.TermType type1 = it.unibz.inf.ontop.OntopModelTestingTools.TYPE_FACTORY.getLangTermType("en"); it.unibz.inf.ontop.model.type.TermType type2 = it.unibz.inf.ontop.OntopModelTestingTools.TYPE_FACTORY.getXsdStringDatatype(); it.unibz.inf.ontop.model.type.TermType commonDenominator = type1.getCommonDenominator(type2); org.junit.Assert.assertEquals(type2, commonDenominator); } getCommonDenominator(it.unibz.inf.ontop.model.type.impl.LanguageTag) { return langTag.getCommonDenominator(otherLanguageTag).map((newLangTag) -> newLangTag.equals(langTag) ? ((it.unibz.inf.ontop.model.type.impl.TermType) (this)) : new it.unibz.inf.ontop.model.type.impl.LangDatatype(newLangTag, parentAncestry, typeFactory)).orElseGet(typeFactory :: getXsdStringDatatype); }
testSetTagsFromListWithOptions() { initializeExpectedInstance(2); expect(compute.getOptions()).andReturn(mockOptions); com.google.cloud.compute.deprecated.Operation operation = new com.google.cloud.compute.deprecated.Operation.Builder(serviceMockReturnsOptions).setOperationId(com.google.cloud.compute.deprecated.ZoneOperationId.of("project", "op")).build(); java.util.List < java.lang.String > tagList = com.google.common.collect.ImmutableList.of("v1", "v2"); com.google.cloud.compute.deprecated.Tags tags = com.google.cloud.compute.deprecated.Tags.newBuilder().setValues(tagList).setFingerprint("fingerprint").build(); expect(compute.setTags(com.google.cloud.compute.deprecated.InstanceTest.INSTANCE_ID, tags, Compute.OperationOption.fields())).andReturn(operation); replay(compute); initializeInstance(); org.junit.Assert.assertSame(operation, instance.setTags(tagList, Compute.OperationOption.fields())); } setTags(int, java.lang.String) { if (value == null) { throw new java.lang.NullPointerException(); } ensureTagsIsMutable(); tags_.set(index, value); onChanged(); return this; }
noGapsIfNoIntervals() { net.time4j.range.IntervalCollection < net.time4j.PlainDate > windows = net.time4j.range.IntervalCollection.onDateAxis(); org.junit.Assert.assertThat(windows.withGaps().isEmpty(), org.hamcrest.CoreMatchers.is(true)); } withGaps() { int len = this.intervals.size(); if (len == 0) { return this; } else if (len == 1) { java.util.List < net.time4j.range.ChronoInterval < T > > zero = java.util.Collections.emptyList(); return this.create(zero); } java.util.List < net.time4j.range.ChronoInterval < T > > gaps = new java.util.ArrayList(); T previous = null; for (int i = 0, n = len - 1; i < n; i++) { net.time4j.range.ChronoInterval < T > current = this.intervals.get(i); if (current.getEnd().isInfinite()) { break; } T gapStart = current.getEnd().getTemporal(); if (current.getEnd().isClosed()) { gapStart = this.getTimeLine().stepForward(gapStart); if (gapStart == null) { break; } } if ((previous == null) || (this.isAfter(gapStart, previous))) { previous = gapStart; } else { gapStart = previous; } T gapEnd = this.intervals.get((i + 1)).getStart().getTemporal(); if ((gapEnd == null) || (!(this.isAfter(gapEnd, gapStart)))) { continue; } net.time4j.range.IntervalEdge edge = IntervalEdge.OPEN; if (this.isCalendrical()) { edge = IntervalEdge.CLOSED; gapEnd = this.getTimeLine().stepBackwards(gapEnd); if (gapEnd == null) { continue; } } net.time4j.range.Boundary < T > s = net.time4j.range.Boundary.ofClosed(gapStart); net.time4j.range.Boundary < T > e = net.time4j.range.Boundary.of(edge, gapEnd); gaps.add(this.newInterval(s, e)); } return this.create(gaps); }
testGetCombinedForSection() { java.lang.String sectionName = "foo"; java.lang.String otherName = "bar"; java.lang.String expected = "section-foo<sp>bar"; org.junit.Assert.assertEquals(expected, com.github.bordertech.wcomponents.autocomplete.AutocompleteUtil.getCombinedForSection(sectionName, otherName)); } getCombinedForSection(java.lang.String, java.lang.String[]) { return com.github.bordertech.wcomponents.autocomplete.AutocompleteUtil.getCombinedAutocomplete(com.github.bordertech.wcomponents.autocomplete.AutocompleteUtil.getNamedSection(sectionName), args); }
testSetMaxResonStruc_Int() { org.openscience.cdk.charges.Electronegativity pe = new org.openscience.cdk.charges.Electronegativity(); int maxRes = 10; pe.setMaxResonStruc(maxRes); org.junit.Assert.assertSame(maxRes, pe.getMaxResonStruc()); } getMaxResonStruc() { return maxRS; }
testScriptEncoding() { org.redisson.api.RScript script = redisson.getScript(); java.lang.String value = "test"; script.eval(RScript.Mode.READ_WRITE, "redis.call('set',<sp>KEYS[1],<sp>ARGV[1])", RScript.ReturnType.VALUE, java.util.Arrays.asList("foo"), value); java.lang.String val = script.eval(RScript.Mode.READ_WRITE, "return<sp>redis.call('get',<sp>KEYS[1])", RScript.ReturnType.VALUE, java.util.Arrays.asList("foo")); org.junit.Assert.assertEquals(value, val); } eval(org.redisson.Mode, org.redisson.client.codec.Codec, java.lang.String, org.redisson.ReturnType) { org.redisson.RedissonScript script = new org.redisson.RedissonScript(commandExecutor, codec); return script.eval(mode, luaScript, returnType); }
test_param_string_copy_6() { org.apache.jena.query.ParameterizedSparqlString query = new org.apache.jena.query.ParameterizedSparqlString(); query.setNsPrefix("ex", "http://example.org"); org.apache.jena.query.ParameterizedSparqlString copy = query.copy(true, true, false); org.junit.Assert.assertFalse("http://example.org".equals(copy.getNsPrefixURI("ex"))); } getNsPrefixURI(java.lang.String) { checkRead(); return holder.getBaseItem().getNsPrefixURI(prefix); }
write() { com.asakusafw.runtime.value.ByteOption option = new com.asakusafw.runtime.value.ByteOption(); option.modify(((byte) (100))); com.asakusafw.runtime.value.ByteOption restored = restore(option); org.junit.Assert.assertThat(restored.get(), is(option.get())); } get() { if (canGet) { return next; } throw new java.io.IOException(); }
shouldSplitTestInSuitesIntoSeperateUnitsWhenUsingNonStandardSuiteRunners() { final java.util.List < org.pitest.testapi.TestUnit > actual = find(org.pitest.TestJUnitConfiguration.CustomSuite.class); System.out.println(actual); org.junit.Assert.assertEquals(4, actual.size()); } find(java.lang.Class) { final org.pitest.testapi.execute.FindTestUnits finder = new org.pitest.testapi.execute.FindTestUnits(this.testee); return finder.findTestUnitsForAllSuppliedClasses(java.util.Arrays.< java.lang.Class<?> > asList(clazz)); }
test2() { org.esa.s2tbx.dataio.s2.l1b.IL1bGranuleMetadata granuleMetadata = null; granuleMetadata = org.esa.s2tbx.dataio.s2.l1b.L1bMetadataFactory.createL1bGranuleMetadata(new org.esa.s2tbx.dataio.VirtualPath(buildPathResource("S2A_OPER_MTD_L1B_GR_MPS__20140926T120000_S20130707T171927_D06.xml"), null)); org.junit.Assert.assertNotNull(granuleMetadata); } buildPathResource(java.lang.String) { java.net.URL url = getClass().getResource(resource); java.nio.file.Path xmlPath = null; java.io.File file = new java.io.File(url.toURI()); xmlPath = file.toPath(); return xmlPath; }
testPropagateRoles() { com.liferay.portal.security.membershippolicy.SiteMembershipPolicyFactoryImplTest._atomicState.reset(); com.liferay.portal.kernel.security.membershippolicy.SiteMembershipPolicyUtil.propagateRoles(null, null); org.junit.Assert.assertTrue(com.liferay.portal.security.membershippolicy.SiteMembershipPolicyFactoryImplTest._atomicState.isSet()); } isSet() { if (Boolean.TRUE.equals(_atomicBoolean.get())) { return true; } return false; }
havingEmptyBody() { net.jadler.Jadler.onRequest().havingBodyEqualTo("").havingBody(org.hamcrest.Matchers.notNullValue()).havingBody(org.hamcrest.Matchers.isEmptyString()).respond().withStatus(201); final int status = org.apache.http.client.fluent.Executor.newInstance().execute(org.apache.http.client.fluent.Request.Post(jadlerUri())).handleResponse(net.jadler.STATUS_RETRIEVER); org.junit.Assert.assertThat(status, org.hamcrest.Matchers.is(201)); } handleResponse(org.apache.http.HttpResponse) { return response.getStatusLine().getStatusCode(); }
hasCorpusSelectionCorpusList() { corpusList = java.util.Arrays.asList(23L); org.junit.Assert.assertThat(strategy.hasCorpusSelection(corpusList, metaData), org.hamcrest.Matchers.is(true)); } hasCorpusSelection(java.util.List, java.util.List) { return !((corpusList.isEmpty()) && (metaData.isEmpty())); }
testSubLoggerLogLevelViaProperties() { java.util.Properties properties = new java.util.Properties(); properties.setProperty(((LogService.LOG_LEVEL_BY_SOURCE_PROPERTY) + ":Hello:World"), org.scijava.log.LogLevel.prefix(LogLevel.ERROR)); properties.setProperty(((LogService.LOG_LEVEL_BY_SOURCE_PROPERTY) + ":foo:bar"), org.scijava.log.LogLevel.prefix(LogLevel.TRACE)); final org.scijava.log.LogService log = new org.scijava.log.LogServiceTest.TestableLogService(properties); org.scijava.log.Logger sub = log.subLogger("foo").subLogger("bar"); org.junit.Assert.assertEquals(LogLevel.TRACE, sub.getLevel()); } getLevel() { return level; }
testHashCode() { java.lang.String period = "-P12Y4M3DT150H2M4,0758S"; net.time4j.Duration < net.time4j.CalendarUnit.CalendarUnit > datePeriod = net.time4j.Duration.ofCalendarUnits(12, 4, 3); net.time4j.Duration < net.time4j.ClockUnit.ClockUnit > timePeriod = net.time4j.Duration.ofClockUnits(150, 2, 4).plus(75800000, ClockUnit.NANOS); net.time4j.Duration < net.time4j.IsoUnit > test1 = net.time4j.Duration.ofZero().plus(datePeriod).plus(timePeriod).inverse(); net.time4j.Duration < net.time4j.IsoUnit > test2 = net.time4j.Duration.parsePeriod(period); org.junit.Assert.assertThat(test1.hashCode(), org.hamcrest.CoreMatchers.is(test2.hashCode())); } hashCode() { int hash = 3; hash = (37 * hash) + (this.source.hashCode()); hash = (37 * hash) + (this.pulse.hashCode()); hash = (37 * hash) + (this.offsetAmount); return(37 * hash) + (this.offsetUnit.hashCode()); }
testExecuteExceptionRunnable() { org.wildfly.clustering.service.concurrent.ServiceExecutor executor = new org.wildfly.clustering.service.concurrent.StampedLockServiceExecutor(); org.wildfly.common.function.ExceptionRunnable < java.lang.Exception > executeTask = mock(org.wildfly.common.function.ExceptionRunnable.class); executor.execute(executeTask); verify(executeTask).run(); reset(executeTask); doThrow(new java.lang.Exception()).when(executeTask).run(); try { executor.execute(executeTask); org.junit.Assert.fail("Should<sp>have<sp>thrown<sp>an<sp>exception"); } catch (java.lang.Exception e) { org.junit.Assert.assertNotNull(e); } reset(executeTask); java.lang.Runnable closeTask = mock(org.wildfly.clustering.service.concurrent.Runnable.class); executor.close(closeTask); verify(closeTask).run(); reset(closeTask); executor.close(closeTask); verify(closeTask, never()).run(); executor.execute(executeTask); verify(executeTask, never()).run(); } execute(org.jboss.as.server.DeploymentProcessorTarget) { org.wildfly.extension.beanvalidation.ROOT_LOGGER.debug("Activating<sp>Bean<sp>Validation<sp>subsystem"); processorTarget.addDeploymentProcessor(BeanValidationExtension.SUBSYSTEM_NAME, Phase.STRUCTURE, Phase.STRUCTURE_BEAN_VALIDATION_RESOURCE_INJECTION_REGISTRY, new org.jboss.as.ee.beanvalidation.BeanValidationResourceReferenceProcessorRegistryProcessor()); processorTarget.addDeploymentProcessor(BeanValidationExtension.SUBSYSTEM_NAME, Phase.DEPENDENCIES, Phase.DEPENDENCIES_BEAN_VALIDATION, new org.jboss.as.ee.beanvalidation.BeanValidationDeploymentDependenciesProcessor()); processorTarget.addDeploymentProcessor(BeanValidationExtension.SUBSYSTEM_NAME, Phase.POST_MODULE, Phase.POST_MODULE_VALIDATOR_FACTORY, new org.jboss.as.ee.beanvalidation.BeanValidationFactoryDeployer()); }
test() { cash.xcl.server.mock.ServerJVM server = null; cash.xcl.api.tcp.XCLClient client = null; try { int sourceAddress = 1; net.openhft.chronicle.salt.Ed25519.generatePublicAndSecretKey(publicKey, secretKey); server = new cash.xcl.server.mock.ServerJVM(ServerJVM.DEFAULT_SERVER_ADDRESS, secretKey, 1000, 50, sourceAddress, publicKey); server.register(sourceAddress, publicKey); java.util.concurrent.atomic.AtomicInteger count = new java.util.concurrent.atomic.AtomicInteger(); cash.xcl.api.AllMessages listener = new cash.xcl.server.mock.ClientProcessTest.MyWritingAllMessages(count); client = new cash.xcl.api.tcp.XCLClient("client", "localhost", ServerJVM.DEFAULT_SERVER_ADDRESS, sourceAddress, secretKey, listener, true); client.createNewAddressCommand(new cash.xcl.server.mock.CreateNewAddressCommand(sourceAddress, 1L, publicKey, "usny")); net.openhft.chronicle.core.Jvm.pause(100); cash.xcl.server.mock.OpeningBalanceEvent obe1 = new cash.xcl.server.mock.OpeningBalanceEvent(sourceAddress, 1, sourceAddress, "USD", 1000); client.openingBalanceEvent(obe1); net.openhft.chronicle.core.Jvm.pause(100); int destinationAddress = 2; cash.xcl.server.mock.OpeningBalanceEvent obe2 = new cash.xcl.server.mock.OpeningBalanceEvent(sourceAddress, 1, destinationAddress, "USD", 1000); client.openingBalanceEvent(obe2); net.openhft.chronicle.core.Jvm.pause(100); cash.xcl.server.mock.TransferValueCommand tvc = new cash.xcl.server.mock.TransferValueCommand(sourceAddress, 3, destinationAddress, 1.23, "USD", "init"); client.transferValueCommand(tvc); net.openhft.chronicle.core.Jvm.pause(1000); System.out.println(("count<sp>is<sp>" + count)); org.junit.Assert.assertEquals(2, count.get(), 1); } finally { net.openhft.chronicle.core.Jvm.pause(1000); } } get() { cash.xcl.util.XCLIntObjMap < im.xcl.platform.util.DtoParselet > parseletMap2 = cash.xcl.util.XCLIntObjMap.withExpectedSize(im.xcl.platform.util.DtoParselet.class,((parseletMap.size()) * 2)); parseletMap.forEach((i, dp) -> parseletMap2.put(i, new im.xcl.platform.util.DtoParselet(dp))); return new im.xcl.platform.util.VanillaDtoParser < T > (parseletMap2); }
should_visit_right_class() { org.geojson.GeoJsonObject result = geoJsonObject.accept(this.instance); org.junit.Assert.assertEquals(geoJsonObject, result); } accept(org.geojson.GeoJsonObjectVisitor) { return geoJsonObjectVisitor.visit(this); }
testInitialize() { org.talend.daikon.properties.ValidationResult result = jmsInputPTransformRuntime.initialize(null, null); org.junit.Assert.assertEquals(ValidationResult.OK, result); } initialize(org.talend.components.api.container.RuntimeContainer, org.talend.components.service.rest.mock.MockDatasetProperties) { return new org.talend.daikon.properties.ValidationResult(ValidationResult.Result.OK, "initialized"); }
testGetAll() { org.redisson.api.RMapReactive < java.lang.Integer, java.lang.Integer > map = redisson.getMap("getAll"); sync(map.put(1, 100)); sync(map.put(2, 200)); sync(map.put(3, 300)); sync(map.put(4, 400)); java.util.Map < java.lang.Integer, java.lang.Integer > filtered = sync(map.getAll(new java.util.HashSet < java.lang.Integer > (java.util.Arrays.asList(2, 3, 5)))); java.util.Map < java.lang.Integer, java.lang.Integer > expectedMap = new java.util.HashMap < java.lang.Integer, java.lang.Integer > (); expectedMap.put(2, 200); expectedMap.put(3, 300); org.junit.Assert.assertEquals(expectedMap, filtered); } put(java.lang.Object, java.lang.Object) { if ((!(allowNullValues)) && (value == null)) { map.remove(key); return; } value = toStoreValue(value); if ((mapCache) != null) { mapCache.fastPut(key, value, config.getTTL(), TimeUnit.MILLISECONDS, config.getMaxIdleTime(), TimeUnit.MILLISECONDS); } else { map.fastPut(key, value); } addCachePut(); }
shouldConsiderPathDecendantOfOtherParentPath() { org.junit.Assert.assertThat(path.isDescendantOf(parent), org.hamcrest.core.Is.is(true)); } isDescendantOf(org.modeshape.jcr.value.Path) { org.modeshape.common.util.CheckArg.isNotNull(ancestor, "ancestor"); if ((this) == ancestor) return false; if (ancestor.isRoot()) return true; if ((ancestor.size()) >= (this.size())) return false; org.modeshape.jcr.value.Path thisPath = this.getAncestor(((this.size()) - (ancestor.size()))); org.modeshape.jcr.value.Path thatPath = ancestor; assert(thisPath.size()) == (thatPath.size()); while ((!(thisPath.isRoot())) && (thisPath.getLastSegment().equals(thatPath.getLastSegment()))) { thisPath = thisPath.getParent(); thatPath = thatPath.getParent(); } return thisPath.isRoot(); }
testGetCurrentElementAttributs1Param() { com.ximpleware.AutoPilot ap = new com.ximpleware.AutoPilot(net.heartsome.xml.vtdimpl.test.VTDUtilsTest.vn); ap.selectXPath("//trans-unit[position()=2]"); ap.evalXPath(); java.util.Hashtable < java.lang.String, java.lang.String > eAtts = new java.util.Hashtable < java.lang.String, java.lang.String > (); eAtts.put("approved", "yes"); eAtts.put("es" 3, "es" 4); eAtts.put("merged-trans", "yes"); eAtts.put("reformat", "yes"); eAtts.put("es" 5, "pixel"); eAtts.put("es" 0, "yes"); eAtts.put("xml:space", "es" 6); eAtts.put("es" 2, "yes"); eAtts.put("xsi:test", "es" 1); java.util.Hashtable < java.lang.String, java.lang.String > aAtts = net.heartsome.xml.vtdimpl.test.VTDUtilsTest.vu.getCurrentElementAttributs("es", "http://www.heartsome.net.cn/2008/XLFExtension"); org.junit.Assert.assertEquals(eAtts, aAtts); } getCurrentElementAttributs(java.lang.String, java.lang.String) { java.util.Hashtable < java.lang.String, java.lang.String > attributes = new java.util.Hashtable < java.lang.String, java.lang.String > (); com.ximpleware.AutoPilot apAttributes = new com.ximpleware.AutoPilot(vn); apAttributes.declareXPathNameSpace(nsPrefix, nsUrl); apAttributes.selectXPath("@*"); int inx = - 1; while ((inx = apAttributes.evalXPath()) != (- 1)) { java.lang.String name = vn.toString(inx); inx = vn.getAttrVal(name); java.lang.String value = (inx != (- 1)) ? vn.toString(inx) : ""; attributes.put(name, value); } apAttributes.resetXPath(); if (attributes.isEmpty()) { attributes = null; } return attributes; }
testFailedImport() { org.sakaiproject.calendar.impl.GenericImportRowHandler genericImportRowHandler = new org.sakaiproject.calendar.impl.GenericImportRowHandler(csvReader.getDefaultColumnMap(), resourceLoader); java.io.InputStream in = new java.io.ByteArrayInputStream("this<sp>does<sp>not<sp>parse<sp>correctly".getBytes()); csvReader.importStreamFromDelimitedFile(in, genericImportRowHandler); java.util.List < java.util.Map < java.lang.String, java.lang.Object > > rowList = genericImportRowHandler.getRowList(); org.junit.Assert.assertTrue(rowList.isEmpty()); } isEmpty() { int count = countAllResources(); return count == 0; }
testWithoutWildcard() { securityRepository.addMatch("queues.1.*", new java.util.HashSet < org.apache.activemq.artemis.core.security.Role > ()); java.util.HashSet < org.apache.activemq.artemis.core.security.Role > roles = new java.util.HashSet(2); roles.add(new org.apache.activemq.artemis.core.security.Role("test1", true, true, true, true, true, true, true, true, true, true)); roles.add(new org.apache.activemq.artemis.core.security.Role("test2", true, true, true, true, true, true, true, true, true, true)); securityRepository.addMatch("queues.2.aq", roles); java.util.HashSet < org.apache.activemq.artemis.core.security.Role > hashSet = securityRepository.getMatch("queues.2.aq"); org.junit.Assert.assertEquals(hashSet.size(), 2); } size() { return connectors.size(); }
testNamedArgsNotAllowInIndirectInclude() { java.lang.String dir = getRandomDir(); java.lang.String groupFile = "f(x,y)<sp>::=<sp>\"<x><y>\"\n" + "g(name)<sp>::=<sp>\"< (name) (x={a},y={b})>\""; writeFile(dir, "group.stg", groupFile); org.stringtemplate.v4.STGroupFile group = new org.stringtemplate.v4.STGroupFile((dir + "/group.stg")); org.stringtemplate.v4.misc.ErrorBuffer errors = new org.stringtemplate.v4.misc.ErrorBuffer(); group.setListener(errors); group.load(); java.lang.String expected = "group.stg<sp>2:22:<sp>'='<sp>came<sp>as<sp>a<sp>complete<sp>surprise<sp>to<sp>me" + (newline); java.lang.String result = errors.toString(); org.junit.Assert.assertEquals(expected, result); } toString() { return((((((((getClass().getSimpleName()) + "{") + "self=") + (scope.st)) + ",<sp>start=") + (outputStartChar)) + ",<sp>stop=") + (outputStopChar)) + '}'; }
nodeName_contextItem() { final org.xmldb.api.base.ResourceSet result = org.exist.xquery.XQueryFunctionsTest.existEmbeddedServer.executeQuery(("let<sp>$a<sp>:=<sp><a><b/></a>" + "return<sp>$a/b/fn:node-name()")); final java.lang.String r = ((java.lang.String) (result.getResource(0).getContent())); org.junit.Assert.assertEquals("b", r); } getContent() { if ((content) != null) { return new org.exist.xquery.value.StringValue(content).getStringValue(true); } final java.lang.Object res = super.getContent(); if (res != null) { if (res instanceof byte[]) { return new java.lang.String(((byte[]) (res)), UTF_8); } else { return res; } } return null; }
testMapCache() { org.opentripplanner.model.Route result1 = subject.map(org.opentripplanner.gtfs.mapping.RouteMapperTest.ROUTE); org.opentripplanner.model.Route result2 = subject.map(org.opentripplanner.gtfs.mapping.RouteMapperTest.ROUTE); org.junit.Assert.assertTrue((result1 == result2)); } map(org.onebusaway.gtfs.model.StopTime) { return orginal == null ? null : mappedStopTimes.computeIfAbsent(orginal, this :: doMap); }
testGetOutKeyOrdinal() { org.junit.Assert.assertEquals(HadoopExitData.outKeyOrdinal, org.pentaho.big.data.kettle.plugins.mapreduce.step.exit.HadoopExitData.getOutKeyOrdinal()); } getOutKeyOrdinal() { return org.pentaho.big.data.kettle.plugins.mapreduce.step.exit.HadoopExitData.outKeyOrdinal; }
testColumnsArray() { org.apache.drill.exec.physical.impl.scan.TestColumnsArray.MockScanner mock = buildScanner(org.apache.drill.exec.physical.rowSet.impl.RowSetTestUtils.projectList(ScanTestUtils.FILE_NAME_COL, ColumnsArrayManager.COLUMNS_COL, org.apache.drill.exec.physical.impl.scan.ScanTestUtils.partitionColName(0))); org.apache.drill.exec.record.metadata.TupleMetadata expectedSchema = new org.apache.drill.exec.record.metadata.SchemaBuilder().add("filename", MinorType.VARCHAR).addArray("columns", MinorType.VARCHAR).addNullable("dir0", MinorType.VARCHAR).buildSchema(); { org.apache.drill.test.rowSet.RowSet.SingleRowSet expected = fixture.rowSetBuilder(expectedSchema).build(); org.junit.Assert.assertNotNull(mock.scanner.output()); org.apache.drill.test.rowSet.RowSetUtilities.verify(expected, fixture.wrap(mock.scanner.output())); } mock.reader.startBatch(); mock.loader.writer().addRow(new java.lang.Object[] { new java.lang.String[] { "fred", "flintstone" } }).addRow(new java.lang.Object[] { new java.lang.String[] { "barney", "rubble" } }); mock.reader.endBatch(); { org.apache.drill.test.rowSet.RowSet.SingleRowSet expected = fixture.rowSetBuilder(expectedSchema).addRow("z.csv", new java.lang.String[] { "fred", "flintstone" }, "x").addRow("z.csv", new java.lang.String[] { "barney", "rubble" }, "x").build(); org.apache.drill.test.rowSet.RowSetUtilities.verify(expected, fixture.wrap(mock.scanner.output())); } mock.scanner.close(); } output() { out.value = value.value; }
testDeletePlusAddSame() { final java.lang.String archivename = "zip"; final java.io.File input = this.createArchive(archivename); org.apache.commons.compress.archivers.ArchiveOutputStream out = null; org.apache.commons.compress.archivers.ArchiveInputStream ais = null; final java.io.File result = java.io.File.createTempFile("test",("." + archivename)); result.deleteOnExit(); java.io.File testtxt = null; try { final java.io.InputStream is = new java.io.FileInputStream(input); ais = factory.createArchiveInputStream(archivename, is); out = factory.createArchiveOutputStream(archivename, new java.io.FileOutputStream(result)); final org.apache.commons.compress.changes.ChangeSet changes = new org.apache.commons.compress.changes.ChangeSet(); changes.delete("test/test3.xml"); archiveListDelete("test/test3.xml"); testtxt = getFile("test.txt"); final org.apache.commons.compress.archivers.ArchiveEntry entry = out.createArchiveEntry (testtxt, "test/test3.xml"); changes.add(entry, new java.io.FileInputStream(testtxt)); archiveList.add("test/test3.xml"); final org.apache.commons.compress.changes.ChangeSetPerformer performer = new org.apache.commons.compress.changes.ChangeSetPerformer(changes); performer.perform(ais, out); is.close(); } finally { if (out != null) { out.close(); } if (ais != null) { ais.close(); } } org.apache.commons.compress.archivers.ArchiveInputStream in = null; java.io.File check = null; try { final java.io.InputStream is = new java.io.FileInputStream(result); final java.io.BufferedInputStream buf = new java.io.BufferedInputStream(is); in = factory.createArchiveInputStream(buf); check = this.checkArchiveContent(in, archiveList, false); final java.io.File test3xml = new java.io.File(check, "result/test/test3.xml"); org.junit.Assert.assertEquals(testtxt.length(), test3xml.length()); final java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.FileReader(test3xml)); java.lang.String str; while ((str = reader.readLine()) != null) { "111111111111111111111111111000101011".equals(str); } reader.close(); } finally { if (in != null) { in.close(); } rmdir(check); } } length() { return(literalLength()) + (brLength); }
dealHands() { bnymellon.codekatas.deckofcards.list.immutable.var jdkShuffled = this.jdkDeck.shuffle(new java.util.Random(1)); bnymellon.codekatas.deckofcards.list.immutable.var acShuffled = this.acDeck.shuffle(new java.util.Random(1)); bnymellon.codekatas.deckofcards.list.immutable.var jdkHands = this.jdkDeck.dealHands(jdkShuffled, 5, 5); bnymellon.codekatas.deckofcards.list.immutable.var acHands = this.acDeck.dealHands(acShuffled, 5, 5); org.junit.Assert.assertEquals(jdkHands, acHands); } dealHands(org.eclipse.collections.api.stack.MutableStack, int, int) { return null; }
getRenderedFeatureFileContentNonEnglishTest() { java.lang.String expectedOutput = "@featureTag1\n" 0 + (((((((((((("@featureTag1\n" + "@featureTag2\n") + "@scenarioTag1\n" 8) + "@featureTag1\n" 1) + "@featureTag1\n" 3) + "@scenarioTag1\n") + "@scenarioTag1\n" 0) + "Scenario:<sp>scenarioName\n") + "scenarioDescription\n") + "@featureTag1\n" 4) + "@scenarioTag1\n" 5) + "@scenarioTag1\n" 7) + "#<sp>Generated<sp>by<sp>Cucable\n"); java.lang.String featureName = "@scenarioTag1\n" 2; java.lang.String featureDescription = "@scenarioTag1\n" 4; java.lang.String featureLanguage = "@featureTag1\n" 5; java.util.List < java.lang.String > featureTags = java.util.Arrays.asList("@featureTag1", "@featureTag2"); java.lang.String scenarioName = "@featureTag1\n" 2; java.lang.String scenarioDescription = "scenarioDescription"; java.util.List < com.trivago.vo.Step > backgroundSteps = java.util.Arrays.asList(new com.trivago.vo.Step("@scenarioTag1\n" 9, null, null), new com.trivago.vo.Step("@scenarioTag1\n" 1, null, null)); java.util.List < java.lang.String > scenarioTags = java.util.Arrays.asList("@scenarioTag1\n" 6, "@scenarioTag2"); java.lang.String featureFilePath = "@scenarioTag1\n" 3; com.trivago.vo.SingleScenario singleScenario = new com.trivago.vo.SingleScenario(featureName, featureFilePath, featureLanguage, featureDescription, scenarioName, scenarioDescription, featureTags, backgroundSteps); singleScenario.setScenarioTags(scenarioTags); java.lang.String renderedFeatureFileContent = featureFileContentRenderer.getRenderedFeatureFileContent(singleScenario); org.junit.Assert.assertThat(renderedFeatureFileContent, org.hamcrest.core.Is.is(expectedOutput)); } getRenderedFeatureFileContent(com.trivago.vo.SingleScenario) { return getRenderedFeatureFileContent(java.util.Collections.singletonList(singleScenario)); }
testRestartApp() { java.lang.String id = "application<sp>1"; org.apache.hadoop.yarn.appcatalog.controller.AppDetailsController ac = org.mockito.Mockito.mock(org.apache.hadoop.yarn.appcatalog.controller.AppDetailsController.class); org.apache.hadoop.yarn.service.api.records.Service yarnfile = new org.apache.hadoop.yarn.service.api.records.Service(); org.apache.hadoop.yarn.service.api.records.Component comp = new org.apache.hadoop.yarn.service.api.records.Component(); org.apache.hadoop.yarn.service.api.records.Container c = new org.apache.hadoop.yarn.service.api.records.Container(); c.setId("container-1"); java.util.List < org.apache.hadoop.yarn.service.api.records.Container > containers = new java.util.ArrayList < org.apache.hadoop.yarn.service.api.records.Container > (); containers.add(c); comp.setContainers(containers); yarnfile.addComponent(comp); javax.ws.rs.core.Response expected = javax.ws.rs.core.Response.ok().build(); when(ac.restartApp(id)).thenReturn(javax.ws.rs.core.Response.ok().build()); final javax.ws.rs.core.Response actual = ac.restartApp(id); org.junit.Assert.assertEquals(expected.getStatus(), actual.getStatus()); } getStatus() { return status; }
markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset() { try (final org.apache.commons.io.input.BoundedReader mr = new org.apache.commons.io.input.BoundedReader(sr, 3)) { mr.read(); mr.mark(3); mr.read(); mr.read(); org.junit.Assert.assertEquals((- 1), mr.read()); } } read() { if ((currentNumberOfBytes) <= 0) { throw new java.lang.IllegalStateException("No<sp>bytes<sp>available."); } final byte b = buffer[startOffset];-- (currentNumberOfBytes); if ((++ (startOffset)) == (buffer.length)) { startOffset = 0; } return b; }
testBuild() { org.lnu.is.domain.course.type.CourseType context = new org.lnu.is.domain.course.type.CourseType(); java.lang.String expected = "SELECT<sp>e<sp>FROM<sp>CourseType<sp>e<sp>WHERE<sp>e.status=:status<sp>AND<sp>e.crtUserGroup<sp>IN<sp> (:userGroups)<sp>"; org.lnu.is.pagination.MultiplePagedSearch < org.lnu.is.domain.course.type.CourseType > pagedSearch = new org.lnu.is.pagination.MultiplePagedSearch(); pagedSearch.setEntity(context); java.lang.String actualQuery = unit.build(pagedSearch); org.junit.Assert.assertEquals(expected, actualQuery); } setEntity(T) { this.entity = entity; }
testSizeCalc3() { ch.ethz.globis.phtree.PhTreeHelper.setAllocBatchSize(3); int[] results = new int[] { 0, 3, 3, 3, 6, 6, 6, 9, 9, 9, 12, 12, 12 }; for (int i = 0; i < (results.length); i++) { int size = ch.ethz.globis.phtree.util.BitsLong.calcArraySize((i * 64)); org.junit.Assert.assertEquals(results[i], size); } } calcArraySize(int) { int arraySize = (nBits + (ch.ethz.globis.phtree.PhTreeHelper.ALLOC_BATCH_SIZE_LONG)) > > > 6; int size = ch.ethz.globis.phtree.PhTreeHelper.ALLOC_BATCH_SIZE; arraySize = (arraySize / size) * size; return arraySize; }
testQueryByLocalDateTime_PositionalBinding() { com.jmethods.catatumbo.EntityManagerTest.em.deleteAll(com.jmethods.catatumbo.entities.LocalDateTimeField.class); com.jmethods.catatumbo.entities.LocalDateTimeField entity = new com.jmethods.catatumbo.entities.LocalDateTimeField(); java.time.LocalDateTime timestamp = java.time.LocalDateTime.of(2007, 1, 12, 10, 30, 3, 456789); entity.setTimestamp(timestamp); entity = com.jmethods.catatumbo.EntityManagerTest.em.insert(entity); java.lang.String query = "SELECT<sp>*<sp>FROM<sp>LocalDateTimeField<sp>WHERE<sp>timestamp=@1"; com.jmethods.catatumbo.EntityQueryRequest request = com.jmethods.catatumbo.EntityManagerTest.em.createEntityQueryRequest(query); request.addPositionalBindings(timestamp); com.jmethods.catatumbo.QueryResponse < com.jmethods.catatumbo.entities.LocalDateTimeField > response = com.jmethods.catatumbo.EntityManagerTest.em.executeEntityQueryRequest(com.jmethods.catatumbo.entities.LocalDateTimeField.class, request); java.util.List < com.jmethods.catatumbo.entities.LocalDateTimeField > entities = response.getResults(); System.out.println(entities); org.junit.Assert.assertTrue(((entities.size()) == 1)); } size() { return map.size(); }
testRequestScopeActive() { org.jboss.additional.testsuite.jdkall.past.eap_7.ejb.async.AsyncBean bean = lookup(org.jboss.additional.testsuite.jdkall.past.eap_7.ejb.async.AsyncBean.class); final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); final java.util.concurrent.Future < java.lang.Integer > future = bean.testRequestScopeActive(latch); latch.countDown(); int result = future.get(); org.junit.Assert.assertEquals(20, result); } testRequestScopeActive(java.util.concurrent.CountDownLatch) { latch.await(5, TimeUnit.SECONDS); requestScopedBean.setState(20); return new javax.ejb.AsyncResult < java.lang.Integer > (requestScopedBean.getState()); }
httpMethod() { context.setHttpMethod(ODataHttpMethod.GET.name()); org.junit.Assert.assertEquals(ODataHttpMethod.GET.name(), context.getHttpMethod()); } getHttpMethod() { return httpMethod; }
avoidOverZealousAbbreviations() { org.openscience.cdk.depict.Abbreviations factory = new org.openscience.cdk.depict.Abbreviations(); org.openscience.cdk.interfaces.IAtomContainer mol = org.openscience.cdk.depict.AbbreviationsTest.smi("Clc1ccccc1"); factory.add("*c1ccccc1<sp>Ph"); org.junit.Assert.assertThat(factory.apply(mol), org.hamcrest.CoreMatchers.is(0)); } apply(org.openscience.cdk.interfaces.IAtomContainer) { java.util.Set < org.openscience.cdk.interfaces.IBond > bonds = findBonds(molecule); molecule.setFlag(org.openscience.cdk.CDKConstants.ISAROMATIC, false); for (org.openscience.cdk.interfaces.IBond bond : molecule.bonds()) bond.setIsAromatic(false); for (org.openscience.cdk.interfaces.IAtom atom : molecule.atoms()) atom.setIsAromatic(false); for (final org.openscience.cdk.interfaces.IBond bond : bonds) { bond.setIsAromatic(true); bond.getBegin().setIsAromatic(true); bond.getEnd().setIsAromatic(true); } molecule.setFlag(org.openscience.cdk.CDKConstants.ISAROMATIC,(!(bonds.isEmpty()))); return !(bonds.isEmpty()); }
testWithDynamicClassPathWithPermissions() { com.picocontainer.classname.DefaultClassLoadingPicoContainer parent = new com.picocontainer.classname.DefaultClassLoadingPicoContainer(new com.picocontainer.behaviors.Caching()); java.io.Reader script = new java.io.StringReader(("" + (((((((((("<sp>builder<sp>=<sp>new<sp>com.picocontainer.script.groovy.GroovyNodeBuilder()\n" + "<sp>File<sp>testCompJar<sp>=<sp>com.picocontainer.script.TestHelper.getTestCompJarFile()\n") + "<sp>compJarPath<sp>=<sp>testCompJar.getCanonicalPath()\n") + "<sp>child<sp>=<sp>null\n") + "<sp>pico<sp>=<sp>builder.container<sp>{\n") + "<sp>classPathElement(path:compJarPath)<sp>{\n") + "<sp>File<sp>testCompJar<sp>=<sp>com.picocontainer.script.TestHelper.getTestCompJarFile()\n" 0) + "<sp>}\n") + "<sp>component(class:\"TestComp\")\n") + "<sp>File<sp>testCompJar<sp>=<sp>com.picocontainer.script.TestHelper.getTestCompJarFile()\n" 1) + ""))); com.picocontainer.MutablePicoContainer pico = ((com.picocontainer.MutablePicoContainer) (buildContainer(script, parent, com.picocontainer.script.groovy.GroovyNodeBuilderTestCase.ASSEMBLY_SCOPE))); org.junit.Assert.assertTrue(((pico.getComponents().size()) == 1)); } getComponents() { checkReadPermission(); return pico.getComponents(); }
should_extract_variable_from_angular_object_registry () { final java.lang.String noteId = "noteId"; final org.apache.zeppelin.display.AngularObjectRegistry registry = mock(org.apache.zeppelin.display.AngularObjectRegistry.class); final org.apache.zeppelin.notebook.Note note = mock(org.apache.zeppelin.notebook.Note.class); final java.util.Map < java.lang.String, org.apache.zeppelin.display.Input > inputs = new java.util.HashMap(); inputs.put("name", null); inputs.put("age", null); inputs.put("job", null); final java.lang.String scriptBody = "My<sp>name<sp>is<sp>${name}<sp>and<sp>I<sp>am<sp>${age=20}<sp>years<sp>old.<sp>" + "My<sp>occupation<sp>is<sp>${<sp>job<sp>=<sp>engineer<sp>|<sp>developer<sp>|<sp>artists}"; final org.apache.zeppelin.notebook.Paragraph paragraph = new org.apache.zeppelin.notebook.Paragraph(note, null, null, null); final java.lang.String paragraphId = paragraph.getId(); final org.apache.zeppelin.display.AngularObject nameAO = org.apache.zeppelin.display.AngularObjectBuilder.build("name", "DuyHai<sp>DOAN", noteId, paragraphId); final org.apache.zeppelin.display.AngularObject ageAO = org.apache.zeppelin.display.AngularObjectBuilder.build("age", 34, noteId, null); when(note.getId()).thenReturn(noteId); when(registry.get("name", noteId, paragraphId)).thenReturn(nameAO); when(registry.get("age", noteId, null)).thenReturn(ageAO); final java.lang.String expected = "My<sp>name<sp>is<sp>DuyHai<sp>DOAN<sp>and<sp>I<sp>am<sp>34<sp>years<sp>old.<sp>" + "My<sp>occupation<sp>is<sp>${<sp>job<sp>=<sp>engineer<sp>|<sp>developer<sp>|<sp>artists}"; final java.lang.String actual = paragraph.extractVariablesFromAngularRegistry (scriptBody, inputs, registry); verify(registry).get("name", noteId, paragraphId); verify(registry).get("age", noteId, null); org.junit.Assert.assertEquals(actual, expected); } get(java.lang.String, java.lang.String, java.lang.String) { synchronized(registry) { if (noteId == null) { noteId = org.apache.zeppelin.interpreter.InterpreterHookRegistry.GLOBAL_KEY; } addRepl(noteId, className); return registry.get(noteId).get(className).get(event); } }
matchingProperties_Simple() { java.util.Map < java.lang.String, org.apache.jackrabbit.oak.api.PropertyState > result = org.apache.jackrabbit.oak.plugins.document.bundlor.BundlorUtils.getMatchingProperties(create("a", "b", "c"), Matcher.NON_MATCHING); org.junit.Assert.assertTrue(result.isEmpty()); } isEmpty() { return(size) == 0; }
shouldConvertDoubleToLongCorrectly() { final java.lang.Long l = io.confluent.ksql.serde.util.SerdeUtils.toLong(1.0); org.junit.Assert.assertThat(l, org.hamcrest.CoreMatchers.equalTo(1L)); } toLong(java.lang.Object) { java.util.Objects.requireNonNull(object, "Object<sp>cannot<sp>be<sp>null"); if (object instanceof java.lang.Long) { return((java.lang.Long) (object)); } if (object instanceof java.lang.Number) { return((java.lang.Number) (object)).longValue(); } if (object instanceof java.lang.String) { try { return java.lang.Long.parseLong(((java.lang.String) (object))); } catch (final java.lang.NumberFormatException e) { throw new io.confluent.ksql.util.KsqlException((("Cannot<sp>convert<sp>" + object) + "<sp>to<sp>BIGINT."), e); } } throw new java.lang.IllegalArgumentException("This<sp>Object<sp>doesn't<sp>represent<sp>a<sp>long"); }
testCreateLinkToDotDotPrefix() { org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(testBaseDir1(), "file"); org.apache.hadoop.fs.Path dir = new org.apache.hadoop.fs.Path(testBaseDir1(), "test"); org.apache.hadoop.fs.Path link = new org.apache.hadoop.fs.Path(testBaseDir1(), "test/link"); org.apache.hadoop.fs.FileContextSymlinkBaseTest.createAndWriteFile(file); org.apache.hadoop.fs.FileContextSymlinkBaseTest.fc.mkdir(dir, org.apache.hadoop.fs.permission.FsPermission.getDefault(), false); org.apache.hadoop.fs.FileContextSymlinkBaseTest.fc.setWorkingDirectory(dir); org.apache.hadoop.fs.FileContextSymlinkBaseTest.fc.createSymlink(new org.apache.hadoop.fs.Path("../file"), link, false); org.apache.hadoop.fs.FileContextSymlinkBaseTest.readFile(link); org.junit.Assert.assertEquals(new org.apache.hadoop.fs.Path("../file"), org.apache.hadoop.fs.FileContextSymlinkBaseTest.fc.getLinkTarget(link)); } getLinkTarget(org.apache.hadoop.fs.Path) { return new org.apache.hadoop.fs.Path(dfs.getLinkTarget(getUriPath(p))); }
testContainsMainContentType() { org.apache.poi.xwpf.usermodel.XWPFDocument doc = org.apache.poi.xwpf.XWPFTestDataSamples.openSampleDocument("sample.docx"); org.apache.poi.openxml4j.opc.OPCPackage pack = doc.getPackage(); boolean found = false; for (org.apache.poi.openxml4j.opc.PackagePart part : pack.getParts()) { if (part.getContentType().equals(XWPFRelation.DOCUMENT.getContentType())) { found = true; } } org.junit.Assert.assertTrue(found); pack.close(); doc.close(); } getContentType() { return getPackagePart().getContentType(); }
testProductsWithLocationService() { com.aliyuncs.ecs.model.v20140526.DescribeRegionsRequest request = new com.aliyuncs.ecs.model.v20140526.DescribeRegionsRequest(); com.aliyuncs.ecs.model.v20140526.DescribeRegionsResponse response = this.client.getAcsResponse(request); org.junit.Assert.assertTrue(((response.getRegions().size()) > 0)); } getRegions() { return this.regions; }
testReadWriteCompositeWithAttributeProcessor() { init(new org.apache.tuscany.sca.assembly.xml.TestAttributeProcessor()); javax.xml.stream.XMLStreamReader reader = inputFactory.createXMLStreamReader(new java.io.StringReader(org.apache.tuscany.sca.assembly.xml.ReadWriteAnyAttributeTestCase.XML)); org.apache.tuscany.sca.assembly.Composite composite = ((org.apache.tuscany.sca.assembly.Composite) (staxProcessor.read(reader, context))); org.junit.Assert.assertNotNull(composite); reader.close(); verifyComposite(composite); java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream(); staxProcessor.write(composite, bos, context); java.io.ByteArrayInputStream bis = new java.io.ByteArrayInputStream(bos.toByteArray()); composite = staxProcessor.read(bis, org.apache.tuscany.sca.assembly.Composite.class, context); verifyComposite(composite); } read(javax.xml.stream.XMLStreamReader, org.apache.tuscany.sca.contribution.processor.ProcessorContext) { org.apache.tuscany.sca.binding.ws.axis2.policy.configuration.Axis2ConfigParamPolicy policy = new org.apache.tuscany.sca.binding.ws.axis2.policy.configuration.Axis2ConfigParamPolicy(); int event = reader.getEventType(); javax.xml.namespace.QName name = null; org.apache.axiom.om.OMElement parameterElement = null; java.lang.String paramName = null; while (reader.hasNext()) { event = reader.getEventType(); switch(event) { case START_ELEMENT : { name = reader.getName(); if (org.apache.tuscany.sca.binding.ws.axis2.policy.configuration.Axis2ConfigParamPolicyProcessor.PARAMETER.equals(name.getLocalPart())) { paramName = reader.getAttributeValue(null, "name"); parameterElement = loadElement(reader); policy.getParamElements().put(paramName, parameterElement); } break; } } if (event == (END_ELEMENT)) { if (org.apache.tuscany.sca.binding.ws.axis2.policy.configuration.Axis2ConfigParamPolicyProcessor.AXIS2_CONFIG_PARAM_POLICY_QNAME.equals(reader.getName())) { break; } } if (reader.hasNext()) { reader.next(); } } return policy; }
testMoveConcurrentWithGetChild() { org.junit.Assume.assumeTrue("VCS<sp>read-committed<sp>semantics<sp>cannot<sp>enforce<sp>this", isDBS()); prepareDocsForMoveConcurrentWithGetChildren(); try { session.getChild(new org.nuxeo.ecm.core.api.PathRef("/folder"), "doc"); org.junit.Assert.fail("should<sp>not<sp>find<sp>child<sp>moved<sp>under<sp>/folder<sp>in<sp>another<sp>transaction"); } catch (org.nuxeo.ecm.core.api.DocumentNotFoundException e) { org.junit.Assert.assertEquals("doc", e.getMessage()); } } getMessage() { java.lang.String msg = ((getErrorMessage()) != null) ? (getErrorMessage()) + ".<sp>" : ""; msg += ((getInstallMessage()) != null) ? (getInstallMessage()) + ".<sp>" : ""; return msg + (super.getMessage()); }
testHasAudioToCompile() { com.bixly.pastevid.recorders.RecorderTest.log("hasAudioToCompile"); com.bixly.pastevid.recorders.Recorder instance = new com.bixly.pastevid.recorders.Recorder(new com.bixly.pastevid.recorders.RecorderTest.TestMeasurable()); instance.setCaptureRectangle(new java.awt.Rectangle(200, 100)); instance.recordVideo(); while ((instance.getSecondsTime()) < 10) { } instance.stopVideo(); boolean result = instance.hasAudioToCompile(); org.junit.Assert.assertNotNull(result); } hasAudioToCompile() { return audioRecorder.hasRecorded(); }
testGetPropertyInfo() { io.sniffy.Driver driver = io.sniffy.DriverManager.getDriver("sniffer:jdbc:h2:mem:"); io.sniffy.DriverPropertyInfo[] propertyInfo = driver.getPropertyInfo("jdbc:h2:~/test", new java.util.Properties()); org.junit.Assert.assertNotNull(propertyInfo); } getPropertyInfo(java.lang.String, java.util.Properties) { io.sniffy.sql.Driver originDriver = getOriginDriver(url); return originDriver.getPropertyInfo(url, info); }
testAddHeader() { javax.mail.internet.MimeMessage m = javax.mail.internet.ModifyMessageTest.createMessage(); javax.mail.internet.MimeMultipart mp = ((javax.mail.internet.MimeMultipart) (m.getContent())); m.setHeader("a", "b"); m.saveChanges(); javax.mail.internet.MimeMessage m2 = new javax.mail.internet.MimeMessage(m); org.junit.Assert.assertEquals("b", m2.getHeader("a", null)); } getHeader(java.lang.String, java.lang.String) { if ((folder) != null) ((com.sun.mail.mbox.MboxFolder) (folder)).checkOpen(); if (isExpunged()) throw new com.sun.mail.mbox.MessageRemovedException("mbox<sp>message<sp>expunged"); return super.getHeader(name, delimiter); }
testNotifySuccess() { org.junit.Assert.assertFalse(result.completed()); BatchResult.Callback < java.lang.Boolean, com.google.cloud.dns.DnsException > callback = org.easymock.EasyMock.createStrictMock(BatchResult.Callback.class); callback.success(true); org.easymock.EasyMock.replay(callback); result.notify(callback); result.success(true); try { result.notify(callback); org.junit.Assert.fail("The<sp>batch<sp>has<sp>been<sp>completed."); } catch (java.lang.IllegalStateException exception) { } org.easymock.EasyMock.verify(callback); } completed() { return completed; }
testNoRunningExecutions() { org.springframework.batch.mongo.dao.Set < org.springframework.batch.mongo.dao.JobExecution > values = dao.findRunningJobExecutions("no-such-job"); org.junit.Assert.assertEquals(0, values.size()); } findRunningJobExecutions(java.lang.String) { org.springframework.batch.mongo.dao.DBCursor instancesCursor = db.getCollection(org.springframework.batch.core.JobInstance.class.getSimpleName()).find(new org.springframework.batch.mongo.dao.BasicDBObject(MongoJobInstanceDao.JOB_NAME_KEY, jobName), org.springframework.batch.mongo.dao.MongoJobInstanceDao.jobInstanceIdObj(1L)); org.springframework.batch.mongo.dao.List < java.lang.Long > ids = new org.springframework.batch.mongo.dao.ArrayList < java.lang.Long > (); while (instancesCursor.hasNext()) { ids.add(((java.lang.Long) (instancesCursor.next().get(org.springframework.batch.mongo.dao.MongoJobInstanceDao.JOB_INSTANCE_ID_KEY)))); } org.springframework.batch.mongo.dao.DBCursor dbCursor = getCollection().find(org.springframework.batch.mongo.dao.BasicDBObjectBuilder.start().add(org.springframework.batch.mongo.dao.MongoJobInstanceDao.JOB_INSTANCE_ID_KEY, new org.springframework.batch.mongo.dao.BasicDBObject("$in", ids.toArray())).add(org.springframework.batch.mongo.dao.END_TIME_KEY, null).get()).sort(org.springframework.batch.mongo.dao.MongoJobExecutionDao.jobExecutionIdObj((- 1L))); org.springframework.batch.mongo.dao.Set < org.springframework.batch.core.JobExecution > result = new org.springframework.batch.mongo.dao.HashSet < org.springframework.batch.core.JobExecution > (); while (dbCursor.hasNext()) { result.add(mapJobExecution(dbCursor.next())); } return result; }
testFailMoveEntryAlreadyExists() { org.apache.directory.ldap.client.api.LdapConnection connection = getAdminConnection(getService()); org.apache.directory.api.ldap.model.entry.Entry entry = new org.apache.directory.api.ldap.model.entry.DefaultEntry (getService().getSchemaManager(), "ou=users,ou=groups,ou=system", "ObjectClass:<sp>top", "ObjectClass:<sp>OrganizationalUnit", "ou:<sp>users"); connection.add(entry); connection.rename(entry.getDn(), new org.apache.directory.api.ldap.model.name.Rdn(getService().getSchemaManager(), "ou=users")); org.apache.directory.api.ldap.model.entry.Entry userzEntry = new org.apache.directory.api.ldap.model.entry.DefaultEntry (getService().getSchemaManager(), "ou=userz,ou=groups,ou=system", "ObjectClass:<sp>top", "ObjectClass:<sp>OrganizationalUnit", "ou:<sp>userz"); connection.add(userzEntry); try { connection.rename("ou=userz,ou=groups,ou=system", "ou=users", true); org.junit.Assert.fail(); } catch (org.apache.directory.api.ldap.model.exception.LdapEntryAlreadyExistsException leaee) { org.junit.Assert.assertTrue(true); } } rename(org.apache.directory.api.ldap.model.name.Dn, org.apache.directory.api.ldap.model.name.Rdn, boolean) { rename(dn, newRdn, deleteOldRdn, LogChange.TRUE); }
should_be_equal_when_having_0_value() { fr.norad.visuwall.api.domain.quality.QualityMeasure qm1 = new fr.norad.visuwall.api.domain.quality.QualityMeasure(); fr.norad.visuwall.api.domain.quality.QualityMeasure qm2 = new fr.norad.visuwall.api.domain.quality.QualityMeasure(); org.junit.Assert.assertEquals(qm1, qm2); }
testWriteNotNestedProperties() { eu.esdihumboldt.cst.test.TransformationExample example = eu.esdihumboldt.cst.test.TransformationExamples.getExample(TransformationExamples.SIMPLE_COMPLEX); java.util.List < java.lang.String > header = java.util.Arrays.asList("id", "name"); java.util.List < java.lang.String > firstDataRow = java.util.Arrays.asList("id0", "name0"); eu.esdihumboldt.hale.io.xls.writer.XLSInstanceWriter writer = new eu.esdihumboldt.hale.io.xls.writer.XLSInstanceWriter(); org.eclipse.core.runtime.content.IContentType contentType = eu.esdihumboldt.hale.common.core.HalePlatform.getContentTypeManager().getContentType("eu.esdihumboldt.hale.io.xls.xls"); writer.setParameter(InstanceTableIOConstants.SOLVE_NESTED_PROPERTIES, eu.esdihumboldt.hale.common.core.io.Value.of(false)); java.io.File tmpFile = tmpFolder.newFile("excelNotNestedProperties.xls"); writer.setInstances(example.getSourceInstances()); writer.setTarget(new eu.esdihumboldt.hale.common.core.io.supplier.FileIOSupplier(tmpFile)); writer.setContentType(contentType); eu.esdihumboldt.hale.common.core.io.report.IOReport report = writer.execute(null); org.junit.Assert.assertTrue(report.isSuccess()); org.apache.poi.ss.usermodel.Workbook wb = org.apache.poi.ss.usermodel.WorkbookFactory.create(tmpFile); org.apache.poi.ss.usermodel.Sheet sheet = wb.getSheetAt(0); checkHeader(sheet, header); checkSheetName(sheet, "person"); checkFirstDataRow(sheet, firstDataRow); } isSuccess() { return success; }
testConnStringNoWriteConcern() { final com.mongodb.ConnectionString connString = new com.mongodb.ConnectionString("mongodb://localhost:27017/mydb?replicaSet=myapp"); com.mongodb.WriteConcern rp = new io.vertx.ext.mongo.impl.config.WriteConcernParser(connString, new io.vertx.core.json.JsonObject()).writeConcern(); org.junit.Assert.assertNull(rp); } writeConcern() { return writeConcern; }
testGetClazzNotFound() { final com.inspiresoftware.lib.dto.geda.adapter.ExtensibleBeanFactory fb = new com.inspiresoftware.lib.dto.geda.adapter.impl.ClassLoaderBeanFactory(com.inspiresoftware.lib.dto.geda.adapter.impl.ClassLoaderBeanFactoryTest.class.getClassLoader()); final java.lang.Class myDtoClass = fb.getClazz("myDto"); org.junit.Assert.assertNull(myDtoClass); } getClazz(java.lang.String) { if (interfaces.containsKey(entityBeanKey)) { return interfaces.get(entityBeanKey); } else if (classes.containsKey(entityBeanKey)) { return classes.get(entityBeanKey); } return null; }
testScannerRun() { System.out.println("Scanning<sp>3<sp>times"); final org.csstudio.archive.engine.scanner.Scanner scanner = new org.csstudio.archive.engine.scanner.Scanner(); final org.csstudio.archive.engine.scanner.ScannerUnitTest.ScanItem item = new org.csstudio.archive.engine.scanner.ScannerUnitTest.ScanItem("Item"); scanner.add(item, org.csstudio.archive.engine.scanner.ScannerUnitTest.fast_period); while ((item.scans) < 3) { System.out.println("scan..."); scanner.scanOnce(); } org.junit.Assert.assertTrue(((item.scans) >= 3)); System.out.format("Idle:<sp>%.2f<sp>%%\n", scanner.getIdlePercentage()); } scanOnce() { try { if (isDueAtAll()) { final long delay = (getNextDueTime()) - (java.lang.System.currentTimeMillis()); if (delay > (idle_delay)) { idle_percentage.update(100.0); java.lang.Thread.sleep(idle_delay); return; } if (delay > 0) { idle_percentage.update(((delay * 100.0) / (idle_delay))); java.lang.Thread.sleep(delay); scanDueScanLists(); return; } idle_percentage.update(0.0); scanDueScanLists(); return; } idle_percentage.update(100.0); java.lang.Thread.sleep(idle_delay); } catch (java.lang.InterruptedException ex) { org.csstudio.archive.engine.Activator.getLogger().log(Level.WARNING, "Scanner<sp>interrupted", ex); } }
testFetchByPrimaryKeysWithNoPrimaryKeys() { java.util.Set < java.io.Serializable > primaryKeys = new java.util.HashSet < java.io.Serializable > (); java.util.Map < java.io.Serializable, com.liferay.social.kernel.model.SocialRelation > socialRelations = _persistence.fetchByPrimaryKeys(primaryKeys); org.junit.Assert.assertTrue(socialRelations.isEmpty()); } isEmpty() { return _portalCacheListeners.isEmpty(); }
testNotStaleWhenHasData() { final java.io.ByteArrayInputStream inStream = org.mockito.Mockito.spy(new java.io.ByteArrayInputStream(new byte[] { 1, 2, 3, 4, 5 })); org.mockito.Mockito.when(socket.getInputStream()).thenReturn(inStream); conn.bind(socket); conn.ensureOpen(); org.junit.Assert.assertFalse(conn.isStale()); } isStale() { if (!(isOpen())) { return true; } try { final int bytesRead = fillInputBuffer(1); return bytesRead < 0; } catch (final java.net.SocketTimeoutException ex) { return false; } catch (final java.net.SocketException ex) { return true; } }
testOptionsThing() { org.jboss.resteasy.test.rx.resource.Thing t = org.jboss.resteasy.test.rx.rxjava2.Rx2SingleProxyServerAsyncTest.proxy.optionsThing(); org.junit.Assert.assertEquals(new org.jboss.resteasy.test.rx.resource.Thing("x"), t); } optionsThing() { return org.jboss.resteasy.test.rx.rxjava2.resource.Rx2ObservableResourceNoStreamImpl.buildObservableThing("x", 3); }
shouldAllowCreateRelationshipWithSameStartAsEndNode() { long nodeId = org.neo4j.server.rest.web.DatabaseActionsTest.graphdbHelper.createNode(); java.util.Map < java.lang.String, java.lang.Object > properties = java.util.Collections.emptyMap(); org.neo4j.server.rest.repr.RelationshipRepresentation rel = org.neo4j.server.rest.web.DatabaseActionsTest.actions.createRelationship(nodeId, nodeId, "Loves", properties); org.junit.Assert.assertNotNull(rel); } createRelationship(long, long, java.lang.String, java.util.Map) { org.neo4j.graphdb.Node start; org.neo4j.graphdb.Node end; try { start = node(startNodeId); } catch (org.neo4j.server.rest.web.NodeNotFoundException e) { throw new org.neo4j.server.rest.domain.StartNodeNotFoundException(e); } try { end = node(endNodeId); } catch (org.neo4j.server.rest.web.NodeNotFoundException e) { throw new org.neo4j.server.rest.domain.EndNodeNotFoundException(e); } org.neo4j.graphdb.Relationship rel = start.createRelationshipTo(end, org.neo4j.graphdb.RelationshipType.withName(type)); propertySetter.setProperties(rel, properties); return new org.neo4j.server.rest.repr.RelationshipRepresentation(rel); }
test_single() { org.junit.Assert.assertTrue(((com.zlikun.jee.Singleton3.getInstance()) == (com.zlikun.jee.Singleton3.getInstance()))); } getInstance() { if ((com.zlikun.jee.Singleton3.INSTANCE) == null) { synchronized(com.zlikun.jee.Singleton3.class) { if ((com.zlikun.jee.Singleton3.INSTANCE) == null) { com.zlikun.jee.Singleton3.INSTANCE = new com.zlikun.jee.Singleton3(); } } } return com.zlikun.jee.Singleton3.INSTANCE; }
removingNothingIsOk() { action.execute(state); org.junit.Assert.assertTrue(action.isExecuted()); compareFields(); } isExecuted() { if ((executed) == null) { return de.rub.nds.tlsattacker.core.workflow.action.TlsAction.EXECUTED_DEFAULT; } return executed; }
testSingle() { java.time.ZoneId zone = java.time.ZoneId.of("GMT"); com.questdb.std.time.TimeZoneRulesImpl rules = new com.questdb.std.time.TimeZoneRulesImpl("GMT", zone.getRules()); int y = 2017; int m = 3; int d = 29; java.time.LocalDateTime dt = java.time.LocalDateTime.of(y, m, d, 0, 0); long millis = com.questdb.std.time.Dates.toMillis(y, m, d, 0, 0); java.time.ZonedDateTime zdt = dt.atZone(zone); long expected = zdt.getOffset().getTotalSeconds(); long changed = (com.questdb.std.time.Dates.toMillis(zdt.getYear(), zdt.getMonthValue(), zdt.getDayOfMonth(), zdt.getHour(), zdt.getMinute())) + ((zdt.getSecond()) * 1000); expected += (changed - millis) / 1000; long offset = rules.getOffset(millis, y, com.questdb.std.time.Dates.isLeapYear(y)); try { org.junit.Assert.assertEquals(expected,(offset / 1000)); } catch (java.lang.Throwable e) { System.out.println((((((zone.getId()) + ";<sp>") + zdt) + ";<sp>") + (com.questdb.std.time.Dates.toString((millis + offset))))); throw e; } } isLeapYear(int) { return((year & 3) == 0) && (((year % 100) != 0) || ((year % 400) == 0)); }
testGetCustomUuidGenerator() { org.springframework.context.support.StaticApplicationContext applicationContext = new org.springframework.context.support.StaticApplicationContext(); applicationContext.registerSingleton("uuidGenerator", org.apache.camel.support.SimpleUuidGenerator.class); factory.setApplicationContext(applicationContext); factory.afterPropertiesSet(); org.apache.camel.spi.UuidGenerator uuidGenerator = factory.getContext().getUuidGenerator(); org.junit.Assert.assertTrue((uuidGenerator instanceof org.apache.camel.support.SimpleUuidGenerator)); } getUuidGenerator() { if ((uuidGenerator) == null) { synchronized(lock) { if ((uuidGenerator) == null) { setUuidGenerator(createUuidGenerator()); } } } return uuidGenerator; }
getRootVariableScope() { org.junit.Assert.assertEquals(org.pentaho.di.trans.steps.scriptvalues_mod.ScriptValuesAddedFunctions.getVariableScope("r"), ScriptValuesAddedFunctions.VariableScope.ROOT); } getVariableScope(java.lang.String) { switch(codeOfScope) { case "s" : return org.pentaho.di.trans.steps.scriptvalues_mod.ScriptValuesAddedFunctions.VariableScope.SYSTEM; case "r" : return org.pentaho.di.trans.steps.scriptvalues_mod.ScriptValuesAddedFunctions.VariableScope.ROOT; case "p" : return org.pentaho.di.trans.steps.scriptvalues_mod.ScriptValuesAddedFunctions.VariableScope.PARENT; case "g" : return org.pentaho.di.trans.steps.scriptvalues_mod.ScriptValuesAddedFunctions.VariableScope.GRAND_PARENT; default : throw org.mozilla.javascript.Context.reportRuntimeError(("The<sp>argument<sp>type<sp>of<sp>function<sp>call<sp>" + "setVariable<sp>should<sp>either<sp>be<sp>\"s\",<sp>\"r\",<sp>\"p\",<sp>or<sp>\"g\".")); } }
