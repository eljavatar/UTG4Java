testDeletePlusAddSame() { final java.lang.String archivename = "zip"; final java.io.File input = this.createArchive(archivename); org.apache.commons.compress.archivers.ArchiveOutputStream out = null; org.apache.commons.compress.archivers.ArchiveInputStream ais = null; final java.io.File result = java.io.File.createTempFile("test",("." + archivename)); result.deleteOnExit(); java.io.File testtxt = null; try { final java.io.InputStream is = new java.io.FileInputStream(input); ais = factory.createArchiveInputStream(archivename, is); out = factory.createArchiveOutputStream(archivename, new java.io.FileOutputStream(result)); final org.apache.commons.compress.changes.ChangeSet changes = new org.apache.commons.compress.changes.ChangeSet(); changes.delete("test/test3.xml"); archiveListDelete("test/test3.xml"); testtxt = getFile("test.txt"); final org.apache.commons.compress.archivers.ArchiveEntry entry = out.createArchiveEntry (testtxt, "test/test3.xml"); changes.add(entry, new java.io.FileInputStream(testtxt)); archiveList.add("test/test3.xml"); final org.apache.commons.compress.changes.ChangeSetPerformer performer = new org.apache.commons.compress.changes.ChangeSetPerformer(changes); performer.perform(ais, out); is.close(); } finally { if (out != null) { out.close(); } if (ais != null) { ais.close(); } } org.apache.commons.compress.archivers.ArchiveInputStream in = null; java.io.File check = null; try { final java.io.InputStream is = new java.io.FileInputStream(result); final java.io.BufferedInputStream buf = new java.io.BufferedInputStream(is); in = factory.createArchiveInputStream(buf); check = this.checkArchiveContent(in, archiveList, false); final java.io.File test3xml = new java.io.File(check, "result/test/test3.xml"); org.junit.Assert.assertEquals(testtxt.length(), test3xml.length()); final java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.FileReader(test3xml)); java.lang.String str; while ((str = reader.readLine()) != null) { "111111111111111111111111111000101011".equals(str); } reader.close(); } finally { if (in != null) { in.close(); } rmdir(check); } } length() { return(literalLength()) + (brLength); }
dealHands() { bnymellon.codekatas.deckofcards.list.immutable.var jdkShuffled = this.jdkDeck.shuffle(new java.util.Random(1)); bnymellon.codekatas.deckofcards.list.immutable.var acShuffled = this.acDeck.shuffle(new java.util.Random(1)); bnymellon.codekatas.deckofcards.list.immutable.var jdkHands = this.jdkDeck.dealHands(jdkShuffled, 5, 5); bnymellon.codekatas.deckofcards.list.immutable.var acHands = this.acDeck.dealHands(acShuffled, 5, 5); org.junit.Assert.assertEquals(jdkHands, acHands); } dealHands(org.eclipse.collections.api.stack.MutableStack, int, int) { return null; }
getRenderedFeatureFileContentNonEnglishTest() { java.lang.String expectedOutput = "@featureTag1\n" 0 + (((((((((((("@featureTag1\n" + "@featureTag2\n") + "@scenarioTag1\n" 8) + "@featureTag1\n" 1) + "@featureTag1\n" 3) + "@scenarioTag1\n") + "@scenarioTag1\n" 0) + "Scenario:<sp>scenarioName\n") + "scenarioDescription\n") + "@featureTag1\n" 4) + "@scenarioTag1\n" 5) + "@scenarioTag1\n" 7) + "#<sp>Generated<sp>by<sp>Cucable\n"); java.lang.String featureName = "@scenarioTag1\n" 2; java.lang.String featureDescription = "@scenarioTag1\n" 4; java.lang.String featureLanguage = "@featureTag1\n" 5; java.util.List < java.lang.String > featureTags = java.util.Arrays.asList("@featureTag1", "@featureTag2"); java.lang.String scenarioName = "@featureTag1\n" 2; java.lang.String scenarioDescription = "scenarioDescription"; java.util.List < com.trivago.vo.Step > backgroundSteps = java.util.Arrays.asList(new com.trivago.vo.Step("@scenarioTag1\n" 9, null, null), new com.trivago.vo.Step("@scenarioTag1\n" 1, null, null)); java.util.List < java.lang.String > scenarioTags = java.util.Arrays.asList("@scenarioTag1\n" 6, "@scenarioTag2"); java.lang.String featureFilePath = "@scenarioTag1\n" 3; com.trivago.vo.SingleScenario singleScenario = new com.trivago.vo.SingleScenario(featureName, featureFilePath, featureLanguage, featureDescription, scenarioName, scenarioDescription, featureTags, backgroundSteps); singleScenario.setScenarioTags(scenarioTags); java.lang.String renderedFeatureFileContent = featureFileContentRenderer.getRenderedFeatureFileContent(singleScenario); org.junit.Assert.assertThat(renderedFeatureFileContent, org.hamcrest.core.Is.is(expectedOutput)); } getRenderedFeatureFileContent(com.trivago.vo.SingleScenario) { return getRenderedFeatureFileContent(java.util.Collections.singletonList(singleScenario)); }
testRestartApp() { java.lang.String id = "application<sp>1"; org.apache.hadoop.yarn.appcatalog.controller.AppDetailsController ac = org.mockito.Mockito.mock(org.apache.hadoop.yarn.appcatalog.controller.AppDetailsController.class); org.apache.hadoop.yarn.service.api.records.Service yarnfile = new org.apache.hadoop.yarn.service.api.records.Service(); org.apache.hadoop.yarn.service.api.records.Component comp = new org.apache.hadoop.yarn.service.api.records.Component(); org.apache.hadoop.yarn.service.api.records.Container c = new org.apache.hadoop.yarn.service.api.records.Container(); c.setId("container-1"); java.util.List < org.apache.hadoop.yarn.service.api.records.Container > containers = new java.util.ArrayList < org.apache.hadoop.yarn.service.api.records.Container > (); containers.add(c); comp.setContainers(containers); yarnfile.addComponent(comp); javax.ws.rs.core.Response expected = javax.ws.rs.core.Response.ok().build(); when(ac.restartApp(id)).thenReturn(javax.ws.rs.core.Response.ok().build()); final javax.ws.rs.core.Response actual = ac.restartApp(id); org.junit.Assert.assertEquals(expected.getStatus(), actual.getStatus()); } getStatus() { return status; }
markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset() { try (final org.apache.commons.io.input.BoundedReader mr = new org.apache.commons.io.input.BoundedReader(sr, 3)) { mr.read(); mr.mark(3); mr.read(); mr.read(); org.junit.Assert.assertEquals((- 1), mr.read()); } } read() { if ((currentNumberOfBytes) <= 0) { throw new java.lang.IllegalStateException("No<sp>bytes<sp>available."); } final byte b = buffer[startOffset];-- (currentNumberOfBytes); if ((++ (startOffset)) == (buffer.length)) { startOffset = 0; } return b; }
testBuild() { org.lnu.is.domain.course.type.CourseType context = new org.lnu.is.domain.course.type.CourseType(); java.lang.String expected = "SELECT<sp>e<sp>FROM<sp>CourseType<sp>e<sp>WHERE<sp>e.status=:status<sp>AND<sp>e.crtUserGroup<sp>IN<sp> (:userGroups)<sp>"; org.lnu.is.pagination.MultiplePagedSearch < org.lnu.is.domain.course.type.CourseType > pagedSearch = new org.lnu.is.pagination.MultiplePagedSearch(); pagedSearch.setEntity(context); java.lang.String actualQuery = unit.build(pagedSearch); org.junit.Assert.assertEquals(expected, actualQuery); } setEntity(T) { this.entity = entity; }
testSizeCalc3() { ch.ethz.globis.phtree.PhTreeHelper.setAllocBatchSize(3); int[] results = new int[] { 0, 3, 3, 3, 6, 6, 6, 9, 9, 9, 12, 12, 12 }; for (int i = 0; i < (results.length); i++) { int size = ch.ethz.globis.phtree.util.BitsLong.calcArraySize((i * 64)); org.junit.Assert.assertEquals(results[i], size); } } calcArraySize(int) { int arraySize = (nBits + (ch.ethz.globis.phtree.PhTreeHelper.ALLOC_BATCH_SIZE_LONG)) > > > 6; int size = ch.ethz.globis.phtree.PhTreeHelper.ALLOC_BATCH_SIZE; arraySize = (arraySize / size) * size; return arraySize; }
testQueryByLocalDateTime_PositionalBinding() { com.jmethods.catatumbo.EntityManagerTest.em.deleteAll(com.jmethods.catatumbo.entities.LocalDateTimeField.class); com.jmethods.catatumbo.entities.LocalDateTimeField entity = new com.jmethods.catatumbo.entities.LocalDateTimeField(); java.time.LocalDateTime timestamp = java.time.LocalDateTime.of(2007, 1, 12, 10, 30, 3, 456789); entity.setTimestamp(timestamp); entity = com.jmethods.catatumbo.EntityManagerTest.em.insert(entity); java.lang.String query = "SELECT<sp>*<sp>FROM<sp>LocalDateTimeField<sp>WHERE<sp>timestamp=@1"; com.jmethods.catatumbo.EntityQueryRequest request = com.jmethods.catatumbo.EntityManagerTest.em.createEntityQueryRequest(query); request.addPositionalBindings(timestamp); com.jmethods.catatumbo.QueryResponse < com.jmethods.catatumbo.entities.LocalDateTimeField > response = com.jmethods.catatumbo.EntityManagerTest.em.executeEntityQueryRequest(com.jmethods.catatumbo.entities.LocalDateTimeField.class, request); java.util.List < com.jmethods.catatumbo.entities.LocalDateTimeField > entities = response.getResults(); System.out.println(entities); org.junit.Assert.assertTrue(((entities.size()) == 1)); } size() { return map.size(); }
testRequestScopeActive() { org.jboss.additional.testsuite.jdkall.past.eap_7.ejb.async.AsyncBean bean = lookup(org.jboss.additional.testsuite.jdkall.past.eap_7.ejb.async.AsyncBean.class); final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); final java.util.concurrent.Future < java.lang.Integer > future = bean.testRequestScopeActive(latch); latch.countDown(); int result = future.get(); org.junit.Assert.assertEquals(20, result); } testRequestScopeActive(java.util.concurrent.CountDownLatch) { latch.await(5, TimeUnit.SECONDS); requestScopedBean.setState(20); return new javax.ejb.AsyncResult < java.lang.Integer > (requestScopedBean.getState()); }
httpMethod() { context.setHttpMethod(ODataHttpMethod.GET.name()); org.junit.Assert.assertEquals(ODataHttpMethod.GET.name(), context.getHttpMethod()); } getHttpMethod() { return httpMethod; }
avoidOverZealousAbbreviations() { org.openscience.cdk.depict.Abbreviations factory = new org.openscience.cdk.depict.Abbreviations(); org.openscience.cdk.interfaces.IAtomContainer mol = org.openscience.cdk.depict.AbbreviationsTest.smi("Clc1ccccc1"); factory.add("*c1ccccc1<sp>Ph"); org.junit.Assert.assertThat(factory.apply(mol), org.hamcrest.CoreMatchers.is(0)); } apply(org.openscience.cdk.interfaces.IAtomContainer) { java.util.Set < org.openscience.cdk.interfaces.IBond > bonds = findBonds(molecule); molecule.setFlag(org.openscience.cdk.CDKConstants.ISAROMATIC, false); for (org.openscience.cdk.interfaces.IBond bond : molecule.bonds()) bond.setIsAromatic(false); for (org.openscience.cdk.interfaces.IAtom atom : molecule.atoms()) atom.setIsAromatic(false); for (final org.openscience.cdk.interfaces.IBond bond : bonds) { bond.setIsAromatic(true); bond.getBegin().setIsAromatic(true); bond.getEnd().setIsAromatic(true); } molecule.setFlag(org.openscience.cdk.CDKConstants.ISAROMATIC,(!(bonds.isEmpty()))); return !(bonds.isEmpty()); }
testWithDynamicClassPathWithPermissions() { com.picocontainer.classname.DefaultClassLoadingPicoContainer parent = new com.picocontainer.classname.DefaultClassLoadingPicoContainer(new com.picocontainer.behaviors.Caching()); java.io.Reader script = new java.io.StringReader(("" + (((((((((("<sp>builder<sp>=<sp>new<sp>com.picocontainer.script.groovy.GroovyNodeBuilder()\n" + "<sp>File<sp>testCompJar<sp>=<sp>com.picocontainer.script.TestHelper.getTestCompJarFile()\n") + "<sp>compJarPath<sp>=<sp>testCompJar.getCanonicalPath()\n") + "<sp>child<sp>=<sp>null\n") + "<sp>pico<sp>=<sp>builder.container<sp>{\n") + "<sp>classPathElement(path:compJarPath)<sp>{\n") + "<sp>File<sp>testCompJar<sp>=<sp>com.picocontainer.script.TestHelper.getTestCompJarFile()\n" 0) + "<sp>}\n") + "<sp>component(class:\"TestComp\")\n") + "<sp>File<sp>testCompJar<sp>=<sp>com.picocontainer.script.TestHelper.getTestCompJarFile()\n" 1) + ""))); com.picocontainer.MutablePicoContainer pico = ((com.picocontainer.MutablePicoContainer) (buildContainer(script, parent, com.picocontainer.script.groovy.GroovyNodeBuilderTestCase.ASSEMBLY_SCOPE))); org.junit.Assert.assertTrue(((pico.getComponents().size()) == 1)); } getComponents() { checkReadPermission(); return pico.getComponents(); }
should_extract_variable_from_angular_object_registry () { final java.lang.String noteId = "noteId"; final org.apache.zeppelin.display.AngularObjectRegistry registry = mock(org.apache.zeppelin.display.AngularObjectRegistry.class); final org.apache.zeppelin.notebook.Note note = mock(org.apache.zeppelin.notebook.Note.class); final java.util.Map < java.lang.String, org.apache.zeppelin.display.Input > inputs = new java.util.HashMap(); inputs.put("name", null); inputs.put("age", null); inputs.put("job", null); final java.lang.String scriptBody = "My<sp>name<sp>is<sp>${name}<sp>and<sp>I<sp>am<sp>${age=20}<sp>years<sp>old.<sp>" + "My<sp>occupation<sp>is<sp>${<sp>job<sp>=<sp>engineer<sp>|<sp>developer<sp>|<sp>artists}"; final org.apache.zeppelin.notebook.Paragraph paragraph = new org.apache.zeppelin.notebook.Paragraph(note, null, null, null); final java.lang.String paragraphId = paragraph.getId(); final org.apache.zeppelin.display.AngularObject nameAO = org.apache.zeppelin.display.AngularObjectBuilder.build("name", "DuyHai<sp>DOAN", noteId, paragraphId); final org.apache.zeppelin.display.AngularObject ageAO = org.apache.zeppelin.display.AngularObjectBuilder.build("age", 34, noteId, null); when(note.getId()).thenReturn(noteId); when(registry.get("name", noteId, paragraphId)).thenReturn(nameAO); when(registry.get("age", noteId, null)).thenReturn(ageAO); final java.lang.String expected = "My<sp>name<sp>is<sp>DuyHai<sp>DOAN<sp>and<sp>I<sp>am<sp>34<sp>years<sp>old.<sp>" + "My<sp>occupation<sp>is<sp>${<sp>job<sp>=<sp>engineer<sp>|<sp>developer<sp>|<sp>artists}"; final java.lang.String actual = paragraph.extractVariablesFromAngularRegistry (scriptBody, inputs, registry); verify(registry).get("name", noteId, paragraphId); verify(registry).get("age", noteId, null); org.junit.Assert.assertEquals(actual, expected); } get(java.lang.String, java.lang.String, java.lang.String) { synchronized(registry) { if (noteId == null) { noteId = org.apache.zeppelin.interpreter.InterpreterHookRegistry.GLOBAL_KEY; } addRepl(noteId, className); return registry.get(noteId).get(className).get(event); } }
matchingProperties_Simple() { java.util.Map < java.lang.String, org.apache.jackrabbit.oak.api.PropertyState > result = org.apache.jackrabbit.oak.plugins.document.bundlor.BundlorUtils.getMatchingProperties(create("a", "b", "c"), Matcher.NON_MATCHING); org.junit.Assert.assertTrue(result.isEmpty()); } isEmpty() { return(size) == 0; }
shouldConvertDoubleToLongCorrectly() { final java.lang.Long l = io.confluent.ksql.serde.util.SerdeUtils.toLong(1.0); org.junit.Assert.assertThat(l, org.hamcrest.CoreMatchers.equalTo(1L)); } toLong(java.lang.Object) { java.util.Objects.requireNonNull(object, "Object<sp>cannot<sp>be<sp>null"); if (object instanceof java.lang.Long) { return((java.lang.Long) (object)); } if (object instanceof java.lang.Number) { return((java.lang.Number) (object)).longValue(); } if (object instanceof java.lang.String) { try { return java.lang.Long.parseLong(((java.lang.String) (object))); } catch (final java.lang.NumberFormatException e) { throw new io.confluent.ksql.util.KsqlException((("Cannot<sp>convert<sp>" + object) + "<sp>to<sp>BIGINT."), e); } } throw new java.lang.IllegalArgumentException("This<sp>Object<sp>doesn't<sp>represent<sp>a<sp>long"); }
testCreateLinkToDotDotPrefix() { org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(testBaseDir1(), "file"); org.apache.hadoop.fs.Path dir = new org.apache.hadoop.fs.Path(testBaseDir1(), "test"); org.apache.hadoop.fs.Path link = new org.apache.hadoop.fs.Path(testBaseDir1(), "test/link"); org.apache.hadoop.fs.FileContextSymlinkBaseTest.createAndWriteFile(file); org.apache.hadoop.fs.FileContextSymlinkBaseTest.fc.mkdir(dir, org.apache.hadoop.fs.permission.FsPermission.getDefault(), false); org.apache.hadoop.fs.FileContextSymlinkBaseTest.fc.setWorkingDirectory(dir); org.apache.hadoop.fs.FileContextSymlinkBaseTest.fc.createSymlink(new org.apache.hadoop.fs.Path("../file"), link, false); org.apache.hadoop.fs.FileContextSymlinkBaseTest.readFile(link); org.junit.Assert.assertEquals(new org.apache.hadoop.fs.Path("../file"), org.apache.hadoop.fs.FileContextSymlinkBaseTest.fc.getLinkTarget(link)); } getLinkTarget(org.apache.hadoop.fs.Path) { return new org.apache.hadoop.fs.Path(dfs.getLinkTarget(getUriPath(p))); }
testContainsMainContentType() { org.apache.poi.xwpf.usermodel.XWPFDocument doc = org.apache.poi.xwpf.XWPFTestDataSamples.openSampleDocument("sample.docx"); org.apache.poi.openxml4j.opc.OPCPackage pack = doc.getPackage(); boolean found = false; for (org.apache.poi.openxml4j.opc.PackagePart part : pack.getParts()) { if (part.getContentType().equals(XWPFRelation.DOCUMENT.getContentType())) { found = true; } } org.junit.Assert.assertTrue(found); pack.close(); doc.close(); } getContentType() { return getPackagePart().getContentType(); }
testProductsWithLocationService() { com.aliyuncs.ecs.model.v20140526.DescribeRegionsRequest request = new com.aliyuncs.ecs.model.v20140526.DescribeRegionsRequest(); com.aliyuncs.ecs.model.v20140526.DescribeRegionsResponse response = this.client.getAcsResponse(request); org.junit.Assert.assertTrue(((response.getRegions().size()) > 0)); } getRegions() { return this.regions; }
testReadWriteCompositeWithAttributeProcessor() { init(new org.apache.tuscany.sca.assembly.xml.TestAttributeProcessor()); javax.xml.stream.XMLStreamReader reader = inputFactory.createXMLStreamReader(new java.io.StringReader(org.apache.tuscany.sca.assembly.xml.ReadWriteAnyAttributeTestCase.XML)); org.apache.tuscany.sca.assembly.Composite composite = ((org.apache.tuscany.sca.assembly.Composite) (staxProcessor.read(reader, context))); org.junit.Assert.assertNotNull(composite); reader.close(); verifyComposite(composite); java.io.ByteArrayOutputStream bos = new java.io.ByteArrayOutputStream(); staxProcessor.write(composite, bos, context); java.io.ByteArrayInputStream bis = new java.io.ByteArrayInputStream(bos.toByteArray()); composite = staxProcessor.read(bis, org.apache.tuscany.sca.assembly.Composite.class, context); verifyComposite(composite); } read(javax.xml.stream.XMLStreamReader, org.apache.tuscany.sca.contribution.processor.ProcessorContext) { org.apache.tuscany.sca.binding.ws.axis2.policy.configuration.Axis2ConfigParamPolicy policy = new org.apache.tuscany.sca.binding.ws.axis2.policy.configuration.Axis2ConfigParamPolicy(); int event = reader.getEventType(); javax.xml.namespace.QName name = null; org.apache.axiom.om.OMElement parameterElement = null; java.lang.String paramName = null; while (reader.hasNext()) { event = reader.getEventType(); switch(event) { case START_ELEMENT : { name = reader.getName(); if (org.apache.tuscany.sca.binding.ws.axis2.policy.configuration.Axis2ConfigParamPolicyProcessor.PARAMETER.equals(name.getLocalPart())) { paramName = reader.getAttributeValue(null, "name"); parameterElement = loadElement(reader); policy.getParamElements().put(paramName, parameterElement); } break; } } if (event == (END_ELEMENT)) { if (org.apache.tuscany.sca.binding.ws.axis2.policy.configuration.Axis2ConfigParamPolicyProcessor.AXIS2_CONFIG_PARAM_POLICY_QNAME.equals(reader.getName())) { break; } } if (reader.hasNext()) { reader.next(); } } return policy; }
testMoveConcurrentWithGetChild() { org.junit.Assume.assumeTrue("VCS<sp>read-committed<sp>semantics<sp>cannot<sp>enforce<sp>this", isDBS()); prepareDocsForMoveConcurrentWithGetChildren(); try { session.getChild(new org.nuxeo.ecm.core.api.PathRef("/folder"), "doc"); org.junit.Assert.fail("should<sp>not<sp>find<sp>child<sp>moved<sp>under<sp>/folder<sp>in<sp>another<sp>transaction"); } catch (org.nuxeo.ecm.core.api.DocumentNotFoundException e) { org.junit.Assert.assertEquals("doc", e.getMessage()); } } getMessage() { java.lang.String msg = ((getErrorMessage()) != null) ? (getErrorMessage()) + ".<sp>" : ""; msg += ((getInstallMessage()) != null) ? (getInstallMessage()) + ".<sp>" : ""; return msg + (super.getMessage()); }
