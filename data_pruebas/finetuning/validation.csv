target,src_fm_fc_ms_ff,src_fm_fc_dctx,src_fm_fc_dctx_priv,imports_focal_class,imports_test_class
"@Test public void internalFlush() { scenarioCellTextAreaDOMElementSpy.internalFlush(MULTIPART_VALUE); verify(eventBusMock, times(1)).fireEvent(isA(SetGridCellValueEvent.class)); }","ScenarioCellTextAreaDOMElement extends BaseDOMElement<String, TextArea> implements TakesValue<String>, Focusable { protected void internalFlush(final String value) { final int rowIndex = context.getRowIndex(); final int columnIndex = context.getColumnIndex(); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new SetGridCellValueEvent(((ScenarioGrid) gridWidget).getGridWidget(), rowIndex, columnIndex, value)); } public ScenarioCellTextAreaDOMElement(TextArea, GridLayer, GridWidget); public void init(); public void setScenarioGridCell(ScenarioGridCell); @Override public void initialise(GridBodyCellRenderContext); @Override public String getValue(); @Override public void setValue(String); @Override public int getTabIndex(); @Override public void setTabIndex(int); @Override public void setAccessKey(char); @Override public void setFocus(boolean); @Override public void flush(String); protected void internalFlush(String); @Override public void detach(); protected ScenarioGridCell scenarioGridCell; }","<FCTX>ScenarioCellTextAreaDOMElement extends BaseDOMElement<String, TextArea> implements TakesValue<String>, Focusable { protected void internalFlush(final String value) { final int rowIndex = context.getRowIndex(); final int columnIndex = context.getColumnIndex(); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new SetGridCellValueEvent(((ScenarioGrid) gridWidget).getGridWidget(), rowIndex, columnIndex, value)); } public ScenarioCellTextAreaDOMElement(TextArea, GridLayer, GridWidget); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioCellTextAreaDOMElement extends BaseDOMElement<String, TextArea> implements TakesValue<String>, Focusable { protected void internalFlush(final String value) { final int rowIndex = context.getRowIndex(); final int columnIndex = context.getColumnIndex(); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new SetGridCellValueEvent(((ScenarioGrid) gridWidget).getGridWidget(), rowIndex, columnIndex, value)); } public ScenarioCellTextAreaDOMElement(TextArea, GridLayer, GridWidget); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Objects;|import com.google.gwt.dom.client.Style;|import com.google.gwt.user.client.TakesValue;|import com.google.gwt.user.client.ui.Focusable;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridCell;|import org.gwtbootstrap3.client.ui.TextArea;|import org.uberfire.ext.wires.core.grids.client.widget.context.GridBodyCellRenderContext;|import org.uberfire.ext.wires.core.grids.client.widget.dom.impl.BaseDOMElement;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.Style;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import com.google.gwt.user.client.ui.SimplePanel;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.AbstractFactoriesTest;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridCell;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridCellValue;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MULTIPART_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TEST;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
@Test public void testDetachCancelEditMode() { scenarioCellTextAreaDOMElementSpy.detach(); verify(scenarioGridCellMock).setEditingMode(false); },"ScenarioCellTextAreaDOMElement extends BaseDOMElement<String, TextArea> implements TakesValue<String>, Focusable { @Override public void detach() { super.detach(); if (scenarioGridCell != null) { scenarioGridCell.setEditingMode(false); } } public ScenarioCellTextAreaDOMElement(TextArea, GridLayer, GridWidget); public void init(); public void setScenarioGridCell(ScenarioGridCell); @Override public void initialise(GridBodyCellRenderContext); @Override public String getValue(); @Override public void setValue(String); @Override public int getTabIndex(); @Override public void setTabIndex(int); @Override public void setAccessKey(char); @Override public void setFocus(boolean); @Override public void flush(String); protected void internalFlush(String); @Override public void detach(); protected ScenarioGridCell scenarioGridCell; }","<FCTX>ScenarioCellTextAreaDOMElement extends BaseDOMElement<String, TextArea> implements TakesValue<String>, Focusable { @Override public void detach() { super.detach(); if (scenarioGridCell != null) { scenarioGridCell.setEditingMode(false); } } public ScenarioCellTextAreaDOMElement(TextArea, GridLayer, GridWidget); }</FCTX> <ECTX>public class ScenarioGridCell extends BaseGridCell<String> { public ScenarioGridCell(ScenarioGridCellValue); public void setEditingMode(boolean); }</ECTX>","<FCTX>ScenarioCellTextAreaDOMElement extends BaseDOMElement<String, TextArea> implements TakesValue<String>, Focusable { @Override public void detach() { super.detach(); if (scenarioGridCell != null) { scenarioGridCell.setEditingMode(false); } } public ScenarioCellTextAreaDOMElement(TextArea, GridLayer, GridWidget); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioGridCell extends BaseGridCell<String> { public ScenarioGridCell(ScenarioGridCellValue); public void setEditingMode(boolean); }</ECTX>",import java.util.Objects;|import com.google.gwt.dom.client.Style;|import com.google.gwt.user.client.TakesValue;|import com.google.gwt.user.client.ui.Focusable;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridCell;|import org.gwtbootstrap3.client.ui.TextArea;|import org.uberfire.ext.wires.core.grids.client.widget.context.GridBodyCellRenderContext;|import org.uberfire.ext.wires.core.grids.client.widget.dom.impl.BaseDOMElement;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.Style;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import com.google.gwt.user.client.ui.SimplePanel;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.AbstractFactoriesTest;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridCell;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridCellValue;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MULTIPART_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TEST;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void testListDecisionTablesInPackage() { final Path path = mock(Path.class); resolvedPaths.add(makeNioPath(""file://project/src/main/resources/dtable1.gdst"")); resolvedPaths.add(makeNioPath(""file://project/src/main/resources/dtable2.gdst"")); resolvedPaths.add(makeNioPath(""file://project/src/main/resources/dtable3.gdst"")); resolvedPaths.add(makeNioPath(""file://project/src/main/resources/pupa.smurf"")); final List<Path> paths = service.listDecisionTablesInPackage(path); assertNotNull(paths); assertEquals(3, paths.size()); final Set<String> fileNames = new HashSet<>(); fileNames.addAll(paths.stream().collect(Collectors.mapping(Path::getFileName, Collectors.toSet()))); assertTrue(fileNames.contains(""dtable1.gdst"")); assertTrue(fileNames.contains(""dtable2.gdst"")); assertTrue(fileNames.contains(""dtable3.gdst"")); }","GuidedDecisionTableGraphEditorServiceImpl extends KieService<GuidedDecisionTableEditorGraphContent> implements GuidedDecisionTableGraphEditorService { @Override public List<Path> listDecisionTablesInPackage(final Path path) { try { final Package pkg = moduleService.resolvePackage(path); if (pkg == null) { return Collections.emptyList(); } final Path pkgPath = pkg.getPackageMainResourcesPath(); final org.uberfire.java.nio.file.Path nioPkgPath = Paths.convert(pkgPath); final List<Path> paths = findDecisionTables(nioPkgPath); return paths; } catch (Exception e) { throw ExceptionUtilities.handleException(e); } } public GuidedDecisionTableGraphEditorServiceImpl(); @Inject public GuidedDecisionTableGraphEditorServiceImpl(IOService, CopyService, DeleteService, RenameService, KieModuleService, VersionRecordService, GuidedDecisionTableEditorService, GuidedDecisionTableLinkManager, Event<ResourceOpenedEvent>, CommentedOptionFactory, GuidedDTableResourceTypeDefinition, DotFileFilter, SessionInfo); @Override public Path create(Path, String, GuidedDecisionTableEditorGraphModel, String); @Override public GuidedDecisionTableEditorGraphModel load(Path); @Override public GuidedDecisionTableEditorGraphContent loadContent(Path); @Override protected GuidedDecisionTableEditorGraphContent constructContent(Path, Overview); @Override public Path save(Path, GuidedDecisionTableEditorGraphModel, Metadata, String); @Override public void delete(Path, String); @Override public Path rename(Path, String, String); @Override public Path copy(Path, String, String); @Override public Path copy(Path, String, Path, String); @Override public List<Path> listDecisionTablesInPackage(Path); }","<FCTX>GuidedDecisionTableGraphEditorServiceImpl extends KieService<GuidedDecisionTableEditorGraphContent> implements GuidedDecisionTableGraphEditorService { @Override public List<Path> listDecisionTablesInPackage(final Path path) { try { final Package pkg = moduleService.resolvePackage(path); if (pkg == null) { return Collections.emptyList(); } final Path pkgPath = pkg.getPackageMainResourcesPath(); final org.uberfire.java.nio.file.Path nioPkgPath = Paths.convert(pkgPath); final List<Path> paths = findDecisionTables(nioPkgPath); return paths; } catch (Exception e) { throw ExceptionUtilities.handleException(e); } } public GuidedDecisionTableGraphEditorServiceImpl(); @Inject public GuidedDecisionTableGraphEditorServiceImpl(IOService, CopyService, DeleteService, RenameService, KieModuleService, VersionRecordService, GuidedDecisionTableEditorService, GuidedDecisionTableLinkManager, Event<ResourceOpenedEvent>, CommentedOptionFactory, GuidedDTableResourceTypeDefinition, DotFileFilter, SessionInfo); private List<Path> findDecisionTables(org.uberfire.java.nio.file.Path); private KieModuleService moduleService; }</FCTX> <ECTX></ECTX>","<FCTX>GuidedDecisionTableGraphEditorServiceImpl extends KieService<GuidedDecisionTableEditorGraphContent> implements GuidedDecisionTableGraphEditorService { @Override public List<Path> listDecisionTablesInPackage(final Path path) { try { final Package pkg = moduleService.resolvePackage(path); if (pkg == null) { return Collections.emptyList(); } final Path pkgPath = pkg.getPackageMainResourcesPath(); final org.uberfire.java.nio.file.Path nioPkgPath = Paths.convert(pkgPath); final List<Path> paths = findDecisionTables(nioPkgPath); return paths; } catch (Exception e) { throw ExceptionUtilities.handleException(e); } } public GuidedDecisionTableGraphEditorServiceImpl(); @Inject public GuidedDecisionTableGraphEditorServiceImpl(IOService, CopyService, DeleteService, RenameService, KieModuleService, VersionRecordService, GuidedDecisionTableEditorService, GuidedDecisionTableLinkManager, Event<ResourceOpenedEvent>, CommentedOptionFactory, GuidedDTableResourceTypeDefinition, DotFileFilter, SessionInfo); <PRIVATE_FCTX>private List<Path> findDecisionTables(org.uberfire.java.nio.file.Path); private KieModuleService moduleService;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.Collections;|import java.util.HashSet;|import java.util.List;|import java.util.Set;|import javax.enterprise.context.ApplicationScoped;|import javax.enterprise.event.Event;|import javax.inject.Inject;|import javax.inject.Named;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphContent;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableGraphEditorService;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableLinkManager;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.config.SafeSessionInfo;|import org.guvnor.common.services.backend.exceptions.ExceptionUtilities;|import org.guvnor.common.services.backend.file.DotFileFilter;|import org.guvnor.common.services.backend.util.CommentedOptionFactory;|import org.guvnor.common.services.project.model.Package;|import org.guvnor.common.services.shared.metadata.model.Metadata;|import org.guvnor.common.services.shared.metadata.model.Overview;|import org.jboss.errai.bus.server.annotations.Service;|import org.kie.workbench.common.services.backend.service.KieService;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.uberfire.backend.server.util.Paths;|import org.uberfire.backend.vfs.Path;|import org.uberfire.backend.vfs.PathFactory;|import org.uberfire.commons.data.Pair;|import org.uberfire.ext.editor.commons.backend.version.VersionRecordService;|import org.uberfire.ext.editor.commons.service.CopyService;|import org.uberfire.ext.editor.commons.service.DeleteService;|import org.uberfire.ext.editor.commons.service.RenameService;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.base.version.VersionRecord;|import org.uberfire.java.nio.file.DirectoryStream;|import org.uberfire.java.nio.file.FileAlreadyExistsException;|import org.uberfire.rpc.SessionInfo;|import org.uberfire.workbench.events.ResourceOpenedEvent;,import java.util.ArrayList;|import java.util.HashSet;|import java.util.List;|import java.util.Map;|import java.util.Set;|import java.util.stream.Collectors;|import javax.enterprise.event.Event;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphContent;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableLinkManager;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableGraphResourceTypeDefinition;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.drools.workbench.screens.workitems.service.WorkItemsEditorService;|import org.guvnor.common.services.backend.file.DotFileFilter;|import org.guvnor.common.services.backend.metadata.MetadataServerSideService;|import org.guvnor.common.services.backend.util.CommentedOptionFactory;|import org.guvnor.common.services.backend.validation.GenericValidator;|import org.guvnor.common.services.project.categories.Decision;|import org.guvnor.common.services.shared.metadata.model.Metadata;|import org.guvnor.common.services.shared.metadata.model.Overview;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.workbench.common.services.datamodel.backend.server.service.DataModelService;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.mockito.Mock;|import org.mockito.runners.MockitoJUnitRunner;|import org.uberfire.backend.vfs.Path;|import org.uberfire.backend.vfs.PathFactory;|import org.uberfire.ext.editor.commons.backend.version.VersionRecordService;|import org.uberfire.ext.editor.commons.service.CopyService;|import org.uberfire.ext.editor.commons.service.DeleteService;|import org.uberfire.ext.editor.commons.service.RenameService;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.Paths;|import org.uberfire.mocks.EventSourceMock;|import org.uberfire.rpc.SessionInfo;|import org.uberfire.workbench.events.ResourceOpenedEvent;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Mockito.any;|import static org.mockito.Mockito.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void flushNullString() { scenarioHeaderTextAreaDOMElement.flush(null); verify(eventBusMock, times(1)).fireEvent(isA(ScenarioNotificationEvent.class)); verify(scenarioHeaderTextAreaDOMElement, never()).internalFlush(any()); }","ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override public void flush(final String value) { if (Objects.isNull(value) || value.trim().isEmpty()) { ((ScenarioGrid) gridWidget).getEventBus().fireEvent( new ScenarioNotificationEvent( ScenarioSimulationEditorConstants.INSTANCE.headerTitleEmptyError(), NotificationEvent.NotificationType.ERROR)); return; } if (scenarioHeaderMetaData != null) { scenarioHeaderMetaData.setEditingMode(false); if (Objects.equals(value, scenarioHeaderMetaData.getTitle())) { return; } } internalFlush(value); } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); public void setScenarioHeaderMetaData(ScenarioHeaderMetaData); @Override public void flush(String); @Override protected void internalFlush(String); @Override public void detach(); }","<FCTX>ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override public void flush(final String value) { if (Objects.isNull(value) || value.trim().isEmpty()) { ((ScenarioGrid) gridWidget).getEventBus().fireEvent( new ScenarioNotificationEvent( ScenarioSimulationEditorConstants.INSTANCE.headerTitleEmptyError(), NotificationEvent.NotificationType.ERROR)); return; } if (scenarioHeaderMetaData != null) { scenarioHeaderMetaData.setEditingMode(false); if (Objects.equals(value, scenarioHeaderMetaData.getTitle())) { return; } } internalFlush(value); } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); private ScenarioHeaderMetaData scenarioHeaderMetaData; }</FCTX> <ECTX>public class ScenarioHeaderMetaData extends BaseHeaderMetaData { public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); public void setEditingMode(boolean); getTitle(); } public interface ScenarioSimulationEditorConstants extends Messages { }</ECTX>","<FCTX>ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override public void flush(final String value) { if (Objects.isNull(value) || value.trim().isEmpty()) { ((ScenarioGrid) gridWidget).getEventBus().fireEvent( new ScenarioNotificationEvent( ScenarioSimulationEditorConstants.INSTANCE.headerTitleEmptyError(), NotificationEvent.NotificationType.ERROR)); return; } if (scenarioHeaderMetaData != null) { scenarioHeaderMetaData.setEditingMode(false); if (Objects.equals(value, scenarioHeaderMetaData.getTitle())) { return; } } internalFlush(value); } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); <PRIVATE_FCTX>private ScenarioHeaderMetaData scenarioHeaderMetaData;</PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioHeaderMetaData extends BaseHeaderMetaData { public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); public void setEditingMode(boolean); getTitle(); } public interface ScenarioSimulationEditorConstants extends Messages { }</ECTX>",import java.util.Objects;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SetHeaderCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.gwtbootstrap3.client.ui.TextArea;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import org.uberfire.workbench.events.NotificationEvent;,import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SetHeaderCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.AbstractFactoriesTest;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridCell;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MULTIPART_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void flushEmptyString() { scenarioHeaderTextAreaDOMElement.flush(""""); verify(eventBusMock, times(1)).fireEvent(isA(ScenarioNotificationEvent.class)); verify(scenarioHeaderTextAreaDOMElement, never()).internalFlush(any()); }","ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override public void flush(final String value) { if (Objects.isNull(value) || value.trim().isEmpty()) { ((ScenarioGrid) gridWidget).getEventBus().fireEvent( new ScenarioNotificationEvent( ScenarioSimulationEditorConstants.INSTANCE.headerTitleEmptyError(), NotificationEvent.NotificationType.ERROR)); return; } if (scenarioHeaderMetaData != null) { scenarioHeaderMetaData.setEditingMode(false); if (Objects.equals(value, scenarioHeaderMetaData.getTitle())) { return; } } internalFlush(value); } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); public void setScenarioHeaderMetaData(ScenarioHeaderMetaData); @Override public void flush(String); @Override protected void internalFlush(String); @Override public void detach(); }","<FCTX>ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override public void flush(final String value) { if (Objects.isNull(value) || value.trim().isEmpty()) { ((ScenarioGrid) gridWidget).getEventBus().fireEvent( new ScenarioNotificationEvent( ScenarioSimulationEditorConstants.INSTANCE.headerTitleEmptyError(), NotificationEvent.NotificationType.ERROR)); return; } if (scenarioHeaderMetaData != null) { scenarioHeaderMetaData.setEditingMode(false); if (Objects.equals(value, scenarioHeaderMetaData.getTitle())) { return; } } internalFlush(value); } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); private ScenarioHeaderMetaData scenarioHeaderMetaData; }</FCTX> <ECTX>public class ScenarioHeaderMetaData extends BaseHeaderMetaData { public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); public void setEditingMode(boolean); getTitle(); } public interface ScenarioSimulationEditorConstants extends Messages { }</ECTX>","<FCTX>ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override public void flush(final String value) { if (Objects.isNull(value) || value.trim().isEmpty()) { ((ScenarioGrid) gridWidget).getEventBus().fireEvent( new ScenarioNotificationEvent( ScenarioSimulationEditorConstants.INSTANCE.headerTitleEmptyError(), NotificationEvent.NotificationType.ERROR)); return; } if (scenarioHeaderMetaData != null) { scenarioHeaderMetaData.setEditingMode(false); if (Objects.equals(value, scenarioHeaderMetaData.getTitle())) { return; } } internalFlush(value); } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); <PRIVATE_FCTX>private ScenarioHeaderMetaData scenarioHeaderMetaData;</PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioHeaderMetaData extends BaseHeaderMetaData { public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); public void setEditingMode(boolean); getTitle(); } public interface ScenarioSimulationEditorConstants extends Messages { }</ECTX>",import java.util.Objects;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SetHeaderCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.gwtbootstrap3.client.ui.TextArea;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import org.uberfire.workbench.events.NotificationEvent;,import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SetHeaderCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.AbstractFactoriesTest;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridCell;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MULTIPART_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void flushEmptyStringMultipleSpaces() { scenarioHeaderTextAreaDOMElement.flush("" ""); verify(eventBusMock, times(1)).fireEvent(isA(ScenarioNotificationEvent.class)); verify(scenarioHeaderTextAreaDOMElement, never()).internalFlush(any()); }","ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override public void flush(final String value) { if (Objects.isNull(value) || value.trim().isEmpty()) { ((ScenarioGrid) gridWidget).getEventBus().fireEvent( new ScenarioNotificationEvent( ScenarioSimulationEditorConstants.INSTANCE.headerTitleEmptyError(), NotificationEvent.NotificationType.ERROR)); return; } if (scenarioHeaderMetaData != null) { scenarioHeaderMetaData.setEditingMode(false); if (Objects.equals(value, scenarioHeaderMetaData.getTitle())) { return; } } internalFlush(value); } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); public void setScenarioHeaderMetaData(ScenarioHeaderMetaData); @Override public void flush(String); @Override protected void internalFlush(String); @Override public void detach(); }","<FCTX>ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override public void flush(final String value) { if (Objects.isNull(value) || value.trim().isEmpty()) { ((ScenarioGrid) gridWidget).getEventBus().fireEvent( new ScenarioNotificationEvent( ScenarioSimulationEditorConstants.INSTANCE.headerTitleEmptyError(), NotificationEvent.NotificationType.ERROR)); return; } if (scenarioHeaderMetaData != null) { scenarioHeaderMetaData.setEditingMode(false); if (Objects.equals(value, scenarioHeaderMetaData.getTitle())) { return; } } internalFlush(value); } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); private ScenarioHeaderMetaData scenarioHeaderMetaData; }</FCTX> <ECTX>public class ScenarioHeaderMetaData extends BaseHeaderMetaData { public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); public void setEditingMode(boolean); getTitle(); } public interface ScenarioSimulationEditorConstants extends Messages { }</ECTX>","<FCTX>ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override public void flush(final String value) { if (Objects.isNull(value) || value.trim().isEmpty()) { ((ScenarioGrid) gridWidget).getEventBus().fireEvent( new ScenarioNotificationEvent( ScenarioSimulationEditorConstants.INSTANCE.headerTitleEmptyError(), NotificationEvent.NotificationType.ERROR)); return; } if (scenarioHeaderMetaData != null) { scenarioHeaderMetaData.setEditingMode(false); if (Objects.equals(value, scenarioHeaderMetaData.getTitle())) { return; } } internalFlush(value); } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); <PRIVATE_FCTX>private ScenarioHeaderMetaData scenarioHeaderMetaData;</PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioHeaderMetaData extends BaseHeaderMetaData { public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); public void setEditingMode(boolean); getTitle(); } public interface ScenarioSimulationEditorConstants extends Messages { }</ECTX>",import java.util.Objects;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SetHeaderCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.gwtbootstrap3.client.ui.TextArea;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import org.uberfire.workbench.events.NotificationEvent;,import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SetHeaderCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.AbstractFactoriesTest;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridCell;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MULTIPART_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void internalFlushInvalidHeader() { scenarioHeaderTextAreaDOMElement.internalFlush(MULTIPART_VALUE); verify(scenarioGridModelMock, never()).updateHeader(eq(COLUMN_INDEX), eq(ROW_INDEX), eq(MULTIPART_VALUE)); }","ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override protected void internalFlush(final String value) { final int rowIndex = context.getRowIndex(); final int columnIndex = context.getColumnIndex(); try { boolean isInstanceHeader = scenarioHeaderMetaData != null && Objects.equals(scenarioHeaderMetaData.getMetadataType(), ScenarioHeaderMetaData.MetadataType.INSTANCE); boolean isPropertyHeader = scenarioHeaderMetaData != null && Objects.equals(scenarioHeaderMetaData.getMetadataType(), ScenarioHeaderMetaData.MetadataType.PROPERTY); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new SetHeaderCellValueEvent(((ScenarioGrid) gridWidget).getGridWidget(), rowIndex, columnIndex, value, isInstanceHeader, isPropertyHeader)); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new ReloadTestToolsEvent(true)); } catch (Exception e) { throw new IllegalArgumentException(new StringBuilder().append(""Impossible to update header ("").append(rowIndex).append("") of column "").append(columnIndex).toString(), e); } } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); public void setScenarioHeaderMetaData(ScenarioHeaderMetaData); @Override public void flush(String); @Override protected void internalFlush(String); @Override public void detach(); }","<FCTX>ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override protected void internalFlush(final String value) { final int rowIndex = context.getRowIndex(); final int columnIndex = context.getColumnIndex(); try { boolean isInstanceHeader = scenarioHeaderMetaData != null && Objects.equals(scenarioHeaderMetaData.getMetadataType(), ScenarioHeaderMetaData.MetadataType.INSTANCE); boolean isPropertyHeader = scenarioHeaderMetaData != null && Objects.equals(scenarioHeaderMetaData.getMetadataType(), ScenarioHeaderMetaData.MetadataType.PROPERTY); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new SetHeaderCellValueEvent(((ScenarioGrid) gridWidget).getGridWidget(), rowIndex, columnIndex, value, isInstanceHeader, isPropertyHeader)); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new ReloadTestToolsEvent(true)); } catch (Exception e) { throw new IllegalArgumentException(new StringBuilder().append(""Impossible to update header ("").append(rowIndex).append("") of column "").append(columnIndex).toString(), e); } } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); private ScenarioHeaderMetaData scenarioHeaderMetaData; }</FCTX> <ECTX>public class ScenarioHeaderMetaData extends BaseHeaderMetaData { public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); public MetadataType getMetadataType(); }</ECTX>","<FCTX>ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override protected void internalFlush(final String value) { final int rowIndex = context.getRowIndex(); final int columnIndex = context.getColumnIndex(); try { boolean isInstanceHeader = scenarioHeaderMetaData != null && Objects.equals(scenarioHeaderMetaData.getMetadataType(), ScenarioHeaderMetaData.MetadataType.INSTANCE); boolean isPropertyHeader = scenarioHeaderMetaData != null && Objects.equals(scenarioHeaderMetaData.getMetadataType(), ScenarioHeaderMetaData.MetadataType.PROPERTY); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new SetHeaderCellValueEvent(((ScenarioGrid) gridWidget).getGridWidget(), rowIndex, columnIndex, value, isInstanceHeader, isPropertyHeader)); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new ReloadTestToolsEvent(true)); } catch (Exception e) { throw new IllegalArgumentException(new StringBuilder().append(""Impossible to update header ("").append(rowIndex).append("") of column "").append(columnIndex).toString(), e); } } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); <PRIVATE_FCTX>private ScenarioHeaderMetaData scenarioHeaderMetaData;</PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioHeaderMetaData extends BaseHeaderMetaData { public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); public MetadataType getMetadataType(); }</ECTX>",import java.util.Objects;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SetHeaderCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.gwtbootstrap3.client.ui.TextArea;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import org.uberfire.workbench.events.NotificationEvent;,import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SetHeaderCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.AbstractFactoriesTest;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridCell;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MULTIPART_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void internalFlushValidHeader() { scenarioHeaderTextAreaDOMElement.internalFlush(MULTIPART_VALUE); verify(eventBusMock, times(1)).fireEvent(isA(SetHeaderCellValueEvent.class)); }","ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override protected void internalFlush(final String value) { final int rowIndex = context.getRowIndex(); final int columnIndex = context.getColumnIndex(); try { boolean isInstanceHeader = scenarioHeaderMetaData != null && Objects.equals(scenarioHeaderMetaData.getMetadataType(), ScenarioHeaderMetaData.MetadataType.INSTANCE); boolean isPropertyHeader = scenarioHeaderMetaData != null && Objects.equals(scenarioHeaderMetaData.getMetadataType(), ScenarioHeaderMetaData.MetadataType.PROPERTY); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new SetHeaderCellValueEvent(((ScenarioGrid) gridWidget).getGridWidget(), rowIndex, columnIndex, value, isInstanceHeader, isPropertyHeader)); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new ReloadTestToolsEvent(true)); } catch (Exception e) { throw new IllegalArgumentException(new StringBuilder().append(""Impossible to update header ("").append(rowIndex).append("") of column "").append(columnIndex).toString(), e); } } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); public void setScenarioHeaderMetaData(ScenarioHeaderMetaData); @Override public void flush(String); @Override protected void internalFlush(String); @Override public void detach(); }","<FCTX>ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override protected void internalFlush(final String value) { final int rowIndex = context.getRowIndex(); final int columnIndex = context.getColumnIndex(); try { boolean isInstanceHeader = scenarioHeaderMetaData != null && Objects.equals(scenarioHeaderMetaData.getMetadataType(), ScenarioHeaderMetaData.MetadataType.INSTANCE); boolean isPropertyHeader = scenarioHeaderMetaData != null && Objects.equals(scenarioHeaderMetaData.getMetadataType(), ScenarioHeaderMetaData.MetadataType.PROPERTY); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new SetHeaderCellValueEvent(((ScenarioGrid) gridWidget).getGridWidget(), rowIndex, columnIndex, value, isInstanceHeader, isPropertyHeader)); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new ReloadTestToolsEvent(true)); } catch (Exception e) { throw new IllegalArgumentException(new StringBuilder().append(""Impossible to update header ("").append(rowIndex).append("") of column "").append(columnIndex).toString(), e); } } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); private ScenarioHeaderMetaData scenarioHeaderMetaData; }</FCTX> <ECTX>public class ScenarioHeaderMetaData extends BaseHeaderMetaData { public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); public MetadataType getMetadataType(); }</ECTX>","<FCTX>ScenarioHeaderTextAreaDOMElement extends ScenarioCellTextAreaDOMElement { @Override protected void internalFlush(final String value) { final int rowIndex = context.getRowIndex(); final int columnIndex = context.getColumnIndex(); try { boolean isInstanceHeader = scenarioHeaderMetaData != null && Objects.equals(scenarioHeaderMetaData.getMetadataType(), ScenarioHeaderMetaData.MetadataType.INSTANCE); boolean isPropertyHeader = scenarioHeaderMetaData != null && Objects.equals(scenarioHeaderMetaData.getMetadataType(), ScenarioHeaderMetaData.MetadataType.PROPERTY); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new SetHeaderCellValueEvent(((ScenarioGrid) gridWidget).getGridWidget(), rowIndex, columnIndex, value, isInstanceHeader, isPropertyHeader)); ((ScenarioGrid) gridWidget).getEventBus().fireEvent(new ReloadTestToolsEvent(true)); } catch (Exception e) { throw new IllegalArgumentException(new StringBuilder().append(""Impossible to update header ("").append(rowIndex).append("") of column "").append(columnIndex).toString(), e); } } public ScenarioHeaderTextAreaDOMElement(TextArea, GridLayer, GridWidget); <PRIVATE_FCTX>private ScenarioHeaderMetaData scenarioHeaderMetaData;</PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioHeaderMetaData extends BaseHeaderMetaData { public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); public MetadataType getMetadataType(); }</ECTX>",import java.util.Objects;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SetHeaderCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.gwtbootstrap3.client.ui.TextArea;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import org.uberfire.workbench.events.NotificationEvent;,import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SetHeaderCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.AbstractFactoriesTest;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridCell;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MULTIPART_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void asWidget() { ((ScenarioSimulationDropdown) assetsDropdown).asWidget(); verify(((ScenarioSimulationDropdownView) viewMock), times(1)).asWidget(); }","ScenarioSimulationDropdown extends AbstractKieAssetsDropdown { public IsWidget asWidget() { return ((ScenarioSimulationDropdownView) view).asWidget(); } @Inject public ScenarioSimulationDropdown(ScenarioSimulationDropdownView, ScenarioSimulationAssetsDropdownProvider); public IsWidget asWidget(); final public static String BEAN_NAME = ""ScenarioDropdown""; }","<FCTX>ScenarioSimulationDropdown extends AbstractKieAssetsDropdown { public IsWidget asWidget() { return ((ScenarioSimulationDropdownView) view).asWidget(); } @Inject public ScenarioSimulationDropdown(ScenarioSimulationDropdownView, ScenarioSimulationAssetsDropdownProvider); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationDropdown extends AbstractKieAssetsDropdown { public IsWidget asWidget() { return ((ScenarioSimulationDropdownView) view).asWidget(); } @Inject public ScenarioSimulationDropdown(ScenarioSimulationDropdownView, ScenarioSimulationAssetsDropdownProvider); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import javax.enterprise.context.Dependent;|import javax.inject.Inject;|import javax.inject.Named;|import com.google.gwt.user.client.ui.IsWidget;|import org.kie.workbench.common.widgets.client.assets.dropdown.AbstractKieAssetsDropdown;,import com.google.gwtmockito.GwtMockitoTestRunner;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void loadAssets() { ((SettingsScenarioSimulationDropdown) assetsDropdown).loadAssets(LOWER_CASE_VALUE); verify(assetsDropdown, times(1)).clear(); verify(assetsDropdown, times(1)).initializeDropdown(); assertEquals(LOWER_CASE_VALUE, ((SettingsScenarioSimulationDropdown) assetsDropdown).currentValue); }","SettingsScenarioSimulationDropdown extends ScenarioSimulationDropdown { public void loadAssets(String currentValue) { Optional<KieAssetsDropdownItem> value = getValue(); if (!value.isPresent() || !Objects.equals(value.get().getValue(), currentValue)) { this.currentValue = currentValue; super.loadAssets(); } } @Inject public SettingsScenarioSimulationDropdown(SettingsScenarioSimulationDropdownView, ScenarioSimulationAssetsDropdownProvider); public void loadAssets(String); public void registerOnMissingValueHandler(Command); @Override protected void assetListConsumerMethod(List<KieAssetsDropdownItem>); protected boolean isValuePresentInKieAssets(String); public static final String BEAN_NAME = ""SettingsDropdown""; protected String currentValue; protected Command onMissingValueHandler = () -> { }; }","<FCTX>SettingsScenarioSimulationDropdown extends ScenarioSimulationDropdown { public void loadAssets(String currentValue) { Optional<KieAssetsDropdownItem> value = getValue(); if (!value.isPresent() || !Objects.equals(value.get().getValue(), currentValue)) { this.currentValue = currentValue; super.loadAssets(); } } @Inject public SettingsScenarioSimulationDropdown(SettingsScenarioSimulationDropdownView, ScenarioSimulationAssetsDropdownProvider); }</FCTX> <ECTX></ECTX>","<FCTX>SettingsScenarioSimulationDropdown extends ScenarioSimulationDropdown { public void loadAssets(String currentValue) { Optional<KieAssetsDropdownItem> value = getValue(); if (!value.isPresent() || !Objects.equals(value.get().getValue(), currentValue)) { this.currentValue = currentValue; super.loadAssets(); } } @Inject public SettingsScenarioSimulationDropdown(SettingsScenarioSimulationDropdownView, ScenarioSimulationAssetsDropdownProvider); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import javax.enterprise.context.Dependent;|import javax.inject.Inject;|import javax.inject.Named;|import org.kie.workbench.common.widgets.client.assets.dropdown.KieAssetsDropdownItem;|import org.uberfire.mvp.Command;,import com.google.gwtmockito.GwtMockitoTestRunner;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.workbench.common.widgets.client.assets.dropdown.KieAssetsDropdownItem;|import org.mockito.Mock;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DEFAULT_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void initialize() { ((SettingsScenarioSimulationDropdownView) assetsDropdownView).initialize(DEFAULT_VALUE); verify(dropdownMock, times(1)).selectpicker(eq(""val""), eq(DEFAULT_VALUE)); verify(dropdownMock, times(1)).selectpicker(eq(""show"")); }","SettingsScenarioSimulationDropdownView extends ScenarioSimulationDropdownView implements ScenarioSimulationDropdown.View { public void initialize(String value) { dropdown().selectpicker(""val"", value); dropdown().selectpicker(""show""); } @Inject public SettingsScenarioSimulationDropdownView(HTMLSelectElement, HTMLOptionElement, TranslationService); public void initialize(String); @Override public void clear(); final public static String BEAN_NAME = ""SettingsDropdownView""; }","<FCTX>SettingsScenarioSimulationDropdownView extends ScenarioSimulationDropdownView implements ScenarioSimulationDropdown.View { public void initialize(String value) { dropdown().selectpicker(""val"", value); dropdown().selectpicker(""show""); } @Inject public SettingsScenarioSimulationDropdownView(HTMLSelectElement, HTMLOptionElement, TranslationService); }</FCTX> <ECTX></ECTX>","<FCTX>SettingsScenarioSimulationDropdownView extends ScenarioSimulationDropdownView implements ScenarioSimulationDropdown.View { public void initialize(String value) { dropdown().selectpicker(""val"", value); dropdown().selectpicker(""show""); } @Inject public SettingsScenarioSimulationDropdownView(HTMLSelectElement, HTMLOptionElement, TranslationService); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import javax.enterprise.context.Dependent;|import javax.inject.Inject;|import javax.inject.Named;|import elemental2.dom.HTMLOptionElement;|import elemental2.dom.HTMLSelectElement;|import org.jboss.errai.ui.client.local.spi.TranslationService;|import org.jboss.errai.ui.shared.api.annotations.Templated;,import com.google.gwtmockito.GwtMockitoTestRunner;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.uberfire.client.views.pfly.selectpicker.JQuerySelectPicker;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DEFAULT_VALUE;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void clear() { assetsDropdownView.clear(); verify(assetsDropdownView, times(1)).refreshSelectPicker(); verify(nativeSelectMock, never()).appendChild(any()); }","SettingsScenarioSimulationDropdownView extends ScenarioSimulationDropdownView implements ScenarioSimulationDropdown.View { @Override public void clear() { removeChildren(nativeSelect); refreshSelectPicker(); } @Inject public SettingsScenarioSimulationDropdownView(HTMLSelectElement, HTMLOptionElement, TranslationService); public void initialize(String); @Override public void clear(); final public static String BEAN_NAME = ""SettingsDropdownView""; }","<FCTX>SettingsScenarioSimulationDropdownView extends ScenarioSimulationDropdownView implements ScenarioSimulationDropdown.View { @Override public void clear() { removeChildren(nativeSelect); refreshSelectPicker(); } @Inject public SettingsScenarioSimulationDropdownView(HTMLSelectElement, HTMLOptionElement, TranslationService); }</FCTX> <ECTX></ECTX>","<FCTX>SettingsScenarioSimulationDropdownView extends ScenarioSimulationDropdownView implements ScenarioSimulationDropdown.View { @Override public void clear() { removeChildren(nativeSelect); refreshSelectPicker(); } @Inject public SettingsScenarioSimulationDropdownView(HTMLSelectElement, HTMLOptionElement, TranslationService); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import javax.enterprise.context.Dependent;|import javax.inject.Inject;|import javax.inject.Named;|import elemental2.dom.HTMLOptionElement;|import elemental2.dom.HTMLSelectElement;|import org.jboss.errai.ui.client.local.spi.TranslationService;|import org.jboss.errai.ui.shared.api.annotations.Templated;,import com.google.gwtmockito.GwtMockitoTestRunner;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.uberfire.client.views.pfly.selectpicker.JQuerySelectPicker;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DEFAULT_VALUE;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
@Test public void initMenu() { assertNull(abstractColumnMenuPresenter.columnContextLIElement); assertNull(abstractColumnMenuPresenter.insertColumnLeftLIElement); assertNull(abstractColumnMenuPresenter.insertColumnRightLIElement); assertNull(abstractColumnMenuPresenter.deleteColumnInstanceLIElement); assertNull(abstractColumnMenuPresenter.duplicateInstanceLIElement); abstractColumnMenuPresenter.initMenu(); assertNotNull(abstractColumnMenuPresenter.columnContextLIElement); assertNotNull(abstractColumnMenuPresenter.insertColumnLeftLIElement); assertNotNull(abstractColumnMenuPresenter.insertColumnRightLIElement); assertNotNull(abstractColumnMenuPresenter.deleteColumnInstanceLIElement); assertNotNull(abstractColumnMenuPresenter.duplicateInstanceLIElement); },"AbstractColumnMenuPresenter extends AbstractHeaderMenuPresenter { @Override public void initMenu() { columnContextLIElement = addMenuItem(COLUMNCONTEXTMENU_COLUMN, COLUMNCONTEXTMENU_LABEL, COLUMNCONTEXTMENU_I18N); insertColumnLeftLIElement = addExecutableMenuItem(COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT, constants.insertColumnLeft(), ""insertColumnLeft""); insertColumnRightLIElement = addExecutableMenuItem(COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT, constants.insertColumnRight(), ""insertColumnRight""); deleteColumnInstanceLIElement = addExecutableMenuItem(COLUMNCONTEXTMENU_DELETE_COLUMN, constants.deleteColumn(), ""deleteColumn""); duplicateInstanceLIElement = addExecutableMenuItem(COLUMNCONTEXTMENU_DUPLICATE_INSTANCE, constants.duplicateInstance(), ""duplicateInstance""); super.initMenu(); } @Override public void initMenu(); public void show(GridWidget, int, int, int, String, boolean, boolean); protected String COLUMNCONTEXTMENU_COLUMN; protected String COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT; protected String COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT; protected String COLUMNCONTEXTMENU_DELETE_COLUMN; protected String COLUMNCONTEXTMENU_DELETE_INSTANCE; protected String COLUMNCONTEXTMENU_DUPLICATE_INSTANCE; protected String COLUMNCONTEXTMENU_LABEL; protected String COLUMNCONTEXTMENU_I18N; protected LIElement insertColumnLeftLIElement; protected LIElement insertColumnRightLIElement; protected LIElement deleteColumnInstanceLIElement; protected LIElement duplicateInstanceLIElement; protected LIElement columnContextLIElement; }","<FCTX>AbstractColumnMenuPresenter extends AbstractHeaderMenuPresenter { @Override public void initMenu() { columnContextLIElement = addMenuItem(COLUMNCONTEXTMENU_COLUMN, COLUMNCONTEXTMENU_LABEL, COLUMNCONTEXTMENU_I18N); insertColumnLeftLIElement = addExecutableMenuItem(COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT, constants.insertColumnLeft(), ""insertColumnLeft""); insertColumnRightLIElement = addExecutableMenuItem(COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT, constants.insertColumnRight(), ""insertColumnRight""); deleteColumnInstanceLIElement = addExecutableMenuItem(COLUMNCONTEXTMENU_DELETE_COLUMN, constants.deleteColumn(), ""deleteColumn""); duplicateInstanceLIElement = addExecutableMenuItem(COLUMNCONTEXTMENU_DUPLICATE_INSTANCE, constants.duplicateInstance(), ""duplicateInstance""); super.initMenu(); } }</FCTX> <ECTX></ECTX>","<FCTX>AbstractColumnMenuPresenter extends AbstractHeaderMenuPresenter { @Override public void initMenu() { columnContextLIElement = addMenuItem(COLUMNCONTEXTMENU_COLUMN, COLUMNCONTEXTMENU_LABEL, COLUMNCONTEXTMENU_I18N); insertColumnLeftLIElement = addExecutableMenuItem(COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT, constants.insertColumnLeft(), ""insertColumnLeft""); insertColumnRightLIElement = addExecutableMenuItem(COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT, constants.insertColumnRight(), ""insertColumnRight""); deleteColumnInstanceLIElement = addExecutableMenuItem(COLUMNCONTEXTMENU_DELETE_COLUMN, constants.deleteColumn(), ""deleteColumn""); duplicateInstanceLIElement = addExecutableMenuItem(COLUMNCONTEXTMENU_DUPLICATE_INSTANCE, constants.duplicateInstance(), ""duplicateInstance""); super.initMenu(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Objects;|import com.google.gwt.dom.client.LIElement;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.DeleteColumnEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.DuplicateInstanceEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.InsertColumnEvent;,import java.util.Objects;|import com.google.gwt.dom.client.LIElement;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.DeleteColumnEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.DuplicateInstanceEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.InsertColumnEvent;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void testListDecisionTablesInPackageExcludesDotFiles() { final Path path = mock(Path.class); resolvedPaths.add(makeNioPath(""file://project/src/main/resources/dtable1.gdst"")); resolvedPaths.add(makeNioPath(""file://project/src/main/resources/.dtable1.gdst"")); final List<Path> paths = service.listDecisionTablesInPackage(path); assertNotNull(paths); assertEquals(1, paths.size()); final Set<String> fileNames = new HashSet<>(); fileNames.addAll(paths.stream().collect(Collectors.mapping(Path::getFileName, Collectors.toSet()))); assertTrue(fileNames.contains(""dtable1.gdst"")); }","GuidedDecisionTableGraphEditorServiceImpl extends KieService<GuidedDecisionTableEditorGraphContent> implements GuidedDecisionTableGraphEditorService { @Override public List<Path> listDecisionTablesInPackage(final Path path) { try { final Package pkg = moduleService.resolvePackage(path); if (pkg == null) { return Collections.emptyList(); } final Path pkgPath = pkg.getPackageMainResourcesPath(); final org.uberfire.java.nio.file.Path nioPkgPath = Paths.convert(pkgPath); final List<Path> paths = findDecisionTables(nioPkgPath); return paths; } catch (Exception e) { throw ExceptionUtilities.handleException(e); } } public GuidedDecisionTableGraphEditorServiceImpl(); @Inject public GuidedDecisionTableGraphEditorServiceImpl(IOService, CopyService, DeleteService, RenameService, KieModuleService, VersionRecordService, GuidedDecisionTableEditorService, GuidedDecisionTableLinkManager, Event<ResourceOpenedEvent>, CommentedOptionFactory, GuidedDTableResourceTypeDefinition, DotFileFilter, SessionInfo); @Override public Path create(Path, String, GuidedDecisionTableEditorGraphModel, String); @Override public GuidedDecisionTableEditorGraphModel load(Path); @Override public GuidedDecisionTableEditorGraphContent loadContent(Path); @Override protected GuidedDecisionTableEditorGraphContent constructContent(Path, Overview); @Override public Path save(Path, GuidedDecisionTableEditorGraphModel, Metadata, String); @Override public void delete(Path, String); @Override public Path rename(Path, String, String); @Override public Path copy(Path, String, String); @Override public Path copy(Path, String, Path, String); @Override public List<Path> listDecisionTablesInPackage(Path); }","<FCTX>GuidedDecisionTableGraphEditorServiceImpl extends KieService<GuidedDecisionTableEditorGraphContent> implements GuidedDecisionTableGraphEditorService { @Override public List<Path> listDecisionTablesInPackage(final Path path) { try { final Package pkg = moduleService.resolvePackage(path); if (pkg == null) { return Collections.emptyList(); } final Path pkgPath = pkg.getPackageMainResourcesPath(); final org.uberfire.java.nio.file.Path nioPkgPath = Paths.convert(pkgPath); final List<Path> paths = findDecisionTables(nioPkgPath); return paths; } catch (Exception e) { throw ExceptionUtilities.handleException(e); } } public GuidedDecisionTableGraphEditorServiceImpl(); @Inject public GuidedDecisionTableGraphEditorServiceImpl(IOService, CopyService, DeleteService, RenameService, KieModuleService, VersionRecordService, GuidedDecisionTableEditorService, GuidedDecisionTableLinkManager, Event<ResourceOpenedEvent>, CommentedOptionFactory, GuidedDTableResourceTypeDefinition, DotFileFilter, SessionInfo); private List<Path> findDecisionTables(org.uberfire.java.nio.file.Path); private KieModuleService moduleService; }</FCTX> <ECTX></ECTX>","<FCTX>GuidedDecisionTableGraphEditorServiceImpl extends KieService<GuidedDecisionTableEditorGraphContent> implements GuidedDecisionTableGraphEditorService { @Override public List<Path> listDecisionTablesInPackage(final Path path) { try { final Package pkg = moduleService.resolvePackage(path); if (pkg == null) { return Collections.emptyList(); } final Path pkgPath = pkg.getPackageMainResourcesPath(); final org.uberfire.java.nio.file.Path nioPkgPath = Paths.convert(pkgPath); final List<Path> paths = findDecisionTables(nioPkgPath); return paths; } catch (Exception e) { throw ExceptionUtilities.handleException(e); } } public GuidedDecisionTableGraphEditorServiceImpl(); @Inject public GuidedDecisionTableGraphEditorServiceImpl(IOService, CopyService, DeleteService, RenameService, KieModuleService, VersionRecordService, GuidedDecisionTableEditorService, GuidedDecisionTableLinkManager, Event<ResourceOpenedEvent>, CommentedOptionFactory, GuidedDTableResourceTypeDefinition, DotFileFilter, SessionInfo); <PRIVATE_FCTX>private List<Path> findDecisionTables(org.uberfire.java.nio.file.Path); private KieModuleService moduleService;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.Collections;|import java.util.HashSet;|import java.util.List;|import java.util.Set;|import javax.enterprise.context.ApplicationScoped;|import javax.enterprise.event.Event;|import javax.inject.Inject;|import javax.inject.Named;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphContent;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableGraphEditorService;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableLinkManager;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.config.SafeSessionInfo;|import org.guvnor.common.services.backend.exceptions.ExceptionUtilities;|import org.guvnor.common.services.backend.file.DotFileFilter;|import org.guvnor.common.services.backend.util.CommentedOptionFactory;|import org.guvnor.common.services.project.model.Package;|import org.guvnor.common.services.shared.metadata.model.Metadata;|import org.guvnor.common.services.shared.metadata.model.Overview;|import org.jboss.errai.bus.server.annotations.Service;|import org.kie.workbench.common.services.backend.service.KieService;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.uberfire.backend.server.util.Paths;|import org.uberfire.backend.vfs.Path;|import org.uberfire.backend.vfs.PathFactory;|import org.uberfire.commons.data.Pair;|import org.uberfire.ext.editor.commons.backend.version.VersionRecordService;|import org.uberfire.ext.editor.commons.service.CopyService;|import org.uberfire.ext.editor.commons.service.DeleteService;|import org.uberfire.ext.editor.commons.service.RenameService;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.base.version.VersionRecord;|import org.uberfire.java.nio.file.DirectoryStream;|import org.uberfire.java.nio.file.FileAlreadyExistsException;|import org.uberfire.rpc.SessionInfo;|import org.uberfire.workbench.events.ResourceOpenedEvent;,import java.util.ArrayList;|import java.util.HashSet;|import java.util.List;|import java.util.Map;|import java.util.Set;|import java.util.stream.Collectors;|import javax.enterprise.event.Event;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphContent;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableLinkManager;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableGraphResourceTypeDefinition;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.drools.workbench.screens.workitems.service.WorkItemsEditorService;|import org.guvnor.common.services.backend.file.DotFileFilter;|import org.guvnor.common.services.backend.metadata.MetadataServerSideService;|import org.guvnor.common.services.backend.util.CommentedOptionFactory;|import org.guvnor.common.services.backend.validation.GenericValidator;|import org.guvnor.common.services.project.categories.Decision;|import org.guvnor.common.services.shared.metadata.model.Metadata;|import org.guvnor.common.services.shared.metadata.model.Overview;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.workbench.common.services.datamodel.backend.server.service.DataModelService;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.mockito.Mock;|import org.mockito.runners.MockitoJUnitRunner;|import org.uberfire.backend.vfs.Path;|import org.uberfire.backend.vfs.PathFactory;|import org.uberfire.ext.editor.commons.backend.version.VersionRecordService;|import org.uberfire.ext.editor.commons.service.CopyService;|import org.uberfire.ext.editor.commons.service.DeleteService;|import org.uberfire.ext.editor.commons.service.RenameService;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.Paths;|import org.uberfire.mocks.EventSourceMock;|import org.uberfire.rpc.SessionInfo;|import org.uberfire.workbench.events.ResourceOpenedEvent;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Mockito.any;|import static org.mockito.Mockito.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void initialise() { baseMenu.initialise(); verify(viewMock, times(1)).init(baseMenu); }","BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @PostConstruct @Override public void initialise() { view.init(this); executableMenuItemPresenter.init(this); } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @PostConstruct @Override public void initialise() { view.init(this); executableMenuItemPresenter.init(this); } }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { init(unknownType); } public class ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public void init(BaseMenu); }</ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @PostConstruct @Override public void initialise() { view.init(this); executableMenuItemPresenter.init(this); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { init(unknownType); } public class ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public void init(BaseMenu); }</ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void addMenuItem() { String id = ""TEST-ID""; String label = ""TEST-LABEL""; String i18n = ""TEST-i18n""; baseMenu.addMenuItem(id, label, i18n); verify(contextMenuDropdownMock, times(1)).appendChild(menuItemPresenterMock.getLabelMenuElement(id, label)); }","BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public LIElement addMenuItem(String id, String label, String i18n) { final LIElement toReturn = menuItemPresenter.getLabelMenuElement(id, label); view.getContextMenuDropdown().appendChild(toReturn); return toReturn; } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public LIElement addMenuItem(String id, String label, String i18n) { final LIElement toReturn = menuItemPresenter.getLabelMenuElement(id, label); view.getContextMenuDropdown().appendChild(toReturn); return toReturn; } }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { UListElement getContextMenuDropdown(); } public class MenuItemPresenter implements MenuItemView.Presenter { @Override public LIElement getLabelMenuElement(String, String); }</ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public LIElement addMenuItem(String id, String label, String i18n) { final LIElement toReturn = menuItemPresenter.getLabelMenuElement(id, label); view.getContextMenuDropdown().appendChild(toReturn); return toReturn; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { UListElement getContextMenuDropdown(); } public class MenuItemPresenter implements MenuItemView.Presenter { @Override public LIElement getLabelMenuElement(String, String); }</ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void addExecutableMenuItemWithEvent() { Event mockEvent = mock(Event.class); String id = ""TEST-ID""; String label = ""TEST-LABEL""; String i18n = ""TEST-i18n""; baseMenu.addExecutableMenuItem(id, label, i18n, mockEvent); verify(contextMenuDropdownMock, times(1)).appendChild(executableMenuItemPresenterMock.getLExecutableMenuElement(id, label, mockEvent)); }","BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public LIElement addExecutableMenuItem(String id, String label, String i18n, Event event) { final LIElement toReturn = executableMenuItemPresenter.getLExecutableMenuElement(id, label, event); view.getContextMenuDropdown().appendChild(toReturn); return toReturn; } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public LIElement addExecutableMenuItem(String id, String label, String i18n, Event event) { final LIElement toReturn = executableMenuItemPresenter.getLExecutableMenuElement(id, label, event); view.getContextMenuDropdown().appendChild(toReturn); return toReturn; } }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { UListElement getContextMenuDropdown(); } public class ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public LIElement getLExecutableMenuElement(String, String, Event); }</ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public LIElement addExecutableMenuItem(String id, String label, String i18n, Event event) { final LIElement toReturn = executableMenuItemPresenter.getLExecutableMenuElement(id, label, event); view.getContextMenuDropdown().appendChild(toReturn); return toReturn; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { UListElement getContextMenuDropdown(); } public class ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public LIElement getLExecutableMenuElement(String, String, Event); }</ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void addExecutableMenuItemWithoutEvent() { String id = ""TEST-ID""; String label = ""TEST-LABEL""; String i18n = ""TEST-i18n""; baseMenu.addExecutableMenuItem(id, label, i18n); verify(contextMenuDropdownMock, times(1)).appendChild(executableMenuItemPresenterMock.getLExecutableMenuElement(id, label)); }","BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public LIElement addExecutableMenuItem(String id, String label, String i18n) { LIElement toReturn = executableMenuItemPresenter.getLExecutableMenuElement(id, label); view.getContextMenuDropdown().appendChild(toReturn); return toReturn; } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public LIElement addExecutableMenuItem(String id, String label, String i18n) { LIElement toReturn = executableMenuItemPresenter.getLExecutableMenuElement(id, label); view.getContextMenuDropdown().appendChild(toReturn); return toReturn; } }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { UListElement getContextMenuDropdown(); } public class ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public LIElement getLExecutableMenuElement(String, String); }</ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public LIElement addExecutableMenuItem(String id, String label, String i18n) { LIElement toReturn = executableMenuItemPresenter.getLExecutableMenuElement(id, label); view.getContextMenuDropdown().appendChild(toReturn); return toReturn; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { UListElement getContextMenuDropdown(); } public class ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public LIElement getLExecutableMenuElement(String, String); }</ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void removeMenuItem() { LIElement toRemoveMock = mock(LIElement.class); baseMenu.removeMenuItem(toRemoveMock); verify(contextMenuDropdownMock, times(1)).removeChild(eq(toRemoveMock)); }","BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void removeMenuItem(LIElement toRemove) { view.getContextMenuDropdown().removeChild(toRemove); } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void removeMenuItem(LIElement toRemove) { view.getContextMenuDropdown().removeChild(toRemove); } }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { UListElement getContextMenuDropdown(); }</ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void removeMenuItem(LIElement toRemove) { view.getContextMenuDropdown().removeChild(toRemove); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { UListElement getContextMenuDropdown(); }</ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void mapEvent() { LIElement executableMenuItemMock = mock(LIElement.class); Event toBeMappedMock = mock(Event.class); baseMenu.mapEvent(executableMenuItemMock, toBeMappedMock); verify(executableMenuItemPresenterMock, times(1)).mapEvent(eq(executableMenuItemMock), eq(toBeMappedMock)); }","BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void mapEvent(LIElement executableMenuItem, Event toBeMapped) { executableMenuItemPresenter.mapEvent(executableMenuItem, toBeMapped); } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void mapEvent(LIElement executableMenuItem, Event toBeMapped) { executableMenuItemPresenter.mapEvent(executableMenuItem, toBeMapped); } }</FCTX> <ECTX>public class ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public void mapEvent(LIElement, Event); }</ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void mapEvent(LIElement executableMenuItem, Event toBeMapped) { executableMenuItemPresenter.mapEvent(executableMenuItem, toBeMapped); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public void mapEvent(LIElement, Event); }</ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void asWidget() { baseMenu.asWidget(); verify(viewMock, times(1)).asWidget(); }","BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public Widget asWidget() { return view.asWidget(); } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public Widget asWidget() { return view.asWidget(); } }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { asWidget(); }</ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public Widget asWidget() { return view.asWidget(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { asWidget(); }</ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void show() { int x = 10; int y = 20; baseMenu.show(x, y); verify(baseMenu, times(1)).hide(); verify(styleMock, times(1)).setLeft(x, Style.Unit.PX); verify(styleMock, times(1)).setTop(y, Style.Unit.PX); verify(styleMock, times(1)).setDisplay(Style.Display.BLOCK); }","BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void show(final int mx, final int my) { hide(); getRootPanel().add(this); view.getContextMenuDropdown().getStyle().setLeft(mx, Style.Unit.PX); view.getContextMenuDropdown().getStyle().setTop(my, Style.Unit.PX); view.getContextMenuDropdown().getStyle().setDisplay(Style.Display.BLOCK); } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void show(final int mx, final int my) { hide(); getRootPanel().add(this); view.getContextMenuDropdown().getStyle().setLeft(mx, Style.Unit.PX); view.getContextMenuDropdown().getStyle().setTop(my, Style.Unit.PX); view.getContextMenuDropdown().getStyle().setDisplay(Style.Display.BLOCK); } }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { UListElement getContextMenuDropdown(); }</ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void show(final int mx, final int my) { hide(); getRootPanel().add(this); view.getContextMenuDropdown().getStyle().setLeft(mx, Style.Unit.PX); view.getContextMenuDropdown().getStyle().setTop(my, Style.Unit.PX); view.getContextMenuDropdown().getStyle().setDisplay(Style.Display.BLOCK); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { UListElement getContextMenuDropdown(); }</ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void hide() { when(rootPanelMock.getWidgetIndex(viewMock)).thenReturn(1); baseMenu.hide(); verify(baseMenu, times(1)).isShown(); verify(styleMock, times(1)).setDisplay(Style.Display.NONE); when(rootPanelMock.getWidgetIndex(viewMock)).thenReturn(-1); reset(baseMenu); reset(styleMock); baseMenu.hide(); verify(baseMenu, times(1)).isShown(); verify(styleMock, times(0)).setDisplay(Style.Display.NONE); }","BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void hide() { if (isShown()) { getRootPanel().remove(this); view.getContextMenuDropdown().getStyle().setDisplay(Style.Display.NONE); } } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void hide() { if (isShown()) { getRootPanel().remove(this); view.getContextMenuDropdown().getStyle().setDisplay(Style.Display.NONE); } } }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { UListElement getContextMenuDropdown(); }</ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void hide() { if (isShown()) { getRootPanel().remove(this); view.getContextMenuDropdown().getStyle().setDisplay(Style.Display.NONE); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface BaseMenuView<M extends BaseMenu> extends UberView<M> { UListElement getContextMenuDropdown(); }</ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
@Test public void getView() { BaseMenuView retrieved = baseMenu.getView(); assertNotNull(retrieved); },"BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public BaseMenuView getView() { return view; } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public BaseMenuView getView() { return view; } }</FCTX> <ECTX></ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public BaseMenuView getView() { return view; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void useFullClassNameAndOnlyTheClassName() { final GuidedDecisionTable52 model = new GuidedDecisionTable52(); model.getImports().addImport(new Import(""org.test.AnotherPerson"")); model.getImports().addImport(new Import(""org.test.Person"")); final Pattern52 pattern52 = mock(Pattern52.class); doReturn(""Person"").when(pattern52).getFactType(); model.getConditions().add(pattern52); final Set<String> consumedModelClasses = new GuidedDecisionTableModelVisitor(model).getConsumedModelClasses(); assertTrue(consumedModelClasses.contains(""org.test.Person"")); }",GuidedDecisionTableModelVisitor { public Set<String> getConsumedModelClasses() { final Set<String> factTypes = new HashSet<String>(); for (CompositeColumn<?> cc : model.getConditions()) { if (cc instanceof BRLConditionColumn) { final List<IPattern> definition = ((BRLConditionColumn) cc).getDefinition(); factTypes.addAll(getConditionFactTypesFromRuleModel(definition)); } else if (cc instanceof Pattern52) { factTypes.add(((Pattern52) cc).getFactType()); } } for (ActionCol52 c : model.getActionCols()) { if (c instanceof BRLActionColumn) { final List<IAction> definition = ((BRLActionColumn) c).getDefinition(); factTypes.addAll(getActionFactTypesFromRuleModel(definition)); } else if (c instanceof ActionInsertFactCol52) { factTypes.add(((ActionInsertFactCol52) c).getFactType()); } } final Set<String> fullyQualifiedClassNames = new HashSet<String>(); for (String factType : factTypes) { fullyQualifiedClassNames.add(convertToFullyQualifiedClassName(factType)); } return fullyQualifiedClassNames; } public GuidedDecisionTableModelVisitor(GuidedDecisionTable52); public Set<String> getConsumedModelClasses(); },<FCTX>GuidedDecisionTableModelVisitor { public Set<String> getConsumedModelClasses() { final Set<String> factTypes = new HashSet<String>(); for (CompositeColumn<?> cc : model.getConditions()) { if (cc instanceof BRLConditionColumn) { final List<IPattern> definition = ((BRLConditionColumn) cc).getDefinition(); factTypes.addAll(getConditionFactTypesFromRuleModel(definition)); } else if (cc instanceof Pattern52) { factTypes.add(((Pattern52) cc).getFactType()); } } for (ActionCol52 c : model.getActionCols()) { if (c instanceof BRLActionColumn) { final List<IAction> definition = ((BRLActionColumn) c).getDefinition(); factTypes.addAll(getActionFactTypesFromRuleModel(definition)); } else if (c instanceof ActionInsertFactCol52) { factTypes.add(((ActionInsertFactCol52) c).getFactType()); } } final Set<String> fullyQualifiedClassNames = new HashSet<String>(); for (String factType : factTypes) { fullyQualifiedClassNames.add(convertToFullyQualifiedClassName(factType)); } return fullyQualifiedClassNames; } public GuidedDecisionTableModelVisitor(GuidedDecisionTable52); private Set<String> getConditionFactTypesFromRuleModel(List<IPattern>); private Set<String> getActionFactTypesFromRuleModel(List<IAction>); private String convertToFullyQualifiedClassName(String); private final GuidedDecisionTable52 model; }</FCTX> <ECTX></ECTX>,<FCTX>GuidedDecisionTableModelVisitor { public Set<String> getConsumedModelClasses() { final Set<String> factTypes = new HashSet<String>(); for (CompositeColumn<?> cc : model.getConditions()) { if (cc instanceof BRLConditionColumn) { final List<IPattern> definition = ((BRLConditionColumn) cc).getDefinition(); factTypes.addAll(getConditionFactTypesFromRuleModel(definition)); } else if (cc instanceof Pattern52) { factTypes.add(((Pattern52) cc).getFactType()); } } for (ActionCol52 c : model.getActionCols()) { if (c instanceof BRLActionColumn) { final List<IAction> definition = ((BRLActionColumn) c).getDefinition(); factTypes.addAll(getActionFactTypesFromRuleModel(definition)); } else if (c instanceof ActionInsertFactCol52) { factTypes.add(((ActionInsertFactCol52) c).getFactType()); } } final Set<String> fullyQualifiedClassNames = new HashSet<String>(); for (String factType : factTypes) { fullyQualifiedClassNames.add(convertToFullyQualifiedClassName(factType)); } return fullyQualifiedClassNames; } public GuidedDecisionTableModelVisitor(GuidedDecisionTable52); <PRIVATE_FCTX>private Set<String> getConditionFactTypesFromRuleModel(List<IPattern>); private Set<String> getActionFactTypesFromRuleModel(List<IAction>); private String convertToFullyQualifiedClassName(String); private final GuidedDecisionTable52 model;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import java.util.HashSet;|import java.util.List;|import java.util.Set;|import org.drools.workbench.models.datamodel.rule.IAction;|import org.drools.workbench.models.datamodel.rule.IPattern;|import org.drools.workbench.models.datamodel.rule.RuleModel;|import org.drools.workbench.models.guided.dtable.shared.model.ActionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.ActionInsertFactCol52;|import org.drools.workbench.models.guided.dtable.shared.model.BRLActionColumn;|import org.drools.workbench.models.guided.dtable.shared.model.BRLConditionColumn;|import org.drools.workbench.models.guided.dtable.shared.model.CompositeColumn;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.models.guided.dtable.shared.model.Pattern52;|import org.drools.workbench.screens.guided.rule.backend.server.GuidedRuleModelVisitor;|import org.kie.soup.commons.validation.PortablePreconditions;|import org.kie.soup.project.datamodel.imports.Import;|import org.kie.soup.project.datamodel.imports.Imports;,import java.util.Set;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.models.guided.dtable.shared.model.Pattern52;|import org.junit.Ignore;|import org.junit.Test;|import org.kie.soup.project.datamodel.imports.Import;|import static org.junit.Assert.assertTrue;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;
@Test public void isShown() { when(rootPanelMock.getWidgetIndex(viewMock)).thenReturn(1); assertTrue(baseMenu.isShown()); when(rootPanelMock.getWidgetIndex(viewMock)).thenReturn(-1); assertFalse(baseMenu.isShown()); },"BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public boolean isShown() { return getRootPanel().getWidgetIndex(view) != -1; } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public boolean isShown() { return getRootPanel().getWidgetIndex(view) != -1; } }</FCTX> <ECTX></ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public boolean isShown() { return getRootPanel().getWidgetIndex(view) != -1; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onContextMenuEvent() { ContextMenuEvent mockEvent = mock(ContextMenuEvent.class); baseMenu.onContextMenuEvent(mockEvent); verify(mockEvent, times(1)).preventDefault(); verify(mockEvent, times(1)).stopPropagation(); verify(baseMenu, times(1)).hide(); }","BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void onContextMenuEvent(ContextMenuEvent event) { event.preventDefault(); event.stopPropagation(); hide(); } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void onContextMenuEvent(ContextMenuEvent event) { event.preventDefault(); event.stopPropagation(); hide(); } }</FCTX> <ECTX></ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void onContextMenuEvent(ContextMenuEvent event) { event.preventDefault(); event.stopPropagation(); hide(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void enableElement() { Element mockElement = mock(Element.class); baseMenu.enableElement(mockElement, true); verify(mockElement, times(1)).removeClassName(Styles.DISABLED); reset(mockElement); baseMenu.enableElement(mockElement, false); verify(mockElement, times(1)).addClassName(Styles.DISABLED); }","BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void enableElement(Element element, boolean enabled) { if (enabled) { element.removeClassName(Styles.DISABLED); } else { element.addClassName(Styles.DISABLED); } } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void enableElement(Element element, boolean enabled) { if (enabled) { element.removeClassName(Styles.DISABLED); } else { element.addClassName(Styles.DISABLED); } } }</FCTX> <ECTX></ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void enableElement(Element element, boolean enabled) { if (enabled) { element.removeClassName(Styles.DISABLED); } else { element.addClassName(Styles.DISABLED); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
@Test public void isDisabled() { Element elementMock = mock(Element.class); when(elementMock.getClassName()).thenReturn(Styles.DISABLED); assertTrue(baseMenu.isDisabled(elementMock)); when(elementMock.getClassName()).thenReturn(Styles.DROPDOWN_MENU); assertFalse(baseMenu.isDisabled(elementMock)); },"BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public boolean isDisabled(final Element element) { final List<String> classNames = Arrays.asList(element.getClassName().split(""\\s"")); return classNames.contains(Styles.DISABLED); } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public boolean isDisabled(final Element element) { final List<String> classNames = Arrays.asList(element.getClassName().split(""\\s"")); return classNames.contains(Styles.DISABLED); } }</FCTX> <ECTX></ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public boolean isDisabled(final Element element) { final List<String> classNames = Arrays.asList(element.getClassName().split(""\\s"")); return classNames.contains(Styles.DISABLED); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void updateExecutableMenuItemAttributes() { LIElement toUpdateMock = mock(LIElement.class); NodeList<Element> elementsByTagNameMock = mock(NodeList.class); Element itemMock = mock(Element.class); when(elementsByTagNameMock.getItem(0)).thenReturn(itemMock); when(toUpdateMock.getElementsByTagName(""span"")).thenReturn(elementsByTagNameMock); String id = ""TEST-ID""; String label = ""TEST-LABEL""; String i18n = ""TEST-i18n""; baseMenu.updateExecutableMenuItemAttributes(toUpdateMock, id, label, i18n); verify(toUpdateMock, times(1)).setId(eq(id)); verify(itemMock, times(1)).setInnerHTML(eq(label)); }","BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { protected void updateExecutableMenuItemAttributes(LIElement toUpdate, String id, String label, String i18n) { toUpdate.setId(id); toUpdate.getElementsByTagName(""span"").getItem(0).setInnerHTML(label); } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { protected void updateExecutableMenuItemAttributes(LIElement toUpdate, String id, String label, String i18n) { toUpdate.setId(id); toUpdate.getElementsByTagName(""span"").getItem(0).setInnerHTML(label); } }</FCTX> <ECTX></ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { protected void updateExecutableMenuItemAttributes(LIElement toUpdate, String id, String label, String i18n) { toUpdate.setId(id); toUpdate.getElementsByTagName(""span"").getItem(0).setInnerHTML(label); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void updateMenuItemAttributes() { LIElement toUpdateMock = mock(LIElement.class); NodeList<Element> elementsByTagNameMock = mock(NodeList.class); Element itemMock = mock(Element.class); when(elementsByTagNameMock.getItem(0)).thenReturn(itemMock); when(toUpdateMock.getElementsByTagName(""span"")).thenReturn(elementsByTagNameMock); String id = ""TEST-ID""; String label = ""TEST-LABEL""; String i18n = ""TEST-i18n""; String boldLabel = ""<b>"" + label + ""</b>""; baseMenu.updateMenuItemAttributes(toUpdateMock, id, label, i18n); verify(toUpdateMock, times(1)).setId(eq(id)); verify(itemMock, times(1)).setInnerHTML(eq(boldLabel)); }","BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { protected void updateMenuItemAttributes(LIElement toUpdate, String id, String label, String i18n) { this.updateExecutableMenuItemAttributes(toUpdate, id, ""<b>"" + label.toUpperCase() + ""</b>"", i18n); } @PostConstruct @Override public void initialise(); @Override public LIElement addMenuItem(String, String, String); @Override public LIElement addExecutableMenuItem(String, String, String, Event); @Override public LIElement addExecutableMenuItem(String, String, String); @Override public LIElement addExecutableMenuItemAfter(String, String, String, LIElement); @Override public void removeMenuItem(LIElement); @Override public void mapEvent(LIElement, Event); @Override public Widget asWidget(); @Override public void show(int, int); @Override public void hide(); @Override public boolean isShown(); @Override public BaseMenuView getView(); @Override public void enableElement(Element, boolean); @Override public boolean isDisabled(Element); @Override public void onContextMenuEvent(ContextMenuEvent); protected RootPanel getRootPanel(); protected void updateMenuItemAttributes(LIElement, String, String, String); protected void updateExecutableMenuItemAttributes(LIElement, String, String, String); @Inject protected MenuItemPresenter menuItemPresenter; @Inject protected ExecutableMenuItemPresenter executableMenuItemPresenter; @Inject protected BaseMenuView view; }","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { protected void updateMenuItemAttributes(LIElement toUpdate, String id, String label, String i18n) { this.updateExecutableMenuItemAttributes(toUpdate, id, ""<b>"" + label.toUpperCase() + ""</b>"", i18n); } }</FCTX> <ECTX></ECTX>","<FCTX>BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { protected void updateMenuItemAttributes(LIElement toUpdate, String id, String label, String i18n) { this.updateExecutableMenuItemAttributes(toUpdate, id, ""<b>"" + label.toUpperCase() + ""</b>"", i18n); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Arrays;|import java.util.List;|import javax.annotation.PostConstruct;|import javax.inject.Inject;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.Style;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.IsWidget;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwt.user.client.ui.Widget;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;,import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.NodeList;|import com.google.gwt.dom.client.Style;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.RootPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onContextMenuEvent() { ContextMenuEvent mockEvent = mock(ContextMenuEvent.class); baseMenuView.onContextMenuEvent(mockEvent); verify(mockBaseMenu, times(1)).onContextMenuEvent(mockEvent); }",BaseMenuViewImpl extends Composite implements BaseMenuView<M> { @EventHandler() public void onContextMenuEvent(ContextMenuEvent event) { presenter.onContextMenuEvent(event); } @Override public void init(M); @Override public UListElement getContextMenuDropdown(); @EventHandler() public void onContextMenuEvent(ContextMenuEvent); protected M presenter; },<FCTX>BaseMenuViewImpl extends Composite implements BaseMenuView<M> { @EventHandler() public void onContextMenuEvent(ContextMenuEvent event) { presenter.onContextMenuEvent(event); } }</FCTX> <ECTX></ECTX>,<FCTX>BaseMenuViewImpl extends Composite implements BaseMenuView<M> { @EventHandler() public void onContextMenuEvent(ContextMenuEvent event) { presenter.onContextMenuEvent(event); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import com.google.gwt.dom.client.Document;|import com.google.gwt.dom.client.UListElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.user.client.ui.Composite;|import org.jboss.errai.ui.shared.api.annotations.DataField;|import org.jboss.errai.ui.shared.api.annotations.EventHandler;|import org.jboss.errai.ui.shared.api.annotations.Templated;,import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void onClickEvent() { ClickEvent mockClickEvent = mock(ClickEvent.class); executableMenuItemPresenter.onClickEvent(mockClickEvent, mockLIElement); verify(mockClickEvent, times(1)).preventDefault(); verify(mockClickEvent, times(1)).stopPropagation(); verify(mockparent, times(1)).hide(); verify(executableMenuItemPresenter, times(1)).fireEvent(eq(mockLIElement)); }","ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public void onClickEvent(ClickEvent event, LIElement clickedElement) { event.preventDefault(); event.stopPropagation(); parent.hide(); fireEvent(clickedElement); } @Override public void init(BaseMenu); @Override public void setEventBus(EventBus); @Override public void onClickEvent(ClickEvent, LIElement); @Override public void fireEvent(LIElement); @Override public LIElement getLExecutableMenuElement(String, String, Event); @Override public LIElement getLExecutableMenuElement(String, String); @Override public void mapEvent(LIElement, Event); @Override public void enableElement(boolean); protected ExecutableMenuItemView getMenuItemView(); EventBus eventBus; BaseMenu parent; protected Map<LIElement, Event> menuItemsEventMap = new HashMap<>(); }","<FCTX>ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public void onClickEvent(ClickEvent event, LIElement clickedElement) { event.preventDefault(); event.stopPropagation(); parent.hide(); fireEvent(clickedElement); } }</FCTX> <ECTX>public abstract class BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void hide(); }</ECTX>","<FCTX>ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public void onClickEvent(ClickEvent event, LIElement clickedElement) { event.preventDefault(); event.stopPropagation(); parent.hide(); fireEvent(clickedElement); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class BaseMenu implements IsWidget, BaseMenuView.BaseMenuPresenter { @Override public void hide(); }</ECTX>",import java.util.HashMap;|import java.util.Map;|import javax.enterprise.inject.Instance;|import javax.inject.Inject;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.shared.EventBus;|import com.google.web.bindery.event.shared.Event;,import java.util.Map;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.shared.EventBus;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertNotNull;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void fireEvent() { executableMenuItemPresenter.fireEvent(mockLIElement); verify(mockMenuItemsEventMap, times(1)).containsKey(mockLIElement); verify(mockEventBus, times(1)).fireEvent(eq(mockEvent)); }","ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public void fireEvent(LIElement clickedElement) { if (menuItemsEventMap.containsKey(clickedElement)) { final Event event = menuItemsEventMap.get(clickedElement); eventBus.fireEvent(event); } } @Override public void init(BaseMenu); @Override public void setEventBus(EventBus); @Override public void onClickEvent(ClickEvent, LIElement); @Override public void fireEvent(LIElement); @Override public LIElement getLExecutableMenuElement(String, String, Event); @Override public LIElement getLExecutableMenuElement(String, String); @Override public void mapEvent(LIElement, Event); @Override public void enableElement(boolean); protected ExecutableMenuItemView getMenuItemView(); EventBus eventBus; BaseMenu parent; protected Map<LIElement, Event> menuItemsEventMap = new HashMap<>(); }",<FCTX>ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public void fireEvent(LIElement clickedElement) { if (menuItemsEventMap.containsKey(clickedElement)) { final Event event = menuItemsEventMap.get(clickedElement); eventBus.fireEvent(event); } } }</FCTX> <ECTX></ECTX>,<FCTX>ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public void fireEvent(LIElement clickedElement) { if (menuItemsEventMap.containsKey(clickedElement)) { final Event event = menuItemsEventMap.get(clickedElement); eventBus.fireEvent(event); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import java.util.HashMap;|import java.util.Map;|import javax.enterprise.inject.Instance;|import javax.inject.Inject;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.shared.EventBus;|import com.google.web.bindery.event.shared.Event;,import java.util.Map;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.shared.EventBus;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertNotNull;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void getLIElement() { LIElement liElement = executableMenuItemPresenter.getLExecutableMenuElement(""TEST-ID"", ""TEST-LABEL"", mockEvent); assertNotNull(liElement); verify(mockMenuItemsEventMap, times(1)).put(liElement, mockEvent); }","ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public LIElement getLExecutableMenuElement(String id, String label, Event event) { LIElement toReturn = getLExecutableMenuElement(id, label); menuItemsEventMap.put(toReturn, event); return toReturn; } @Override public void init(BaseMenu); @Override public void setEventBus(EventBus); @Override public void onClickEvent(ClickEvent, LIElement); @Override public void fireEvent(LIElement); @Override public LIElement getLExecutableMenuElement(String, String, Event); @Override public LIElement getLExecutableMenuElement(String, String); @Override public void mapEvent(LIElement, Event); @Override public void enableElement(boolean); protected ExecutableMenuItemView getMenuItemView(); EventBus eventBus; BaseMenu parent; protected Map<LIElement, Event> menuItemsEventMap = new HashMap<>(); }","<FCTX>ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public LIElement getLExecutableMenuElement(String id, String label, Event event) { LIElement toReturn = getLExecutableMenuElement(id, label); menuItemsEventMap.put(toReturn, event); return toReturn; } }</FCTX> <ECTX></ECTX>","<FCTX>ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public LIElement getLExecutableMenuElement(String id, String label, Event event) { LIElement toReturn = getLExecutableMenuElement(id, label); menuItemsEventMap.put(toReturn, event); return toReturn; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.HashMap;|import java.util.Map;|import javax.enterprise.inject.Instance;|import javax.inject.Inject;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.shared.EventBus;|import com.google.web.bindery.event.shared.Event;,import java.util.Map;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.shared.EventBus;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertNotNull;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test @Ignore(""DROOLS-4457"") public void differentPackagesSameNames() { final GuidedDecisionTable52 model = new GuidedDecisionTable52(); model.getImports().addImport(new Import(""org.test.demo.Person"")); model.getImports().addImport(new Import(""org.test.Person"")); final Pattern52 pattern52 = mock(Pattern52.class); doReturn(""Person"").when(pattern52).getFactType(); model.getConditions().add(pattern52); final Set<String> consumedModelClasses = new GuidedDecisionTableModelVisitor(model).getConsumedModelClasses(); assertTrue(consumedModelClasses.contains(""org.test.Person"")); }",GuidedDecisionTableModelVisitor { public Set<String> getConsumedModelClasses() { final Set<String> factTypes = new HashSet<String>(); for (CompositeColumn<?> cc : model.getConditions()) { if (cc instanceof BRLConditionColumn) { final List<IPattern> definition = ((BRLConditionColumn) cc).getDefinition(); factTypes.addAll(getConditionFactTypesFromRuleModel(definition)); } else if (cc instanceof Pattern52) { factTypes.add(((Pattern52) cc).getFactType()); } } for (ActionCol52 c : model.getActionCols()) { if (c instanceof BRLActionColumn) { final List<IAction> definition = ((BRLActionColumn) c).getDefinition(); factTypes.addAll(getActionFactTypesFromRuleModel(definition)); } else if (c instanceof ActionInsertFactCol52) { factTypes.add(((ActionInsertFactCol52) c).getFactType()); } } final Set<String> fullyQualifiedClassNames = new HashSet<String>(); for (String factType : factTypes) { fullyQualifiedClassNames.add(convertToFullyQualifiedClassName(factType)); } return fullyQualifiedClassNames; } public GuidedDecisionTableModelVisitor(GuidedDecisionTable52); public Set<String> getConsumedModelClasses(); },<FCTX>GuidedDecisionTableModelVisitor { public Set<String> getConsumedModelClasses() { final Set<String> factTypes = new HashSet<String>(); for (CompositeColumn<?> cc : model.getConditions()) { if (cc instanceof BRLConditionColumn) { final List<IPattern> definition = ((BRLConditionColumn) cc).getDefinition(); factTypes.addAll(getConditionFactTypesFromRuleModel(definition)); } else if (cc instanceof Pattern52) { factTypes.add(((Pattern52) cc).getFactType()); } } for (ActionCol52 c : model.getActionCols()) { if (c instanceof BRLActionColumn) { final List<IAction> definition = ((BRLActionColumn) c).getDefinition(); factTypes.addAll(getActionFactTypesFromRuleModel(definition)); } else if (c instanceof ActionInsertFactCol52) { factTypes.add(((ActionInsertFactCol52) c).getFactType()); } } final Set<String> fullyQualifiedClassNames = new HashSet<String>(); for (String factType : factTypes) { fullyQualifiedClassNames.add(convertToFullyQualifiedClassName(factType)); } return fullyQualifiedClassNames; } public GuidedDecisionTableModelVisitor(GuidedDecisionTable52); private Set<String> getConditionFactTypesFromRuleModel(List<IPattern>); private Set<String> getActionFactTypesFromRuleModel(List<IAction>); private String convertToFullyQualifiedClassName(String); private final GuidedDecisionTable52 model; }</FCTX> <ECTX></ECTX>,<FCTX>GuidedDecisionTableModelVisitor { public Set<String> getConsumedModelClasses() { final Set<String> factTypes = new HashSet<String>(); for (CompositeColumn<?> cc : model.getConditions()) { if (cc instanceof BRLConditionColumn) { final List<IPattern> definition = ((BRLConditionColumn) cc).getDefinition(); factTypes.addAll(getConditionFactTypesFromRuleModel(definition)); } else if (cc instanceof Pattern52) { factTypes.add(((Pattern52) cc).getFactType()); } } for (ActionCol52 c : model.getActionCols()) { if (c instanceof BRLActionColumn) { final List<IAction> definition = ((BRLActionColumn) c).getDefinition(); factTypes.addAll(getActionFactTypesFromRuleModel(definition)); } else if (c instanceof ActionInsertFactCol52) { factTypes.add(((ActionInsertFactCol52) c).getFactType()); } } final Set<String> fullyQualifiedClassNames = new HashSet<String>(); for (String factType : factTypes) { fullyQualifiedClassNames.add(convertToFullyQualifiedClassName(factType)); } return fullyQualifiedClassNames; } public GuidedDecisionTableModelVisitor(GuidedDecisionTable52); <PRIVATE_FCTX>private Set<String> getConditionFactTypesFromRuleModel(List<IPattern>); private Set<String> getActionFactTypesFromRuleModel(List<IAction>); private String convertToFullyQualifiedClassName(String); private final GuidedDecisionTable52 model;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import java.util.HashSet;|import java.util.List;|import java.util.Set;|import org.drools.workbench.models.datamodel.rule.IAction;|import org.drools.workbench.models.datamodel.rule.IPattern;|import org.drools.workbench.models.datamodel.rule.RuleModel;|import org.drools.workbench.models.guided.dtable.shared.model.ActionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.ActionInsertFactCol52;|import org.drools.workbench.models.guided.dtable.shared.model.BRLActionColumn;|import org.drools.workbench.models.guided.dtable.shared.model.BRLConditionColumn;|import org.drools.workbench.models.guided.dtable.shared.model.CompositeColumn;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.models.guided.dtable.shared.model.Pattern52;|import org.drools.workbench.screens.guided.rule.backend.server.GuidedRuleModelVisitor;|import org.kie.soup.commons.validation.PortablePreconditions;|import org.kie.soup.project.datamodel.imports.Import;|import org.kie.soup.project.datamodel.imports.Imports;,import java.util.Set;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.models.guided.dtable.shared.model.Pattern52;|import org.junit.Ignore;|import org.junit.Test;|import org.kie.soup.project.datamodel.imports.Import;|import static org.junit.Assert.assertTrue;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;
"@Test public void testIndexedParameters_RHSFieldValue() { final String result = utilities.convertIndexedParametersToTemplateKeys( ""setField1( $1 ); setField2( $2 )"", ParameterizedValueBuilder.Part.RHS ); assertEquals( ""setField1( @{param1} ); setField2( @{param2} )"", result ); }","ParameterUtilities { public String convertIndexedParametersToTemplateKeys( final String xlsTemplate, final ParameterizedValueBuilder.Part part ) { final StringBuffer result = new StringBuffer(); final Matcher matcherIndexedParameter = patternIndexedParameter.matcher( xlsTemplate ); while ( matcherIndexedParameter.find() ) { matcherIndexedParameter.appendReplacement( result, ""@{"" + PARAMETER_PREFIX + ( parameterCounter++ ) + ""}"" ); } matcherIndexedParameter.appendTail( result ); return assertTemplateKeyConversion( result, part ); } public String convertIndexedParametersToTemplateKeys(String, ParameterizedValueBuilder.Part); public String convertSingleParameterToTemplateKey(String, ParameterizedValueBuilder.Part); public Set<String> extractTemplateKeys(String); }","<FCTX>ParameterUtilities { public String convertIndexedParametersToTemplateKeys( final String xlsTemplate, final ParameterizedValueBuilder.Part part ) { final StringBuffer result = new StringBuffer(); final Matcher matcherIndexedParameter = patternIndexedParameter.matcher( xlsTemplate ); while ( matcherIndexedParameter.find() ) { matcherIndexedParameter.appendReplacement( result, ""@{"" + PARAMETER_PREFIX + ( parameterCounter++ ) + ""}"" ); } matcherIndexedParameter.appendTail( result ); return assertTemplateKeyConversion( result, part ); } private String assertTemplateKeyConversion(StringBuffer, ParameterizedValueBuilder.Part); private static final Pattern patternIndexedParameter = Pattern.compile( ""\\$\\d+"" ); private static final String PARAMETER_PREFIX = ""param""; private int parameterCounter = 1; }</FCTX> <ECTX></ECTX>","<FCTX>ParameterUtilities { public String convertIndexedParametersToTemplateKeys( final String xlsTemplate, final ParameterizedValueBuilder.Part part ) { final StringBuffer result = new StringBuffer(); final Matcher matcherIndexedParameter = patternIndexedParameter.matcher( xlsTemplate ); while ( matcherIndexedParameter.find() ) { matcherIndexedParameter.appendReplacement( result, ""@{"" + PARAMETER_PREFIX + ( parameterCounter++ ) + ""}"" ); } matcherIndexedParameter.appendTail( result ); return assertTemplateKeyConversion( result, part ); } <PRIVATE_FCTX>private String assertTemplateKeyConversion(StringBuffer, ParameterizedValueBuilder.Part); private static final Pattern patternIndexedParameter = Pattern.compile( ""\\$\\d+"" ); private static final String PARAMETER_PREFIX = ""param""; private int parameterCounter = 1;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.LinkedHashSet;|import java.util.Set;|import java.util.regex.Matcher;|import java.util.regex.Pattern;|import org.drools.compiler.compiler.DrlExprParser;|import org.drools.compiler.compiler.DrlParser;|import org.drools.compiler.lang.descr.AtomicExprDescr;|import org.drools.compiler.lang.descr.BaseDescr;|import org.drools.compiler.lang.descr.ConstraintConnectiveDescr;|import org.drools.compiler.lang.descr.RelationalExprDescr;|import org.drools.workbench.models.commons.backend.rule.RuleModelDRLPersistenceImpl;,import org.junit.Test;|import static org.junit.Assert.assertEquals;
"@Test public void onClickEvent() { ClickEvent mockClickEvent = mock(ClickEvent.class); menuItemView.onClickEvent(mockClickEvent); verify(mockMenuItemPresenter, times(1)).onClickEvent(mockClickEvent); }","ExecutableMenuItemViewImpl implements ExecutableMenuItemView { @EventHandler(""liElement"") public void onClickEvent(ClickEvent event) { executableMenuItemPresenter.onClickEvent(event, liElement); } @Override public LIElement getLExecutableMenuElement(); @Override public void setPresenter(ExecutableMenuItemPresenter); @Override public void setId(String); @Override public void setDataI18nKey(String); @Override public void setLabel(String); @EventHandler(""liElement"") public void onClickEvent(ClickEvent); }","<FCTX>ExecutableMenuItemViewImpl implements ExecutableMenuItemView { @EventHandler(""liElement"") public void onClickEvent(ClickEvent event) { executableMenuItemPresenter.onClickEvent(event, liElement); } @DataField(""liElement"") private LIElement liElement = Document.get().createLIElement(); private ExecutableMenuItemPresenter executableMenuItemPresenter; }</FCTX> <ECTX>public class ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public void onClickEvent(ClickEvent, LIElement); }</ECTX>","<FCTX>ExecutableMenuItemViewImpl implements ExecutableMenuItemView { @EventHandler(""liElement"") public void onClickEvent(ClickEvent event) { executableMenuItemPresenter.onClickEvent(event, liElement); } <PRIVATE_FCTX>@DataField(""liElement"") private LIElement liElement = Document.get().createLIElement(); private ExecutableMenuItemPresenter executableMenuItemPresenter;</PRIVATE_FCTX> }</FCTX> <ECTX>public class ExecutableMenuItemPresenter implements ExecutableMenuItemView.Presenter { @Override public void onClickEvent(ClickEvent, LIElement); }</ECTX>",import com.google.gwt.dom.client.Document;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.dom.client.SpanElement;|import com.google.gwt.event.dom.client.ClickEvent;|import org.jboss.errai.ui.shared.api.annotations.DataField;|import org.jboss.errai.ui.shared.api.annotations.EventHandler;|import org.jboss.errai.ui.shared.api.annotations.Templated;,import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void initMenu() { assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_COLUMN); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DELETE_COLUMN); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DELETE_INSTANCE); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DUPLICATE_INSTANCE); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_LABEL); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_I18N); abstractColumnMenuPresenter.initMenu(); assertEquals(ExpectedContextMenu.EXPECTCONTEXTMENU_EXPECT, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_COLUMN); assertEquals(ExpectedContextMenu.EXPECTCONTEXTMENU_INSERT_COLUMN_LEFT, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT); assertEquals(ExpectedContextMenu.EXPECTCONTEXTMENU_INSERT_COLUMN_RIGHT, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT); assertEquals(ExpectedContextMenu.EXPECTCONTEXTMENU_DELETE_COLUMN, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DELETE_COLUMN); assertEquals(ExpectedContextMenu.EXPECTCONTEXTMENU_DELETE_INSTANCE, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DELETE_INSTANCE); assertEquals(abstractColumnMenuPresenter.constants.expect().toUpperCase(), abstractColumnMenuPresenter.COLUMNCONTEXTMENU_LABEL); assertEquals(""expect"", abstractColumnMenuPresenter.COLUMNCONTEXTMENU_I18N); }","ExpectedContextMenu extends AbstractColumnMenuPresenter { @PostConstruct @Override public void initMenu() { COLUMNCONTEXTMENU_COLUMN = EXPECTCONTEXTMENU_EXPECT; COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT = EXPECTCONTEXTMENU_INSERT_COLUMN_LEFT; COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT = EXPECTCONTEXTMENU_INSERT_COLUMN_RIGHT; COLUMNCONTEXTMENU_DELETE_COLUMN = EXPECTCONTEXTMENU_DELETE_COLUMN; COLUMNCONTEXTMENU_DELETE_INSTANCE = EXPECTCONTEXTMENU_DELETE_INSTANCE; COLUMNCONTEXTMENU_LABEL = constants.expect().toUpperCase(); COLUMNCONTEXTMENU_I18N = ""expect""; super.initMenu(); } @PostConstruct @Override public void initMenu(); protected static final String EXPECTCONTEXTMENU_EXPECT = ""expectcontextmenu-expect""; protected static final String EXPECTCONTEXTMENU_INSERT_COLUMN_LEFT = ""expectcontextmenu-insert-column-left""; protected static final String EXPECTCONTEXTMENU_INSERT_COLUMN_RIGHT = ""expectcontextmenu-insert-column-right""; protected static final String EXPECTCONTEXTMENU_DELETE_COLUMN = ""expectcontextmenu-delete-column""; protected static final String EXPECTCONTEXTMENU_DELETE_INSTANCE = ""expectcontextmenu-delete-instance""; }","<FCTX>ExpectedContextMenu extends AbstractColumnMenuPresenter { @PostConstruct @Override public void initMenu() { COLUMNCONTEXTMENU_COLUMN = EXPECTCONTEXTMENU_EXPECT; COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT = EXPECTCONTEXTMENU_INSERT_COLUMN_LEFT; COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT = EXPECTCONTEXTMENU_INSERT_COLUMN_RIGHT; COLUMNCONTEXTMENU_DELETE_COLUMN = EXPECTCONTEXTMENU_DELETE_COLUMN; COLUMNCONTEXTMENU_DELETE_INSTANCE = EXPECTCONTEXTMENU_DELETE_INSTANCE; COLUMNCONTEXTMENU_LABEL = constants.expect().toUpperCase(); COLUMNCONTEXTMENU_I18N = ""expect""; super.initMenu(); } }</FCTX> <ECTX></ECTX>","<FCTX>ExpectedContextMenu extends AbstractColumnMenuPresenter { @PostConstruct @Override public void initMenu() { COLUMNCONTEXTMENU_COLUMN = EXPECTCONTEXTMENU_EXPECT; COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT = EXPECTCONTEXTMENU_INSERT_COLUMN_LEFT; COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT = EXPECTCONTEXTMENU_INSERT_COLUMN_RIGHT; COLUMNCONTEXTMENU_DELETE_COLUMN = EXPECTCONTEXTMENU_DELETE_COLUMN; COLUMNCONTEXTMENU_DELETE_INSTANCE = EXPECTCONTEXTMENU_DELETE_INSTANCE; COLUMNCONTEXTMENU_LABEL = constants.expect().toUpperCase(); COLUMNCONTEXTMENU_I18N = ""expect""; super.initMenu(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import javax.annotation.PostConstruct;|import javax.enterprise.context.Dependent;,import com.google.gwtmockito.GwtMockitoTestRunner;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNull;
"@Test public void initMenu() { assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_COLUMN); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DELETE_COLUMN); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DELETE_INSTANCE); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DUPLICATE_INSTANCE); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_LABEL); assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_I18N); abstractColumnMenuPresenter.initMenu(); assertEquals(GivenContextMenu.GIVENCONTEXTMENU_GIVEN, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_COLUMN); assertEquals(GivenContextMenu.GIVENCONTEXTMENU_INSERT_COLUMN_LEFT, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT); assertEquals(GivenContextMenu.GIVENCONTEXTMENU_INSERT_COLUMN_RIGHT, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT); assertEquals(GivenContextMenu.GIVENCONTEXTMENU_DELETE_COLUMN, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DELETE_COLUMN); assertEquals(GivenContextMenu.GIVENCONTEXTMENU_DELETE_INSTANCE, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DELETE_INSTANCE); assertEquals(GivenContextMenu.GIVENCONTEXTMENU_DUPLICATE_INSTANCE, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DUPLICATE_INSTANCE); assertEquals(abstractColumnMenuPresenter.constants.given().toUpperCase(), abstractColumnMenuPresenter.COLUMNCONTEXTMENU_LABEL); assertEquals(""given"", abstractColumnMenuPresenter.COLUMNCONTEXTMENU_I18N); }","GivenContextMenu extends AbstractColumnMenuPresenter { @PostConstruct @Override public void initMenu() { COLUMNCONTEXTMENU_COLUMN = GIVENCONTEXTMENU_GIVEN; COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT = GIVENCONTEXTMENU_INSERT_COLUMN_LEFT; COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT = GIVENCONTEXTMENU_INSERT_COLUMN_RIGHT; COLUMNCONTEXTMENU_DELETE_COLUMN = GIVENCONTEXTMENU_DELETE_COLUMN; COLUMNCONTEXTMENU_DELETE_INSTANCE = GIVENCONTEXTMENU_DELETE_INSTANCE; COLUMNCONTEXTMENU_DUPLICATE_INSTANCE = GIVENCONTEXTMENU_DUPLICATE_INSTANCE; COLUMNCONTEXTMENU_LABEL = constants.given().toUpperCase(); COLUMNCONTEXTMENU_I18N = ""given""; super.initMenu(); } @PostConstruct @Override public void initMenu(); protected static final String GIVENCONTEXTMENU_GIVEN = ""givencontextmenu-given""; protected static final String GIVENCONTEXTMENU_INSERT_COLUMN_LEFT = ""givencontextmenu-insert-column-left""; protected static final String GIVENCONTEXTMENU_INSERT_COLUMN_RIGHT = ""givencontextmenu-insert-column-right""; protected static final String GIVENCONTEXTMENU_DELETE_COLUMN = ""givencontextmenu-delete-column""; protected static final String GIVENCONTEXTMENU_DELETE_INSTANCE = ""givencontextmenu-delete-instance""; protected static final String GIVENCONTEXTMENU_DUPLICATE_INSTANCE = ""givencontextmenu-duplicate-instance""; }","<FCTX>GivenContextMenu extends AbstractColumnMenuPresenter { @PostConstruct @Override public void initMenu() { COLUMNCONTEXTMENU_COLUMN = GIVENCONTEXTMENU_GIVEN; COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT = GIVENCONTEXTMENU_INSERT_COLUMN_LEFT; COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT = GIVENCONTEXTMENU_INSERT_COLUMN_RIGHT; COLUMNCONTEXTMENU_DELETE_COLUMN = GIVENCONTEXTMENU_DELETE_COLUMN; COLUMNCONTEXTMENU_DELETE_INSTANCE = GIVENCONTEXTMENU_DELETE_INSTANCE; COLUMNCONTEXTMENU_DUPLICATE_INSTANCE = GIVENCONTEXTMENU_DUPLICATE_INSTANCE; COLUMNCONTEXTMENU_LABEL = constants.given().toUpperCase(); COLUMNCONTEXTMENU_I18N = ""given""; super.initMenu(); } }</FCTX> <ECTX></ECTX>","<FCTX>GivenContextMenu extends AbstractColumnMenuPresenter { @PostConstruct @Override public void initMenu() { COLUMNCONTEXTMENU_COLUMN = GIVENCONTEXTMENU_GIVEN; COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT = GIVENCONTEXTMENU_INSERT_COLUMN_LEFT; COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT = GIVENCONTEXTMENU_INSERT_COLUMN_RIGHT; COLUMNCONTEXTMENU_DELETE_COLUMN = GIVENCONTEXTMENU_DELETE_COLUMN; COLUMNCONTEXTMENU_DELETE_INSTANCE = GIVENCONTEXTMENU_DELETE_INSTANCE; COLUMNCONTEXTMENU_DUPLICATE_INSTANCE = GIVENCONTEXTMENU_DUPLICATE_INSTANCE; COLUMNCONTEXTMENU_LABEL = constants.given().toUpperCase(); COLUMNCONTEXTMENU_I18N = ""given""; super.initMenu(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import javax.annotation.PostConstruct;|import javax.enterprise.context.Dependent;,import com.google.gwtmockito.GwtMockitoTestRunner;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNull;
@Test public void initMenu() { initMenu(gridContextMenuSpy); },"GridContextMenu extends AbstractHeaderMenuPresenter { @Override public void initMenu() { super.initMenu(); removeMenuItem(insertRowBelowElement); insertRowAboveLIElement = addExecutableMenuItem(GRIDCONTEXTMENU_INSERT_ROW_ABOVE, constants.insertRowAbove(), ""insertRowAbove""); insertRowBelowLIElement = addExecutableMenuItem(GRIDCONTEXTMENU_INSERT_ROW_BELOW, constants.insertRowBelow(), ""insertRowBelow""); duplicateRowLIElement = addExecutableMenuItem(GRIDCONTEXTMENU_DUPLICATE_ROW, constants.duplicateRow(), ""duplicateRow""); deleteRowLIElement = addExecutableMenuItem(GRIDCONTEXTMENU_DELETE_ROW, constants.deleteRow(), ""deleteRow""); } @Override public void initMenu(); public void show(GridWidget, int, int, int); protected static final String GRIDCONTEXTMENU_GRID_TITLE = ""gridcontextmenu-grid-title""; protected static final String GRIDCONTEXTMENU_INSERT_ROW_ABOVE = ""gridcontextmenu-insert-row-above""; protected static final String GRIDCONTEXTMENU_INSERT_ROW_BELOW = ""gridcontextmenu-insert-row-below""; protected static final String GRIDCONTEXTMENU_DELETE_ROW = ""gridcontextmenu-delete-row""; protected static final String GRIDCONTEXTMENU_DUPLICATE_ROW = ""gridcontextmenu-duplicate-row""; protected LIElement insertRowAboveLIElement; protected LIElement insertRowBelowLIElement; protected LIElement duplicateRowLIElement; protected LIElement deleteRowLIElement; }","<FCTX>GridContextMenu extends AbstractHeaderMenuPresenter { @Override public void initMenu() { super.initMenu(); removeMenuItem(insertRowBelowElement); insertRowAboveLIElement = addExecutableMenuItem(GRIDCONTEXTMENU_INSERT_ROW_ABOVE, constants.insertRowAbove(), ""insertRowAbove""); insertRowBelowLIElement = addExecutableMenuItem(GRIDCONTEXTMENU_INSERT_ROW_BELOW, constants.insertRowBelow(), ""insertRowBelow""); duplicateRowLIElement = addExecutableMenuItem(GRIDCONTEXTMENU_DUPLICATE_ROW, constants.duplicateRow(), ""duplicateRow""); deleteRowLIElement = addExecutableMenuItem(GRIDCONTEXTMENU_DELETE_ROW, constants.deleteRow(), ""deleteRow""); } }</FCTX> <ECTX></ECTX>","<FCTX>GridContextMenu extends AbstractHeaderMenuPresenter { @Override public void initMenu() { super.initMenu(); removeMenuItem(insertRowBelowElement); insertRowAboveLIElement = addExecutableMenuItem(GRIDCONTEXTMENU_INSERT_ROW_ABOVE, constants.insertRowAbove(), ""insertRowAbove""); insertRowBelowLIElement = addExecutableMenuItem(GRIDCONTEXTMENU_INSERT_ROW_BELOW, constants.insertRowBelow(), ""insertRowBelow""); duplicateRowLIElement = addExecutableMenuItem(GRIDCONTEXTMENU_DUPLICATE_ROW, constants.duplicateRow(), ""duplicateRow""); deleteRowLIElement = addExecutableMenuItem(GRIDCONTEXTMENU_DELETE_ROW, constants.deleteRow(), ""deleteRow""); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Objects;|import com.google.gwt.dom.client.LIElement;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.DeleteRowEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.DuplicateRowEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.InsertRowEvent;,import com.google.gwt.dom.client.LIElement;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.web.bindery.event.shared.Event;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.DeleteRowEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.DuplicateRowEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.InsertRowEvent;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.drools.workbench.screens.scenariosimulation.client.editor.menu.GridContextMenu.GRIDCONTEXTMENU_DELETE_ROW;|import static org.drools.workbench.screens.scenariosimulation.client.editor.menu.GridContextMenu.GRIDCONTEXTMENU_DUPLICATE_ROW;|import static org.drools.workbench.screens.scenariosimulation.client.editor.menu.GridContextMenu.GRIDCONTEXTMENU_GRID_TITLE;|import static org.drools.workbench.screens.scenariosimulation.client.editor.menu.GridContextMenu.GRIDCONTEXTMENU_INSERT_ROW_ABOVE;|import static org.drools.workbench.screens.scenariosimulation.client.editor.menu.GridContextMenu.GRIDCONTEXTMENU_INSERT_ROW_BELOW;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void onClickEvent() { ClickEvent mockClickEvent = mock(ClickEvent.class); menuItemPresenter.onClickEvent(mockClickEvent); verify(mockClickEvent, times(1)).preventDefault(); verify(mockClickEvent, times(1)).stopPropagation(); }","MenuItemPresenter implements MenuItemView.Presenter { @Override public void onClickEvent(ClickEvent event) { event.preventDefault(); event.stopPropagation(); } @Override public void onClickEvent(ClickEvent); @Override public LIElement getLabelMenuElement(String, String); @Override public void onEnableElement(boolean); @Inject protected ViewsProvider viewsProvider; }",<FCTX>MenuItemPresenter implements MenuItemView.Presenter { @Override public void onClickEvent(ClickEvent event) { event.preventDefault(); event.stopPropagation(); } }</FCTX> <ECTX></ECTX>,<FCTX>MenuItemPresenter implements MenuItemView.Presenter { @Override public void onClickEvent(ClickEvent event) { event.preventDefault(); event.stopPropagation(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import javax.inject.Inject;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.event.dom.client.ClickEvent;|import org.drools.workbench.screens.scenariosimulation.client.utils.ViewsProvider;,import com.google.gwt.dom.client.LIElement;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.utils.ViewsProvider;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertNotNull;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void getLIElement() { LIElement liElement = menuItemPresenter.getLabelMenuElement(""TEST-ID"", ""TEST-LABEL""); assertNotNull(liElement); }","MenuItemPresenter implements MenuItemView.Presenter { @Override public LIElement getLabelMenuElement(String id, String label) { MenuItemView menuItemView = viewsProvider.getMenuItemView(); menuItemView.setId(id); menuItemView.setLabel(label); menuItemView.setPresenter(this); return menuItemView.getLabelMenuElement(); } @Override public void onClickEvent(ClickEvent); @Override public LIElement getLabelMenuElement(String, String); @Override public void onEnableElement(boolean); @Inject protected ViewsProvider viewsProvider; }","<FCTX>MenuItemPresenter implements MenuItemView.Presenter { @Override public LIElement getLabelMenuElement(String id, String label) { MenuItemView menuItemView = viewsProvider.getMenuItemView(); menuItemView.setId(id); menuItemView.setLabel(label); menuItemView.setPresenter(this); return menuItemView.getLabelMenuElement(); } }</FCTX> <ECTX>public interface MenuItemView { void setId(String); void setLabel(String); void setPresenter(MenuItemPresenter); LIElement getLabelMenuElement(); } @ApplicationScoped public class ViewsProvider { public MenuItemView getMenuItemView(); }</ECTX>","<FCTX>MenuItemPresenter implements MenuItemView.Presenter { @Override public LIElement getLabelMenuElement(String id, String label) { MenuItemView menuItemView = viewsProvider.getMenuItemView(); menuItemView.setId(id); menuItemView.setLabel(label); menuItemView.setPresenter(this); return menuItemView.getLabelMenuElement(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface MenuItemView { void setId(String); void setLabel(String); void setPresenter(MenuItemPresenter); LIElement getLabelMenuElement(); } @ApplicationScoped public class ViewsProvider { public MenuItemView getMenuItemView(); }</ECTX>",import javax.inject.Inject;|import com.google.gwt.dom.client.LIElement;|import com.google.gwt.event.dom.client.ClickEvent;|import org.drools.workbench.screens.scenariosimulation.client.utils.ViewsProvider;,import com.google.gwt.dom.client.LIElement;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.utils.ViewsProvider;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertNotNull;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void setWrapper() { presenterSpy.setWrapper(scenarioSimulationEditorWrapperMock); assertSame(scenarioSimulationEditorWrapperMock, presenterSpy.scenarioSimulationEditorWrapper); }","ScenarioSimulationEditorPresenter { public void setWrapper(ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper) { this.scenarioSimulationEditorWrapper = scenarioSimulationEditorWrapper; } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void setWrapper(ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper) { this.scenarioSimulationEditorWrapper = scenarioSimulationEditorWrapper; } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void setWrapper(ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper) { this.scenarioSimulationEditorWrapper = scenarioSimulationEditorWrapper; } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void setPath() { presenterSpy.setPath(observablePathMock); assertSame(observablePathMock, presenterSpy.path); }","ScenarioSimulationEditorPresenter { public void setPath(ObservablePath path) { this.path = path; } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void setPath(ObservablePath path) { this.path = path; } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void setPath(ObservablePath path) { this.path = path; } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onClose() { presenterSpy.onClose(); verify(scenarioGridWidgetSpy, times(1)).unregister(); verify(backgroundGridWidgetSpy, times(1)).unregister(); }","ScenarioSimulationEditorPresenter { public void onClose() { scenarioMainGridWidget.unregister(); scenarioBackgroundGridWidget.unregister(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void onClose() { scenarioMainGridWidget.unregister(); scenarioBackgroundGridWidget.unregister(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void unregister(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void onClose() { scenarioMainGridWidget.unregister(); scenarioBackgroundGridWidget.unregister(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void unregister(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void testOtherwise() throws Exception { addRow(1, ""John"", false); addRow(2, ""Peter"", false); addRow(3, null, true); model.setData(data); String source = service.getSource(path, model); assertTrue(""Expected: name == \""John\"""", source.contains(""$p : Person( name == \""John\"" )"")); assertTrue(""Expected: name == \""Peter\"""", source.contains(""$p : Person( name == \""Peter\"" )"")); assertTrue(""Expected: name not in ( \""John\"", \""Peter\"" )"", source.contains(""$p : Person( name not in ( \""John\"", \""Peter\"" )"")); }","GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); @Override public String getPattern(); @Override public String getSource(Path, GuidedDecisionTable52); @Override public String getSource(Path); }","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); private Expander getDSLExpander(Path); }</FCTX> <ECTX></ECTX>","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); <PRIVATE_FCTX>private Expander getDSLExpander(Path);</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.io.IOException;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Collection;|import java.util.List;|import javax.enterprise.context.ApplicationScoped;|import javax.inject.Inject;|import javax.inject.Named;|import org.drools.compiler.lang.Expander;|import org.drools.compiler.lang.dsl.DSLMappingFile;|import org.drools.compiler.lang.dsl.DSLTokenizedMappingFile;|import org.drools.compiler.lang.dsl.DefaultExpander;|import org.drools.workbench.models.guided.dtable.backend.GuidedDTDRLPersistence;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.kie.workbench.common.services.backend.file.DSLFileFilter;|import org.kie.workbench.common.services.backend.source.BaseSourceService;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.kie.workbench.common.services.shared.source.SourceGenerationFailedException;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;|import org.uberfire.backend.server.util.Paths;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.Path;,import java.net.URI;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.HashSet;|import java.util.List;|import java.util.stream.Stream;|import org.drools.workbench.models.datamodel.rule.BaseSingleFieldConstraint;|import org.drools.workbench.models.guided.dtable.shared.model.ConditionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.DTCellValue52;|import org.drools.workbench.models.guided.dtable.shared.model.DescriptionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.models.guided.dtable.shared.model.Pattern52;|import org.drools.workbench.models.guided.dtable.shared.model.RowNumberCol52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.guvnor.common.services.project.model.Package;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.imports.Import;|import org.kie.soup.project.datamodel.imports.Imports;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.mockito.Mock;|import org.mockito.runners.MockitoJUnitRunner;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.FileSystem;|import org.uberfire.java.nio.file.Path;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Mockito.when;
"@Test public void showDocks_PlaceStatusOpen() { presenterSpy.showDocks(PlaceStatus.OPEN); verify(abstractScenarioSimulationDocksHandlerMock, times(1)).addDocks(); verify(abstractScenarioSimulationDocksHandlerMock, times(1)).setScesimEditorId(eq(String.valueOf(presenterSpy.scenarioPresenterId))); verify(presenterSpy, never()).expandToolsDock(); verify(presenterSpy, times(1)).registerTestToolsCallback(); verify(presenterSpy, times(1)).resetDocks(); verify(presenterSpy, times(1)).populateRightDocks(eq(TestToolsPresenter.IDENTIFIER)); }","ScenarioSimulationEditorPresenter { public void showDocks(PlaceStatus status) { abstractScenarioSimulationDocksHandler.addDocks(); abstractScenarioSimulationDocksHandler.setScesimEditorId(String.valueOf(scenarioPresenterId)); if (!PlaceStatus.OPEN.equals(status)) { expandToolsDock(); } registerTestToolsCallback(); resetDocks(); populateRightDocks(TestToolsPresenter.IDENTIFIER); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void showDocks(PlaceStatus status) { abstractScenarioSimulationDocksHandler.addDocks(); abstractScenarioSimulationDocksHandler.setScesimEditorId(String.valueOf(scenarioPresenterId)); if (!PlaceStatus.OPEN.equals(status)) { expandToolsDock(); } registerTestToolsCallback(); resetDocks(); populateRightDocks(TestToolsPresenter.IDENTIFIER); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler; }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void addDocks(); public void setScesimEditorId(String); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void showDocks(PlaceStatus status) { abstractScenarioSimulationDocksHandler.addDocks(); abstractScenarioSimulationDocksHandler.setScesimEditorId(String.valueOf(scenarioPresenterId)); if (!PlaceStatus.OPEN.equals(status)) { expandToolsDock(); } registerTestToolsCallback(); resetDocks(); populateRightDocks(TestToolsPresenter.IDENTIFIER); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler;</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void addDocks(); public void setScesimEditorId(String); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void showDocks_PlaceStatusClose() { presenterSpy.showDocks(PlaceStatus.CLOSE); verify(abstractScenarioSimulationDocksHandlerMock, times(1)).addDocks(); verify(abstractScenarioSimulationDocksHandlerMock, times(1)).setScesimEditorId(eq(String.valueOf(presenterSpy.scenarioPresenterId))); verify(presenterSpy, times(1)).expandToolsDock(); verify(presenterSpy, times(1)).registerTestToolsCallback(); verify(presenterSpy, times(1)).resetDocks(); verify(presenterSpy, times(1)).populateRightDocks(eq(TestToolsPresenter.IDENTIFIER)); }","ScenarioSimulationEditorPresenter { public void showDocks(PlaceStatus status) { abstractScenarioSimulationDocksHandler.addDocks(); abstractScenarioSimulationDocksHandler.setScesimEditorId(String.valueOf(scenarioPresenterId)); if (!PlaceStatus.OPEN.equals(status)) { expandToolsDock(); } registerTestToolsCallback(); resetDocks(); populateRightDocks(TestToolsPresenter.IDENTIFIER); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void showDocks(PlaceStatus status) { abstractScenarioSimulationDocksHandler.addDocks(); abstractScenarioSimulationDocksHandler.setScesimEditorId(String.valueOf(scenarioPresenterId)); if (!PlaceStatus.OPEN.equals(status)) { expandToolsDock(); } registerTestToolsCallback(); resetDocks(); populateRightDocks(TestToolsPresenter.IDENTIFIER); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler; }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void addDocks(); public void setScesimEditorId(String); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void showDocks(PlaceStatus status) { abstractScenarioSimulationDocksHandler.addDocks(); abstractScenarioSimulationDocksHandler.setScesimEditorId(String.valueOf(scenarioPresenterId)); if (!PlaceStatus.OPEN.equals(status)) { expandToolsDock(); } registerTestToolsCallback(); resetDocks(); populateRightDocks(TestToolsPresenter.IDENTIFIER); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler;</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void addDocks(); public void setScesimEditorId(String); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void hideDocks() { presenterSpy.hideDocks(); verify(abstractScenarioSimulationDocksHandlerMock).removeDocks(); verify(scenarioGridWidgetSpy, times(1)).clearSelections(); verify(backgroundGridWidgetSpy, times(1)).clearSelections(); verify(presenterSpy).unRegisterTestToolsCallback(); verify(presenterSpy).clearTestToolsStatus(); }","ScenarioSimulationEditorPresenter { public void hideDocks() { abstractScenarioSimulationDocksHandler.removeDocks(); scenarioMainGridWidget.clearSelections(); scenarioBackgroundGridWidget.clearSelections(); unRegisterTestToolsCallback(); clearTestToolsStatus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void hideDocks() { abstractScenarioSimulationDocksHandler.removeDocks(); scenarioMainGridWidget.clearSelections(); scenarioBackgroundGridWidget.clearSelections(); unRegisterTestToolsCallback(); clearTestToolsStatus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler; }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void removeDocks(); } public class ScenarioGridWidget extends ResizeComposite { public void clearSelections(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void hideDocks() { abstractScenarioSimulationDocksHandler.removeDocks(); scenarioMainGridWidget.clearSelections(); scenarioBackgroundGridWidget.clearSelections(); unRegisterTestToolsCallback(); clearTestToolsStatus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler;</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void removeDocks(); } public class ScenarioGridWidget extends ResizeComposite { public void clearSelections(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void expandToolsDock() { presenterSpy.expandToolsDock(); verify(abstractScenarioSimulationDocksHandlerMock, times(1)).expandToolsDock(); }","ScenarioSimulationEditorPresenter { public void expandToolsDock() { abstractScenarioSimulationDocksHandler.expandToolsDock(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void expandToolsDock() { abstractScenarioSimulationDocksHandler.expandToolsDock(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler; }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void expandToolsDock(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void expandToolsDock() { abstractScenarioSimulationDocksHandler.expandToolsDock(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler;</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void expandToolsDock(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void reloadTestTools_NotDisable() { presenterSpy.reloadTestTools(false); verify(presenterSpy, times(1)).populateRightDocks(eq(TestToolsPresenter.IDENTIFIER)); verify(abstractScenarioSimulationDocksHandlerMock, never()).getTestToolsPresenter(); verify(testToolsPresenterMock, never()).onDisableEditorTab(); }","ScenarioSimulationEditorPresenter { public void reloadTestTools(boolean disable) { populateRightDocks(TestToolsPresenter.IDENTIFIER); if (disable) { abstractScenarioSimulationDocksHandler.getTestToolsPresenter().onDisableEditorTab(); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void reloadTestTools(boolean disable) { populateRightDocks(TestToolsPresenter.IDENTIFIER); if (disable) { abstractScenarioSimulationDocksHandler.getTestToolsPresenter().onDisableEditorTab(); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler; }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public TestToolsView.Presenter getTestToolsPresenter(); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void reloadTestTools(boolean disable) { populateRightDocks(TestToolsPresenter.IDENTIFIER); if (disable) { abstractScenarioSimulationDocksHandler.getTestToolsPresenter().onDisableEditorTab(); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler;</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public TestToolsView.Presenter getTestToolsPresenter(); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void reloadTestTools_Disable() { presenterSpy.reloadTestTools(true); verify(presenterSpy, times(1)).populateRightDocks(eq(TestToolsPresenter.IDENTIFIER)); verify(abstractScenarioSimulationDocksHandlerMock, times(1)).getTestToolsPresenter(); verify(testToolsPresenterMock, times(1)).onDisableEditorTab(); }","ScenarioSimulationEditorPresenter { public void reloadTestTools(boolean disable) { populateRightDocks(TestToolsPresenter.IDENTIFIER); if (disable) { abstractScenarioSimulationDocksHandler.getTestToolsPresenter().onDisableEditorTab(); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void reloadTestTools(boolean disable) { populateRightDocks(TestToolsPresenter.IDENTIFIER); if (disable) { abstractScenarioSimulationDocksHandler.getTestToolsPresenter().onDisableEditorTab(); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler; }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public TestToolsView.Presenter getTestToolsPresenter(); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void reloadTestTools(boolean disable) { populateRightDocks(TestToolsPresenter.IDENTIFIER); if (disable) { abstractScenarioSimulationDocksHandler.getTestToolsPresenter().onDisableEditorTab(); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler;</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public TestToolsView.Presenter getTestToolsPresenter(); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void clearTestTools() { presenterSpy.clearTestToolsStatus(); verify(abstractScenarioSimulationDocksHandlerMock, times(1)).getTestToolsPresenter(); verify(testToolsPresenterMock, times(1)).onClearStatus(); }","ScenarioSimulationEditorPresenter { protected void clearTestToolsStatus() { abstractScenarioSimulationDocksHandler.getTestToolsPresenter().onClearStatus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { protected void clearTestToolsStatus() { abstractScenarioSimulationDocksHandler.getTestToolsPresenter().onClearStatus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler; }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public TestToolsView.Presenter getTestToolsPresenter(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { protected void clearTestToolsStatus() { abstractScenarioSimulationDocksHandler.getTestToolsPresenter().onClearStatus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler;</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public TestToolsView.Presenter getTestToolsPresenter(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onRunTest() { presenterSpy.onRunScenario(); verify(presenterSpy, times(1)).onRunScenario(eq(Arrays.asList(0))); }","ScenarioSimulationEditorPresenter { public void onRunScenario() { List<Integer> indexes = IntStream.range(0, context.getStatus().getSimulation().getUnmodifiableData().size()).boxed().collect(Collectors.toList()); onRunScenario(indexes); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void onRunScenario() { List<Integer> indexes = IntStream.range(0, context.getStatus().getSimulation().getUnmodifiableData().size()).boxed().collect(Collectors.toList()); onRunScenario(indexes); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void onRunScenario() { List<Integer> indexes = IntStream.range(0, context.getStatus().getSimulation().getUnmodifiableData().size()).boxed().collect(Collectors.toList()); onRunScenario(indexes); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onRunScenario() { scenarioWithIndexLocal.add(new ScenarioWithIndex(1, new Scenario())); scenarioWithIndexLocal.add(new ScenarioWithIndex(2, new Scenario())); scenarioWithIndexLocal.add(new ScenarioWithIndex(3, new Scenario())); when(simulationMock.getDataByIndex(anyInt())).thenReturn(mock(Scenario.class)); List<Integer> indexList = Arrays.asList(0, 2); presenterSpy.onRunScenario(indexList); verify(scenarioGridWidgetSpy, times(1)).resetErrors(); verify(backgroundGridWidgetSpy, times(1)).resetErrors(); verify(scenarioSimulationModelMock, times(1)).setSimulation(simulationMock); verify(scenarioSimulationModelMock, times(1)).setBackground(backgroundMock); verify(scenarioSimulationViewMock, times(1)).showBusyIndicator(anyString()); verify(scenarioSimulationEditorWrapperMock, times(1)).onRunScenario(any(), any(), any(), eq(settingsLocal), scenarioWithIndexCaptor.capture(), any()); List<ScenarioWithIndex> capturedValue = scenarioWithIndexCaptor.getValue(); assertEquals(2, capturedValue.size()); for (Integer requestedIndex : indexList) { assertEquals(1, capturedValue.stream().filter(elem -> elem.getIndex() == (requestedIndex + 1)).count()); } }","ScenarioSimulationEditorPresenter { public void onRunScenario() { List<Integer> indexes = IntStream.range(0, context.getStatus().getSimulation().getUnmodifiableData().size()).boxed().collect(Collectors.toList()); onRunScenario(indexes); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void onRunScenario() { List<Integer> indexes = IntStream.range(0, context.getStatus().getSimulation().getUnmodifiableData().size()).boxed().collect(Collectors.toList()); onRunScenario(indexes); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void onRunScenario() { List<Integer> indexes = IntStream.range(0, context.getStatus().getSimulation().getUnmodifiableData().size()).boxed().collect(Collectors.toList()); onRunScenario(indexes); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onUndo() { presenterSpy.onUndo(); verify(eventBusMock, times(1)).fireEvent(isA(UndoEvent.class)); }","ScenarioSimulationEditorPresenter { public void onUndo() { eventBus.fireEvent(new UndoEvent()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void onUndo() { eventBus.fireEvent(new UndoEvent()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void onUndo() { eventBus.fireEvent(new UndoEvent()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void testOtherwiseTwoSameValues() throws Exception { addRow(1, ""John"", false); addRow(2, ""John"", false); addRow(3, null, true); model.setData(data); String source = service.getSource(path, model); assertTrue(""Expected: name not in ( \""John\"" )"", source.contains(""$p : Person( name not in ( \""John\"" )"")); }","GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); @Override public String getPattern(); @Override public String getSource(Path, GuidedDecisionTable52); @Override public String getSource(Path); }","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); private Expander getDSLExpander(Path); }</FCTX> <ECTX></ECTX>","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); <PRIVATE_FCTX>private Expander getDSLExpander(Path);</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.io.IOException;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Collection;|import java.util.List;|import javax.enterprise.context.ApplicationScoped;|import javax.inject.Inject;|import javax.inject.Named;|import org.drools.compiler.lang.Expander;|import org.drools.compiler.lang.dsl.DSLMappingFile;|import org.drools.compiler.lang.dsl.DSLTokenizedMappingFile;|import org.drools.compiler.lang.dsl.DefaultExpander;|import org.drools.workbench.models.guided.dtable.backend.GuidedDTDRLPersistence;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.kie.workbench.common.services.backend.file.DSLFileFilter;|import org.kie.workbench.common.services.backend.source.BaseSourceService;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.kie.workbench.common.services.shared.source.SourceGenerationFailedException;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;|import org.uberfire.backend.server.util.Paths;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.Path;,import java.net.URI;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.HashSet;|import java.util.List;|import java.util.stream.Stream;|import org.drools.workbench.models.datamodel.rule.BaseSingleFieldConstraint;|import org.drools.workbench.models.guided.dtable.shared.model.ConditionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.DTCellValue52;|import org.drools.workbench.models.guided.dtable.shared.model.DescriptionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.models.guided.dtable.shared.model.Pattern52;|import org.drools.workbench.models.guided.dtable.shared.model.RowNumberCol52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.guvnor.common.services.project.model.Package;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.imports.Import;|import org.kie.soup.project.datamodel.imports.Imports;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.mockito.Mock;|import org.mockito.runners.MockitoJUnitRunner;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.FileSystem;|import org.uberfire.java.nio.file.Path;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Mockito.when;
"@Test public void onRedo() { presenterSpy.onRedo(); verify(eventBusMock, times(1)).fireEvent(isA(RedoEvent.class)); }","ScenarioSimulationEditorPresenter { public void onRedo() { eventBus.fireEvent(new RedoEvent()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void onRedo() { eventBus.fireEvent(new RedoEvent()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void onRedo() { eventBus.fireEvent(new RedoEvent()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void setUndoButtonEnabledStatus() { presenterSpy.setUndoButtonEnabledStatus(true); verify(undoMenuItemMock, times(1)).setEnabled(eq(true)); reset(undoMenuItemMock); presenterSpy.setUndoButtonEnabledStatus(false); verify(undoMenuItemMock, times(1)).setEnabled(eq(false)); }","ScenarioSimulationEditorPresenter { public void setUndoButtonEnabledStatus(boolean enabled) { undoMenuItem.setEnabled(enabled); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void setUndoButtonEnabledStatus(boolean enabled) { undoMenuItem.setEnabled(enabled); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void setUndoButtonEnabledStatus(boolean enabled) { undoMenuItem.setEnabled(enabled); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void setRedoButtonEnabledStatus() { presenterSpy.setRedoButtonEnabledStatus(true); verify(redoMenuItemMock, times(1)).setEnabled(eq(true)); reset(redoMenuItemMock); presenterSpy.setRedoButtonEnabledStatus(false); verify(redoMenuItemMock, times(1)).setEnabled(eq(false)); }","ScenarioSimulationEditorPresenter { public void setRedoButtonEnabledStatus(boolean enabled) { redoMenuItem.setEnabled(enabled); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void setRedoButtonEnabledStatus(boolean enabled) { redoMenuItem.setEnabled(enabled); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void setRedoButtonEnabledStatus(boolean enabled) { redoMenuItem.setEnabled(enabled); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void setItemMenuEnabledTRUE() { presenterSpy.setItemMenuEnabled(true); verify(runScenarioMenuItemMock, times(1)).setEnabled(eq(true)); verify(importMenuItemMock, times(1)).setEnabled(eq(true)); verify(exportToCsvMenuItemMock, times(1)).setEnabled(eq(true)); verify(downloadMenuItemMock, times(1)).setEnabled(eq(true)); }","ScenarioSimulationEditorPresenter { public void setItemMenuEnabled(boolean enabled) { runScenarioMenuItem.setEnabled(enabled); importMenuItem.setEnabled(enabled); exportToCSVMenuItem.setEnabled(enabled); if (downloadMenuItem != null) { downloadMenuItem.setEnabled(enabled); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void setItemMenuEnabled(boolean enabled) { runScenarioMenuItem.setEnabled(enabled); importMenuItem.setEnabled(enabled); exportToCSVMenuItem.setEnabled(enabled); if (downloadMenuItem != null) { downloadMenuItem.setEnabled(enabled); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void setItemMenuEnabled(boolean enabled) { runScenarioMenuItem.setEnabled(enabled); importMenuItem.setEnabled(enabled); exportToCSVMenuItem.setEnabled(enabled); if (downloadMenuItem != null) { downloadMenuItem.setEnabled(enabled); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void setItemMenuEnabledFALSE() { presenterSpy.setItemMenuEnabled(false); verify(runScenarioMenuItemMock, times(1)).setEnabled(eq(false)); verify(importMenuItemMock, times(1)).setEnabled(eq(false)); verify(exportToCsvMenuItemMock, times(1)).setEnabled(eq(false)); verify(downloadMenuItemMock, times(1)).setEnabled(eq(false)); }","ScenarioSimulationEditorPresenter { public void setItemMenuEnabled(boolean enabled) { runScenarioMenuItem.setEnabled(enabled); importMenuItem.setEnabled(enabled); exportToCSVMenuItem.setEnabled(enabled); if (downloadMenuItem != null) { downloadMenuItem.setEnabled(enabled); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void setItemMenuEnabled(boolean enabled) { runScenarioMenuItem.setEnabled(enabled); importMenuItem.setEnabled(enabled); exportToCSVMenuItem.setEnabled(enabled); if (downloadMenuItem != null) { downloadMenuItem.setEnabled(enabled); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void setItemMenuEnabled(boolean enabled) { runScenarioMenuItem.setEnabled(enabled); importMenuItem.setEnabled(enabled); exportToCSVMenuItem.setEnabled(enabled); if (downloadMenuItem != null) { downloadMenuItem.setEnabled(enabled); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onImportSIMULATION() { String FILE_CONTENT = ""FILE_CONTENT""; presenterSpy.onImport(FILE_CONTENT, GridWidget.SIMULATION); verify(scenarioSimulationEditorWrapperMock, times(1)).onImport(eq(FILE_CONTENT), isA(RemoteCallback.class), isA(ErrorCallback.class), same(simulationMock)); }","ScenarioSimulationEditorPresenter { public void onImport(String fileContents, GridWidget gridWidget) { switch (gridWidget) { case SIMULATION: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getSimulation()); break; case BACKGROUND: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getBackground()); break; default: throw new IllegalArgumentException(""Illegal GridWidget "" + gridWidget); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void onImport(String fileContents, GridWidget gridWidget) { switch (gridWidget) { case SIMULATION: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getSimulation()); break; case BACKGROUND: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getBackground()); break; default: throw new IllegalArgumentException(""Illegal GridWidget "" + gridWidget); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); } public interface ScenarioSimulationEditorWrapper { void onImport(String, RemoteCallback<AbstractScesimModel>, ErrorCallback<Object>, AbstractScesimModel<?extendsAbstractScesimData>); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void onImport(String fileContents, GridWidget gridWidget) { switch (gridWidget) { case SIMULATION: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getSimulation()); break; case BACKGROUND: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getBackground()); break; default: throw new IllegalArgumentException(""Illegal GridWidget "" + gridWidget); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); } public interface ScenarioSimulationEditorWrapper { void onImport(String, RemoteCallback<AbstractScesimModel>, ErrorCallback<Object>, AbstractScesimModel<?extendsAbstractScesimData>); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onImportBACKGROUND() { String FILE_CONTENT = ""FILE_CONTENT""; presenterSpy.onImport(FILE_CONTENT, GridWidget.BACKGROUND); verify(scenarioSimulationEditorWrapperMock, times(1)).onImport(eq(FILE_CONTENT), isA(RemoteCallback.class), isA(ErrorCallback.class), same(backgroundMock)); }","ScenarioSimulationEditorPresenter { public void onImport(String fileContents, GridWidget gridWidget) { switch (gridWidget) { case SIMULATION: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getSimulation()); break; case BACKGROUND: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getBackground()); break; default: throw new IllegalArgumentException(""Illegal GridWidget "" + gridWidget); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void onImport(String fileContents, GridWidget gridWidget) { switch (gridWidget) { case SIMULATION: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getSimulation()); break; case BACKGROUND: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getBackground()); break; default: throw new IllegalArgumentException(""Illegal GridWidget "" + gridWidget); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); } public interface ScenarioSimulationEditorWrapper { void onImport(String, RemoteCallback<AbstractScesimModel>, ErrorCallback<Object>, AbstractScesimModel<?extendsAbstractScesimData>); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void onImport(String fileContents, GridWidget gridWidget) { switch (gridWidget) { case SIMULATION: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getSimulation()); break; case BACKGROUND: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getBackground()); break; default: throw new IllegalArgumentException(""Illegal GridWidget "" + gridWidget); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); } public interface ScenarioSimulationEditorWrapper { void onImport(String, RemoteCallback<AbstractScesimModel>, ErrorCallback<Object>, AbstractScesimModel<?extendsAbstractScesimData>); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onImportCheckSwitch() { String FILE_CONTENT = ""FILE_CONTENT""; for (GridWidget gridWidget : GridWidget.values()) { presenterSpy.onImport(FILE_CONTENT, gridWidget); } verify(scenarioSimulationEditorWrapperMock, times(1)).onImport(eq(FILE_CONTENT), isA(RemoteCallback.class), isA(ErrorCallback.class), eq(simulationMock)); verify(scenarioSimulationEditorWrapperMock, times(1)).onImport(eq(FILE_CONTENT), isA(RemoteCallback.class), isA(ErrorCallback.class), eq(backgroundMock)); }","ScenarioSimulationEditorPresenter { public void onImport(String fileContents, GridWidget gridWidget) { switch (gridWidget) { case SIMULATION: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getSimulation()); break; case BACKGROUND: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getBackground()); break; default: throw new IllegalArgumentException(""Illegal GridWidget "" + gridWidget); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void onImport(String fileContents, GridWidget gridWidget) { switch (gridWidget) { case SIMULATION: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getSimulation()); break; case BACKGROUND: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getBackground()); break; default: throw new IllegalArgumentException(""Illegal GridWidget "" + gridWidget); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); } public interface ScenarioSimulationEditorWrapper { void onImport(String, RemoteCallback<AbstractScesimModel>, ErrorCallback<Object>, AbstractScesimModel<?extendsAbstractScesimData>); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void onImport(String fileContents, GridWidget gridWidget) { switch (gridWidget) { case SIMULATION: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getSimulation()); break; case BACKGROUND: scenarioSimulationEditorWrapper.onImport(fileContents, getImportCallBack(), getImportErrorCallback(), context.getStatus().getBackground()); break; default: throw new IllegalArgumentException(""Illegal GridWidget "" + gridWidget); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); } public interface ScenarioSimulationEditorWrapper { void onImport(String, RemoteCallback<AbstractScesimModel>, ErrorCallback<Object>, AbstractScesimModel<?extendsAbstractScesimData>); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void resetDocks() { presenterSpy.resetDocks(); verify(abstractScenarioSimulationDocksHandlerMock, times(1)).resetDocks(); }","ScenarioSimulationEditorPresenter { protected void resetDocks() { abstractScenarioSimulationDocksHandler.resetDocks(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { protected void resetDocks() { abstractScenarioSimulationDocksHandler.resetDocks(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler; }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void resetDocks(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { protected void resetDocks() { abstractScenarioSimulationDocksHandler.resetDocks(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler;</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void resetDocks(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onUberfireDocksInteractionEvent() { UberfireDocksInteractionEvent uberfireDocksInteractionEventMock = mock(UberfireDocksInteractionEvent.class); doReturn(false).when(presenterSpy).isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEventMock); presenterSpy.onUberfireDocksInteractionEvent(uberfireDocksInteractionEventMock); verify(presenterSpy, times(1)).isUberfireDocksInteractionEventToManage(eq(uberfireDocksInteractionEventMock)); verify(uberfireDocksInteractionEventMock, never()).getTargetDock(); verify(presenterSpy, never()).populateRightDocks(anyString()); verify(scenarioSimulationEditorWrapperMock, never()).populateDocks(anyString()); reset(presenterSpy); presenterSpy.dataManagementStrategy = null; presenterSpy.onUberfireDocksInteractionEvent(uberfireDocksInteractionEventMock); verify(presenterSpy, times(1)).isUberfireDocksInteractionEventToManage(eq(uberfireDocksInteractionEventMock)); verify(presenterSpy, never()).populateRightDocks(anyString()); verify(scenarioSimulationEditorWrapperMock, never()).populateDocks(anyString()); reset(presenterSpy); reset(uberfireDocksInteractionEventMock); presenterSpy.dataManagementStrategy = dataManagementStrategyMock; UberfireDock targetDockMock = mock(UberfireDock.class); when(uberfireDocksInteractionEventMock.getTargetDock()).thenReturn(targetDockMock); doReturn(true).when(presenterSpy).isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEventMock); when(targetDockMock.getIdentifier()).thenReturn(SettingsPresenter.IDENTIFIER); when(targetDockMock.getPlaceRequest()).thenReturn(placeRequestMock); presenterSpy.onUberfireDocksInteractionEvent(uberfireDocksInteractionEventMock); verify(presenterSpy, times(1)).isUberfireDocksInteractionEventToManage(eq(uberfireDocksInteractionEventMock)); verify(uberfireDocksInteractionEventMock, times(2)).getTargetDock(); verify(presenterSpy, times(1)).populateRightDocks(eq(SettingsPresenter.IDENTIFIER)); verify(scenarioSimulationEditorWrapperMock, times(1)).populateDocks(eq(SettingsPresenter.IDENTIFIER)); reset(presenterSpy); reset(uberfireDocksInteractionEventMock); presenterSpy.dataManagementStrategy = dataManagementStrategyMock; when(uberfireDocksInteractionEventMock.getTargetDock()).thenReturn(targetDockMock); doReturn(true).when(presenterSpy).isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEventMock); when(targetDockMock.getIdentifier()).thenReturn(CheatSheetPresenter.IDENTIFIER); when(targetDockMock.getPlaceRequest()).thenReturn(placeRequestMock); presenterSpy.onUberfireDocksInteractionEvent(uberfireDocksInteractionEventMock); verify(presenterSpy, times(1)).isUberfireDocksInteractionEventToManage(eq(uberfireDocksInteractionEventMock)); verify(uberfireDocksInteractionEventMock, times(2)).getTargetDock(); verify(presenterSpy, times(1)).populateRightDocks(eq(CheatSheetPresenter.IDENTIFIER)); verify(scenarioSimulationEditorWrapperMock, times(1)).populateDocks(eq(CheatSheetPresenter.IDENTIFIER)); reset(presenterSpy, scenarioSimulationEditorWrapperMock, uberfireDocksInteractionEventMock); presenterSpy.dataManagementStrategy = dataManagementStrategyMock; when(uberfireDocksInteractionEventMock.getTargetDock()).thenReturn(targetDockMock); doReturn(true).when(presenterSpy).isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEventMock); when(targetDockMock.getIdentifier()).thenReturn(TestToolsPresenter.IDENTIFIER); when(targetDockMock.getPlaceRequest()).thenReturn(placeRequestMock); presenterSpy.onUberfireDocksInteractionEvent(uberfireDocksInteractionEventMock); verify(presenterSpy, times(1)).isUberfireDocksInteractionEventToManage(eq(uberfireDocksInteractionEventMock)); verify(uberfireDocksInteractionEventMock, times(1)).getTargetDock(); verify(presenterSpy, never()).populateRightDocks(anyString()); verify(scenarioSimulationEditorWrapperMock, never()).populateDocks(anyString()); }","ScenarioSimulationEditorPresenter { public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { if (isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEvent) && !TestToolsPresenter.IDENTIFIER.equals(uberfireDocksInteractionEvent.getTargetDock().getIdentifier())) { populateRightDocks(uberfireDocksInteractionEvent.getTargetDock().getIdentifier()); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { if (isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEvent) && !TestToolsPresenter.IDENTIFIER.equals(uberfireDocksInteractionEvent.getTargetDock().getIdentifier())) { populateRightDocks(uberfireDocksInteractionEvent.getTargetDock().getIdentifier()); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>@ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void onUberfireDocksInteractionEvent(@Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { if (isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEvent) && !TestToolsPresenter.IDENTIFIER.equals(uberfireDocksInteractionEvent.getTargetDock().getIdentifier())) { populateRightDocks(uberfireDocksInteractionEvent.getTargetDock().getIdentifier()); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void testOtherwiseEmptyValue() throws Exception { addRow(1, ""John"", false); addRow(2, """", false); addRow(3, null, true); model.setData(data); String source = service.getSource(path, model); assertTrue(""Expected: name not in ( \""John\"", \""\"" )"", source.contains(""$p : Person( name not in ( \""John\"", \""\"" )"")); }","GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); @Override public String getPattern(); @Override public String getSource(Path, GuidedDecisionTable52); @Override public String getSource(Path); }","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); private Expander getDSLExpander(Path); }</FCTX> <ECTX></ECTX>","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); <PRIVATE_FCTX>private Expander getDSLExpander(Path);</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.io.IOException;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Collection;|import java.util.List;|import javax.enterprise.context.ApplicationScoped;|import javax.inject.Inject;|import javax.inject.Named;|import org.drools.compiler.lang.Expander;|import org.drools.compiler.lang.dsl.DSLMappingFile;|import org.drools.compiler.lang.dsl.DSLTokenizedMappingFile;|import org.drools.compiler.lang.dsl.DefaultExpander;|import org.drools.workbench.models.guided.dtable.backend.GuidedDTDRLPersistence;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.kie.workbench.common.services.backend.file.DSLFileFilter;|import org.kie.workbench.common.services.backend.source.BaseSourceService;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.kie.workbench.common.services.shared.source.SourceGenerationFailedException;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;|import org.uberfire.backend.server.util.Paths;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.Path;,import java.net.URI;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.HashSet;|import java.util.List;|import java.util.stream.Stream;|import org.drools.workbench.models.datamodel.rule.BaseSingleFieldConstraint;|import org.drools.workbench.models.guided.dtable.shared.model.ConditionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.DTCellValue52;|import org.drools.workbench.models.guided.dtable.shared.model.DescriptionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.models.guided.dtable.shared.model.Pattern52;|import org.drools.workbench.models.guided.dtable.shared.model.RowNumberCol52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.guvnor.common.services.project.model.Package;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.imports.Import;|import org.kie.soup.project.datamodel.imports.Imports;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.mockito.Mock;|import org.mockito.runners.MockitoJUnitRunner;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.FileSystem;|import org.uberfire.java.nio.file.Path;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Mockito.when;
"@Test public void isUberfireDocksInteractionEventToManage() { UberfireDocksInteractionEvent uberfireDocksInteractionEventMock = mock(UberfireDocksInteractionEvent.class); doReturn(null).when(uberfireDocksInteractionEventMock).getTargetDock(); assertFalse(presenterSpy.isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEventMock)); UberfireDock targetDockMock = mock(UberfireDock.class); when(uberfireDocksInteractionEventMock.getTargetDock()).thenReturn(targetDockMock); when(targetDockMock.getPlaceRequest()).thenReturn(placeRequestMock); when(placeRequestMock.getParameter(eq(SCESIMEDITOR_ID), eq(""""))).thenReturn(""UNKNOWN""); assertFalse(presenterSpy.isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEventMock)); doReturn(String.valueOf(presenterSpy.scenarioPresenterId)).when(placeRequestMock).getParameter(eq(SCESIMEDITOR_ID), eq("""")); assertTrue(presenterSpy.isUberfireDocksInteractionEventToManage(uberfireDocksInteractionEventMock)); }","ScenarioSimulationEditorPresenter { protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { return uberfireDocksInteractionEvent.getTargetDock() != null && uberfireDocksInteractionEvent.getTargetDock().getPlaceRequest().getParameter(SCESIMEDITOR_ID, """").equals(String.valueOf(scenarioPresenterId)); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { return uberfireDocksInteractionEvent.getTargetDock() != null && uberfireDocksInteractionEvent.getTargetDock().getPlaceRequest().getParameter(SCESIMEDITOR_ID, """").equals(String.valueOf(scenarioPresenterId)); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public static final String SCESIMEDITOR_ID = ""scesimeditorid""; }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent uberfireDocksInteractionEvent) { return uberfireDocksInteractionEvent.getTargetDock() != null && uberfireDocksInteractionEvent.getTargetDock().getPlaceRequest().getParameter(SCESIMEDITOR_ID, """").equals(String.valueOf(scenarioPresenterId)); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public static final String SCESIMEDITOR_ID = ""scesimeditorid""; }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void refreshModelContent() { when(scenarioSimulationModelMock.getSimulation()).thenReturn(simulationMock); List<ScenarioWithIndex> scenarioWithIndex = new ArrayList<>(); int scenarioNumber = 1; int scenarioIndex = scenarioNumber - 1; Scenario scenario = mock(Scenario.class); scenarioWithIndex.add(new ScenarioWithIndex(scenarioNumber, scenario)); List<BackgroundDataWithIndex> backgroundDataWithIndex = new ArrayList<>(); BackgroundData backgroundData = mock(BackgroundData.class); backgroundDataWithIndex.add(new BackgroundDataWithIndex(scenarioNumber, backgroundData)); TestResultMessage testResultMessage = mock(TestResultMessage.class); SimulationRunResult testRunResult = new SimulationRunResult(scenarioWithIndex, backgroundDataWithIndex, new SimulationRunMetadata(), testResultMessage); presenterSpy.refreshModelContent(testRunResult); verify(scenarioSimulationViewMock, times(1)).hideBusyIndicator(); verify(simulationMock, times(1)).replaceData(eq(scenarioIndex), eq(scenario)); assertEquals(scenarioSimulationModelMock, presenterSpy.getModel()); verify(scenarioGridWidgetSpy, times(1)).refreshContent(eq(simulationMock)); assertEquals(scenarioSimulationContextLocal.getStatus().getSimulation(), simulationMock); verify(backgroundMock, times(1)).replaceData(eq(scenarioIndex), eq(backgroundData)); verify(backgroundGridWidgetSpy, times(1)).refreshContent(eq(backgroundMock)); assertEquals(scenarioSimulationContextLocal.getStatus().getBackground(), backgroundMock); assertEquals(scenarioSimulationModelMock, presenterSpy.getModel()); verify(abstractScenarioSimulationDocksHandlerMock, times(1)).expandTestResultsDock(); verify(dataManagementStrategyMock, times(1)).setModel(eq(scenarioSimulationModelMock)); verify(scenarioSimulationEditorWrapperMock, times(1)).onRefreshedModelContent(eq(testRunResult)); }","ScenarioSimulationEditorPresenter { protected void refreshModelContent(SimulationRunResult newData) { view.hideBusyIndicator(); if (this.model == null) { return; } Simulation simulation = this.model.getSimulation(); for (ScenarioWithIndex scenarioWithIndex : newData.getScenarioWithIndex()) { int index = scenarioWithIndex.getIndex() - 1; simulation.replaceData(index, scenarioWithIndex.getScesimData()); } scenarioMainGridWidget.refreshContent(simulation); context.getStatus().setSimulation(simulation); boolean hasBackgroundError = false; Background background = this.model.getBackground(); for (BackgroundDataWithIndex backgroundDataWithIndex : newData.getBackgroundDataWithIndex()) { int index = backgroundDataWithIndex.getIndex() - 1; BackgroundData scesimData = backgroundDataWithIndex.getScesimData(); background.replaceData(index, scesimData); hasBackgroundError |= scesimData.getUnmodifiableFactMappingValues().stream().anyMatch(elem -> !FactMappingValueStatus.SUCCESS.equals(elem.getStatus())); } scenarioBackgroundGridWidget.refreshContent(background); context.getStatus().setBackground(background); if (hasBackgroundError) { sendNotification(ScenarioSimulationEditorConstants.INSTANCE.backgroundErrorNotification(), NotificationEvent.NotificationType.ERROR); selectBackgroundTab(); } dataManagementStrategy.setModel(model); abstractScenarioSimulationDocksHandler.expandTestResultsDock(); scenarioSimulationEditorWrapper.onRefreshedModelContent(newData); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { protected void refreshModelContent(SimulationRunResult newData) { view.hideBusyIndicator(); if (this.model == null) { return; } Simulation simulation = this.model.getSimulation(); for (ScenarioWithIndex scenarioWithIndex : newData.getScenarioWithIndex()) { int index = scenarioWithIndex.getIndex() - 1; simulation.replaceData(index, scenarioWithIndex.getScesimData()); } scenarioMainGridWidget.refreshContent(simulation); context.getStatus().setSimulation(simulation); boolean hasBackgroundError = false; Background background = this.model.getBackground(); for (BackgroundDataWithIndex backgroundDataWithIndex : newData.getBackgroundDataWithIndex()) { int index = backgroundDataWithIndex.getIndex() - 1; BackgroundData scesimData = backgroundDataWithIndex.getScesimData(); background.replaceData(index, scesimData); hasBackgroundError |= scesimData.getUnmodifiableFactMappingValues().stream().anyMatch(elem -> !FactMappingValueStatus.SUCCESS.equals(elem.getStatus())); } scenarioBackgroundGridWidget.refreshContent(background); context.getStatus().setBackground(background); if (hasBackgroundError) { sendNotification(ScenarioSimulationEditorConstants.INSTANCE.backgroundErrorNotification(), NotificationEvent.NotificationType.ERROR); selectBackgroundTab(); } dataManagementStrategy.setModel(model); abstractScenarioSimulationDocksHandler.expandTestResultsDock(); scenarioSimulationEditorWrapper.onRefreshedModelContent(newData); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private ScenarioSimulationView view; private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler; }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public abstract void expandTestResultsDock(); } public interface DataManagementStrategy { void setModel(ScenarioSimulationModel); } public class ScenarioGridWidget extends ResizeComposite { public void refreshContent(AbstractScesimModel); } public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); } public interface ScenarioSimulationEditorConstants extends Messages { } public interface ScenarioSimulationEditorWrapper { void onRefreshedModelContent(SimulationRunResult); } public interface ScenarioSimulationView extends KieEditorView, IsWidget, RequiresResize { hideBusyIndicator(); } @Portable public class SimulationRunResult { public SimulationRunResult(); public SimulationRunResult(List<ScenarioWithIndex>, List<BackgroundDataWithIndex>, SimulationRunMetadata, TestResultMessage); public List<ScenarioWithIndex> getScenarioWithIndex(); public List<BackgroundDataWithIndex> getBackgroundDataWithIndex(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { protected void refreshModelContent(SimulationRunResult newData) { view.hideBusyIndicator(); if (this.model == null) { return; } Simulation simulation = this.model.getSimulation(); for (ScenarioWithIndex scenarioWithIndex : newData.getScenarioWithIndex()) { int index = scenarioWithIndex.getIndex() - 1; simulation.replaceData(index, scenarioWithIndex.getScesimData()); } scenarioMainGridWidget.refreshContent(simulation); context.getStatus().setSimulation(simulation); boolean hasBackgroundError = false; Background background = this.model.getBackground(); for (BackgroundDataWithIndex backgroundDataWithIndex : newData.getBackgroundDataWithIndex()) { int index = backgroundDataWithIndex.getIndex() - 1; BackgroundData scesimData = backgroundDataWithIndex.getScesimData(); background.replaceData(index, scesimData); hasBackgroundError |= scesimData.getUnmodifiableFactMappingValues().stream().anyMatch(elem -> !FactMappingValueStatus.SUCCESS.equals(elem.getStatus())); } scenarioBackgroundGridWidget.refreshContent(background); context.getStatus().setBackground(background); if (hasBackgroundError) { sendNotification(ScenarioSimulationEditorConstants.INSTANCE.backgroundErrorNotification(), NotificationEvent.NotificationType.ERROR); selectBackgroundTab(); } dataManagementStrategy.setModel(model); abstractScenarioSimulationDocksHandler.expandTestResultsDock(); scenarioSimulationEditorWrapper.onRefreshedModelContent(newData); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private ScenarioSimulationView view; private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler;</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public abstract void expandTestResultsDock(); } public interface DataManagementStrategy { void setModel(ScenarioSimulationModel); } public class ScenarioGridWidget extends ResizeComposite { public void refreshContent(AbstractScesimModel); } public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); } public interface ScenarioSimulationEditorConstants extends Messages { } public interface ScenarioSimulationEditorWrapper { void onRefreshedModelContent(SimulationRunResult); } public interface ScenarioSimulationView extends KieEditorView, IsWidget, RequiresResize { hideBusyIndicator(); } @Portable public class SimulationRunResult { public SimulationRunResult(); public SimulationRunResult(List<ScenarioWithIndex>, List<BackgroundDataWithIndex>, SimulationRunMetadata, TestResultMessage); public List<ScenarioWithIndex> getScenarioWithIndex(); public List<BackgroundDataWithIndex> getBackgroundDataWithIndex(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void makeMenuBar() { presenterSpy.makeMenuBar(fileMenuBuilderMock); verify(fileMenuBuilderMock, times(1)).addValidate(any()); verify(presenterSpy, times(1)).getValidateCommand(); verify(fileMenuBuilderMock, times(1)).addNewTopLevelMenu(runScenarioMenuItemMock); verify(fileMenuBuilderMock, times(1)).addNewTopLevelMenu(undoMenuItemMock); verify(fileMenuBuilderMock, times(1)).addNewTopLevelMenu(redoMenuItemMock); verify(fileMenuBuilderMock, times(1)).addNewTopLevelMenu(exportToCsvMenuItemMock); verify(undoMenuItemMock, times(1)).setEnabled(eq(false)); verify(redoMenuItemMock, times(1)).setEnabled(eq(false)); }","ScenarioSimulationEditorPresenter { public void makeMenuBar(FileMenuBuilder fileMenuBuilder) { fileMenuBuilder.addValidate(getValidateCommand()); fileMenuBuilder.addNewTopLevelMenu(runScenarioMenuItem); fileMenuBuilder.addNewTopLevelMenu(undoMenuItem); fileMenuBuilder.addNewTopLevelMenu(redoMenuItem); fileMenuBuilder.addNewTopLevelMenu(exportToCSVMenuItem); fileMenuBuilder.addNewTopLevelMenu(importMenuItem); undoMenuItem.setEnabled(false); redoMenuItem.setEnabled(false); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void makeMenuBar(FileMenuBuilder fileMenuBuilder) { fileMenuBuilder.addValidate(getValidateCommand()); fileMenuBuilder.addNewTopLevelMenu(runScenarioMenuItem); fileMenuBuilder.addNewTopLevelMenu(undoMenuItem); fileMenuBuilder.addNewTopLevelMenu(redoMenuItem); fileMenuBuilder.addNewTopLevelMenu(exportToCSVMenuItem); fileMenuBuilder.addNewTopLevelMenu(importMenuItem); undoMenuItem.setEnabled(false); redoMenuItem.setEnabled(false); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void makeMenuBar(FileMenuBuilder fileMenuBuilder) { fileMenuBuilder.addValidate(getValidateCommand()); fileMenuBuilder.addNewTopLevelMenu(runScenarioMenuItem); fileMenuBuilder.addNewTopLevelMenu(undoMenuItem); fileMenuBuilder.addNewTopLevelMenu(redoMenuItem); fileMenuBuilder.addNewTopLevelMenu(exportToCSVMenuItem); fileMenuBuilder.addNewTopLevelMenu(importMenuItem); undoMenuItem.setEnabled(false); redoMenuItem.setEnabled(false); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
@Test public void isDirty() { when(scenarioSimulationViewMock.getScenarioGridWidget()).thenThrow(new RuntimeException()); assertFalse(presenterSpy.isDirty()); },"ScenarioSimulationEditorPresenter { public boolean isDirty() { try { scenarioMainGridWidget.resetErrors(); int currentHashcode = MarshallingWrapper.toJSON(model).hashCode(); return scenarioSimulationEditorWrapper.getOriginalHash() != currentHashcode; } catch (Exception ignored) { return false; } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public boolean isDirty() { try { scenarioMainGridWidget.resetErrors(); int currentHashcode = MarshallingWrapper.toJSON(model).hashCode(); return scenarioSimulationEditorWrapper.getOriginalHash() != currentHashcode; } catch (Exception ignored) { return false; } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void resetErrors(); } public interface ScenarioSimulationEditorWrapper { Integer getOriginalHash(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public boolean isDirty() { try { scenarioMainGridWidget.resetErrors(); int currentHashcode = MarshallingWrapper.toJSON(model).hashCode(); return scenarioSimulationEditorWrapper.getOriginalHash() != currentHashcode; } catch (Exception ignored) { return false; } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void resetErrors(); } public interface ScenarioSimulationEditorWrapper { Integer getOriginalHash(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onEditTabSelected() { presenterSpy.onEditTabSelected(); InOrder inOrder = inOrder(presenterSpy, scenarioGridWidgetSpy, backgroundGridWidgetSpy); inOrder.verify(presenterSpy, times(1)).setItemMenuEnabled(eq(true)); inOrder.verify(presenterSpy, times(1)).populateRightDocks(eq(TestToolsPresenter.IDENTIFIER)); inOrder.verify(scenarioGridWidgetSpy, times(1)).selectAndFocus(); inOrder.verify(backgroundGridWidgetSpy, times(1)).deselectAndUnFocus(); }","ScenarioSimulationEditorPresenter { public void onEditTabSelected() { setItemMenuEnabled(true); populateRightDocks(TestToolsPresenter.IDENTIFIER); scenarioMainGridWidget.selectAndFocus(); scenarioBackgroundGridWidget.deselectAndUnFocus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void onEditTabSelected() { setItemMenuEnabled(true); populateRightDocks(TestToolsPresenter.IDENTIFIER); scenarioMainGridWidget.selectAndFocus(); scenarioBackgroundGridWidget.deselectAndUnFocus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void selectAndFocus(); public void deselectAndUnFocus(); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void onEditTabSelected() { setItemMenuEnabled(true); populateRightDocks(TestToolsPresenter.IDENTIFIER); scenarioMainGridWidget.selectAndFocus(); scenarioBackgroundGridWidget.deselectAndUnFocus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void selectAndFocus(); public void deselectAndUnFocus(); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onBackgroundTabSelected() { presenterSpy.onBackgroundTabSelected(); InOrder inOrder = inOrder(presenterSpy, scenarioGridWidgetSpy, backgroundGridWidgetSpy); inOrder.verify(presenterSpy, times(1)).setItemMenuEnabled(eq(true)); inOrder.verify(presenterSpy, times(1)).populateRightDocks(eq(TestToolsPresenter.IDENTIFIER)); inOrder.verify(backgroundGridWidgetSpy, times(1)).selectAndFocus(); inOrder.verify(scenarioGridWidgetSpy, times(1)).deselectAndUnFocus(); }","ScenarioSimulationEditorPresenter { public void onBackgroundTabSelected() { setItemMenuEnabled(true); populateRightDocks(TestToolsPresenter.IDENTIFIER); scenarioBackgroundGridWidget.selectAndFocus(); scenarioMainGridWidget.deselectAndUnFocus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void onBackgroundTabSelected() { setItemMenuEnabled(true); populateRightDocks(TestToolsPresenter.IDENTIFIER); scenarioBackgroundGridWidget.selectAndFocus(); scenarioMainGridWidget.deselectAndUnFocus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void selectAndFocus(); public void deselectAndUnFocus(); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void onBackgroundTabSelected() { setItemMenuEnabled(true); populateRightDocks(TestToolsPresenter.IDENTIFIER); scenarioBackgroundGridWidget.selectAndFocus(); scenarioMainGridWidget.deselectAndUnFocus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void selectAndFocus(); public void deselectAndUnFocus(); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onOverviewSelected() { presenterSpy.onOverviewSelected(); verify(presenterSpy, times(1)).setItemMenuEnabled(eq(false)); verify(scenarioGridWidgetSpy, times(1)).deselectAndUnFocus(); verify(backgroundGridWidgetSpy, times(1)).deselectAndUnFocus(); }","ScenarioSimulationEditorPresenter { public void onOverviewSelected() { setItemMenuEnabled(false); scenarioMainGridWidget.deselectAndUnFocus(); scenarioBackgroundGridWidget.deselectAndUnFocus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void onOverviewSelected() { setItemMenuEnabled(false); scenarioMainGridWidget.deselectAndUnFocus(); scenarioBackgroundGridWidget.deselectAndUnFocus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void deselectAndUnFocus(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void onOverviewSelected() { setItemMenuEnabled(false); scenarioMainGridWidget.deselectAndUnFocus(); scenarioBackgroundGridWidget.deselectAndUnFocus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void deselectAndUnFocus(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onImportsTabSelected() { presenterSpy.onImportsTabSelected(); verify(presenterSpy, times(1)).setItemMenuEnabled(eq(false)); verify(scenarioGridWidgetSpy, times(1)).deselectAndUnFocus(); verify(backgroundGridWidgetSpy, times(1)).deselectAndUnFocus(); }","ScenarioSimulationEditorPresenter { public void onImportsTabSelected() { setItemMenuEnabled(false); scenarioMainGridWidget.deselectAndUnFocus(); scenarioBackgroundGridWidget.deselectAndUnFocus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void onImportsTabSelected() { setItemMenuEnabled(false); scenarioMainGridWidget.deselectAndUnFocus(); scenarioBackgroundGridWidget.deselectAndUnFocus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void deselectAndUnFocus(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void onImportsTabSelected() { setItemMenuEnabled(false); scenarioMainGridWidget.deselectAndUnFocus(); scenarioBackgroundGridWidget.deselectAndUnFocus(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void deselectAndUnFocus(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void validateSimulation() { presenterSpy.validateSimulation(); verify(scenarioSimulationEditorWrapperMock, times(1)).validate(eq(simulationMock), eq(settingsLocal), isA(RemoteCallback.class)); }","ScenarioSimulationEditorPresenter { public void validateSimulation() { scenarioSimulationEditorWrapper.validate(model.getSimulation(), model.getSettings(), getValidationCallback()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void validateSimulation() { scenarioSimulationEditorWrapper.validate(model.getSimulation(), model.getSettings(), getValidationCallback()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { void validate(Simulation, Settings, RemoteCallback<?>); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void validateSimulation() { scenarioSimulationEditorWrapper.validate(model.getSimulation(), model.getSettings(), getValidationCallback()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { void validate(Simulation, Settings, RemoteCallback<?>); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void selectSimulationTab() { presenterSpy.selectSimulationTab(); verify(scenarioSimulationEditorWrapperMock, times(1)).selectSimulationTab(); }","ScenarioSimulationEditorPresenter { public void selectSimulationTab() { scenarioSimulationEditorWrapper.selectSimulationTab(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void selectSimulationTab() { scenarioSimulationEditorWrapper.selectSimulationTab(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { void selectSimulationTab(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void selectSimulationTab() { scenarioSimulationEditorWrapper.selectSimulationTab(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { void selectSimulationTab(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void testOtherwiseEmptyAndNullValue() throws Exception { addRow(1, """", false); addRow(2, null, false); addRow(3, null, true); model.setData(data); String source = service.getSource(path, model); assertTrue(""Expected: name not in ( \""\"" )"", source.contains(""$p : Person( name not in ( \""\"" )"")); }","GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); @Override public String getPattern(); @Override public String getSource(Path, GuidedDecisionTable52); @Override public String getSource(Path); }","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); private Expander getDSLExpander(Path); }</FCTX> <ECTX></ECTX>","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); <PRIVATE_FCTX>private Expander getDSLExpander(Path);</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.io.IOException;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Collection;|import java.util.List;|import javax.enterprise.context.ApplicationScoped;|import javax.inject.Inject;|import javax.inject.Named;|import org.drools.compiler.lang.Expander;|import org.drools.compiler.lang.dsl.DSLMappingFile;|import org.drools.compiler.lang.dsl.DSLTokenizedMappingFile;|import org.drools.compiler.lang.dsl.DefaultExpander;|import org.drools.workbench.models.guided.dtable.backend.GuidedDTDRLPersistence;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.kie.workbench.common.services.backend.file.DSLFileFilter;|import org.kie.workbench.common.services.backend.source.BaseSourceService;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.kie.workbench.common.services.shared.source.SourceGenerationFailedException;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;|import org.uberfire.backend.server.util.Paths;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.Path;,import java.net.URI;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.HashSet;|import java.util.List;|import java.util.stream.Stream;|import org.drools.workbench.models.datamodel.rule.BaseSingleFieldConstraint;|import org.drools.workbench.models.guided.dtable.shared.model.ConditionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.DTCellValue52;|import org.drools.workbench.models.guided.dtable.shared.model.DescriptionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.models.guided.dtable.shared.model.Pattern52;|import org.drools.workbench.models.guided.dtable.shared.model.RowNumberCol52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.guvnor.common.services.project.model.Package;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.imports.Import;|import org.kie.soup.project.datamodel.imports.Imports;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.mockito.Mock;|import org.mockito.runners.MockitoJUnitRunner;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.FileSystem;|import org.uberfire.java.nio.file.Path;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Mockito.when;
"@Test public void selectBackgroundTab() { presenterSpy.selectBackgroundTab(); verify(scenarioSimulationEditorWrapperMock, times(1)).selectBackgroundTab(); }","ScenarioSimulationEditorPresenter { public void selectBackgroundTab() { scenarioSimulationEditorWrapper.selectBackgroundTab(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void selectBackgroundTab() { scenarioSimulationEditorWrapper.selectBackgroundTab(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { void selectBackgroundTab(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void selectBackgroundTab() { scenarioSimulationEditorWrapper.selectBackgroundTab(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { void selectBackgroundTab(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onDownload() { String DOWNLOAD_URL = ""DOWNLOAD_URL""; Supplier<Path> pathSupplierMock = mock(Supplier.class); doReturn(DOWNLOAD_URL).when(presenterSpy).getFileDownloadURL(eq(pathSupplierMock)); presenterSpy.onDownload(pathSupplierMock); verify(presenterSpy, times(1)).getFileDownloadURL(eq(pathSupplierMock)); verify(presenterSpy, times(1)).open(eq(DOWNLOAD_URL)); }","ScenarioSimulationEditorPresenter { protected void onDownload(final Supplier<Path> pathSupplier) { final String downloadURL = getFileDownloadURL(pathSupplier); open(downloadURL); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { protected void onDownload(final Supplier<Path> pathSupplier) { final String downloadURL = getFileDownloadURL(pathSupplier); open(downloadURL); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { protected void onDownload(final Supplier<Path> pathSupplier) { final String downloadURL = getFileDownloadURL(pathSupplier); open(downloadURL); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void showImportDialogSIMULATION() { when(backgroundGridWidgetSpy.isSelected()).thenReturn(false); when(scenarioGridWidgetSpy.isSelected()).thenReturn(true); presenterSpy.showImportDialog(); verify(eventBusMock, times(1)).fireEvent(isA(ImportEvent.class)); }","ScenarioSimulationEditorPresenter { protected void showImportDialog() { context.getSelectedGridWidget().ifPresent(gridWidget -> eventBus.fireEvent(new ImportEvent(gridWidget))); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { protected void showImportDialog() { context.getSelectedGridWidget().ifPresent(gridWidget -> eventBus.fireEvent(new ImportEvent(gridWidget))); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Optional<GridWidget> getSelectedGridWidget(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { protected void showImportDialog() { context.getSelectedGridWidget().ifPresent(gridWidget -> eventBus.fireEvent(new ImportEvent(gridWidget))); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Optional<GridWidget> getSelectedGridWidget(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void showImportDialogBACKGROUND() { when(backgroundGridWidgetSpy.isSelected()).thenReturn(true); when(scenarioGridWidgetSpy.isSelected()).thenReturn(false); presenterSpy.showImportDialog(); verify(eventBusMock, times(1)).fireEvent(isA(ImportEvent.class)); }","ScenarioSimulationEditorPresenter { protected void showImportDialog() { context.getSelectedGridWidget().ifPresent(gridWidget -> eventBus.fireEvent(new ImportEvent(gridWidget))); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { protected void showImportDialog() { context.getSelectedGridWidget().ifPresent(gridWidget -> eventBus.fireEvent(new ImportEvent(gridWidget))); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Optional<GridWidget> getSelectedGridWidget(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { protected void showImportDialog() { context.getSelectedGridWidget().ifPresent(gridWidget -> eventBus.fireEvent(new ImportEvent(gridWidget))); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Optional<GridWidget> getSelectedGridWidget(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void showImportDialogNone() { when(backgroundGridWidgetSpy.isSelected()).thenReturn(false); when(scenarioGridWidgetSpy.isSelected()).thenReturn(false); presenterSpy.showImportDialog(); verify(eventBusMock, never()).fireEvent(isA(ImportEvent.class)); }","ScenarioSimulationEditorPresenter { protected void showImportDialog() { context.getSelectedGridWidget().ifPresent(gridWidget -> eventBus.fireEvent(new ImportEvent(gridWidget))); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { protected void showImportDialog() { context.getSelectedGridWidget().ifPresent(gridWidget -> eventBus.fireEvent(new ImportEvent(gridWidget))); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Optional<GridWidget> getSelectedGridWidget(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { protected void showImportDialog() { context.getSelectedGridWidget().ifPresent(gridWidget -> eventBus.fireEvent(new ImportEvent(gridWidget))); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Optional<GridWidget> getSelectedGridWidget(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void setTestTools() { presenterSpy.setTestTools(testToolsPresenterMock); assertEquals(scenarioSimulationContextLocal.getTestToolsPresenter(), testToolsPresenterMock); verify(testToolsPresenterMock, times(1)).setEventBus(eq(eventBusMock)); verify(dataManagementStrategyMock, times(1)).populateTestTools(eq(testToolsPresenterMock), eq(scenarioSimulationContextLocal), eq(GridWidget.SIMULATION)); }","ScenarioSimulationEditorPresenter { public void setTestTools(TestToolsView.Presenter presenter) { context.setTestToolsPresenter(presenter); presenter.setEventBus(eventBus); GridWidget gridWidget = scenarioBackgroundGridWidget.isSelected() ? GridWidget.BACKGROUND : GridWidget.SIMULATION; dataManagementStrategy.populateTestTools(presenter, context, gridWidget); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void setTestTools(TestToolsView.Presenter presenter) { context.setTestToolsPresenter(presenter); presenter.setEventBus(eventBus); GridWidget gridWidget = scenarioBackgroundGridWidget.isSelected() ? GridWidget.BACKGROUND : GridWidget.SIMULATION; dataManagementStrategy.populateTestTools(presenter, context, gridWidget); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public interface DataManagementStrategy { void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); } public class ScenarioGridWidget extends ResizeComposite { public boolean isSelected(); } public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public void setTestToolsPresenter(TestToolsView.Presenter); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void setTestTools(TestToolsView.Presenter presenter) { context.setTestToolsPresenter(presenter); presenter.setEventBus(eventBus); GridWidget gridWidget = scenarioBackgroundGridWidget.isSelected() ? GridWidget.BACKGROUND : GridWidget.SIMULATION; dataManagementStrategy.populateTestTools(presenter, context, gridWidget); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface DataManagementStrategy { void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); } public class ScenarioGridWidget extends ResizeComposite { public boolean isSelected(); } public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public void setTestToolsPresenter(TestToolsView.Presenter); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void setCheatSheet() { presenterSpy.setCheatSheet(cheatSheetPresenterMock); verify(cheatSheetPresenterMock, times(1)).initCheatSheet(isA(ScenarioSimulationModel.Type.class)); }","ScenarioSimulationEditorPresenter { public void setCheatSheet(CheatSheetView.Presenter presenter) { Type modelType = dataManagementStrategy instanceof AbstractDMODataManagementStrategy ? Type.RULE : Type.DMN; presenter.initCheatSheet(modelType); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void setCheatSheet(CheatSheetView.Presenter presenter) { Type modelType = dataManagementStrategy instanceof AbstractDMODataManagementStrategy ? Type.RULE : Type.DMN; presenter.initCheatSheet(modelType); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void setCheatSheet(CheatSheetView.Presenter presenter) { Type modelType = dataManagementStrategy instanceof AbstractDMODataManagementStrategy ? Type.RULE : Type.DMN; presenter.initCheatSheet(modelType); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void setSettings() { presenterSpy.setSettings(settingsPresenterMock); verify(settingsPresenterMock, times(1)).setScenarioType(isA(ScenarioSimulationModel.Type.class), any(), any()); }","ScenarioSimulationEditorPresenter { public void setSettings(SettingsView.Presenter presenter) { Type modelType = dataManagementStrategy instanceof AbstractDMODataManagementStrategy ? Type.RULE : Type.DMN; presenter.setEventBus(eventBus); presenter.setScenarioType(modelType, model.getSettings(), path.getFileName()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void setSettings(SettingsView.Presenter presenter) { Type modelType = dataManagementStrategy instanceof AbstractDMODataManagementStrategy ? Type.RULE : Type.DMN; presenter.setEventBus(eventBus); presenter.setScenarioType(modelType, model.getSettings(), path.getFileName()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void setSettings(SettingsView.Presenter presenter) { Type modelType = dataManagementStrategy instanceof AbstractDMODataManagementStrategy ? Type.RULE : Type.DMN; presenter.setEventBus(eventBus); presenter.setScenarioType(modelType, model.getSettings(), path.getFileName()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void populateRightDocks() { presenterSpy.populateRightDocks(TestToolsPresenter.IDENTIFIER); verify(scenarioSimulationEditorWrapperMock, times(1)).populateDocks(eq(TestToolsPresenter.IDENTIFIER)); }","ScenarioSimulationEditorPresenter { public void populateRightDocks(String identifier) { if (dataManagementStrategy != null) { scenarioSimulationEditorWrapper.populateDocks(identifier); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void populateRightDocks(String identifier) { if (dataManagementStrategy != null) { scenarioSimulationEditorWrapper.populateDocks(identifier); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { default void populateDocks(String); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void populateRightDocks(String identifier) { if (dataManagementStrategy != null) { scenarioSimulationEditorWrapper.populateDocks(identifier); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { default void populateDocks(String); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void populateRightDocksEmptyDataStrategy() { presenterSpy.dataManagementStrategy = null; presenterSpy.populateRightDocks(TestToolsPresenter.IDENTIFIER); verify(scenarioSimulationEditorWrapperMock, never()).populateDocks(anyString()); }","ScenarioSimulationEditorPresenter { public void populateRightDocks(String identifier) { if (dataManagementStrategy != null) { scenarioSimulationEditorWrapper.populateDocks(identifier); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void populateRightDocks(String identifier) { if (dataManagementStrategy != null) { scenarioSimulationEditorWrapper.populateDocks(identifier); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { default void populateDocks(String); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void populateRightDocks(String identifier) { if (dataManagementStrategy != null) { scenarioSimulationEditorWrapper.populateDocks(identifier); } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { default void populateDocks(String); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void testOtherwiseTwoTimes() throws Exception { addRow(1, ""John"", false); addRow(2, null, true); addRow(3, ""Peter"", false); addRow(4, null, true); model.setData(data); String source = service.getSource(path, model); assertTrue(""Expected: name not in ( \""John\"", \""Peter\"" )"", source.contains(""$p : Person( name not in ( \""John\"", \""Peter\"" )"")); source.replaceFirst(""John"", """"); assertTrue(""Expected: name not in ( \""John\"", \""Peter\"" )"", source.contains(""$p : Person( name not in ( \""John\"", \""Peter\"" )"")); }","GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); @Override public String getPattern(); @Override public String getSource(Path, GuidedDecisionTable52); @Override public String getSource(Path); }","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); private Expander getDSLExpander(Path); }</FCTX> <ECTX></ECTX>","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); <PRIVATE_FCTX>private Expander getDSLExpander(Path);</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.io.IOException;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Collection;|import java.util.List;|import javax.enterprise.context.ApplicationScoped;|import javax.inject.Inject;|import javax.inject.Named;|import org.drools.compiler.lang.Expander;|import org.drools.compiler.lang.dsl.DSLMappingFile;|import org.drools.compiler.lang.dsl.DSLTokenizedMappingFile;|import org.drools.compiler.lang.dsl.DefaultExpander;|import org.drools.workbench.models.guided.dtable.backend.GuidedDTDRLPersistence;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.kie.workbench.common.services.backend.file.DSLFileFilter;|import org.kie.workbench.common.services.backend.source.BaseSourceService;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.kie.workbench.common.services.shared.source.SourceGenerationFailedException;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;|import org.uberfire.backend.server.util.Paths;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.Path;,import java.net.URI;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.HashSet;|import java.util.List;|import java.util.stream.Stream;|import org.drools.workbench.models.datamodel.rule.BaseSingleFieldConstraint;|import org.drools.workbench.models.guided.dtable.shared.model.ConditionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.DTCellValue52;|import org.drools.workbench.models.guided.dtable.shared.model.DescriptionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.models.guided.dtable.shared.model.Pattern52;|import org.drools.workbench.models.guided.dtable.shared.model.RowNumberCol52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.guvnor.common.services.project.model.Package;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.imports.Import;|import org.kie.soup.project.datamodel.imports.Imports;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.mockito.Mock;|import org.mockito.runners.MockitoJUnitRunner;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.FileSystem;|import org.uberfire.java.nio.file.Path;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Mockito.when;
"@Test public void getModelSuccessCallbackMethod() { scenarioGridWidgetSpy.selectAndFocus(); presenterSpy.getModelSuccessCallbackMethod(dataManagementStrategyMock, modelLocal); verify(presenterSpy, times(1)).populateRightDocks(TestToolsPresenter.IDENTIFIER); verify(presenterSpy, times(1)).populateRightDocks(SettingsPresenter.IDENTIFIER); verify(scenarioGridWidgetSpy, times(1)).setContent(eq(content.getModel().getSimulation()), eq(settingsLocal.getType())); verify(scenarioSimulationEditorWrapperMock, times(1)).addBackgroundPage(eq(backgroundGridWidgetSpy)); assertEquals(scenarioSimulationContextLocal.getStatus().getSimulation(), content.getModel().getSimulation()); assertEquals(scenarioSimulationContextLocal.getStatus().getBackground(), content.getModel().getBackground()); verify(presenterSpy, times(1)).getValidateCommand(); verify(scenarioGridWidgetSpy, atLeastOnce()).selectAndFocus(); }","ScenarioSimulationEditorPresenter { public void getModelSuccessCallbackMethod(DataManagementStrategy dataManagementStrategy, ScenarioSimulationModel model) { this.dataManagementStrategy = dataManagementStrategy; this.model = model; scenarioSimulationEditorWrapper.addBackgroundPage(scenarioBackgroundGridWidget); context.getStatus().setSimulation(model.getSimulation()); context.getStatus().setBackground(model.getBackground()); scenarioMainGridWidget.setContent(model.getSimulation(), model.getSettings().getType()); scenarioBackgroundGridWidget.setContent(model.getBackground(), model.getSettings().getType()); populateRightDocks(TestToolsPresenter.IDENTIFIER); populateRightDocks(SettingsPresenter.IDENTIFIER); CustomBusyPopup.close(); context.getSelectedScenarioGridWidget().ifPresent(ScenarioGridWidget::selectAndFocus); getValidateCommand().execute(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void getModelSuccessCallbackMethod(DataManagementStrategy dataManagementStrategy, ScenarioSimulationModel model) { this.dataManagementStrategy = dataManagementStrategy; this.model = model; scenarioSimulationEditorWrapper.addBackgroundPage(scenarioBackgroundGridWidget); context.getStatus().setSimulation(model.getSimulation()); context.getStatus().setBackground(model.getBackground()); scenarioMainGridWidget.setContent(model.getSimulation(), model.getSettings().getType()); scenarioBackgroundGridWidget.setContent(model.getBackground(), model.getSettings().getType()); populateRightDocks(TestToolsPresenter.IDENTIFIER); populateRightDocks(SettingsPresenter.IDENTIFIER); CustomBusyPopup.close(); context.getSelectedScenarioGridWidget().ifPresent(ScenarioGridWidget::selectAndFocus); getValidateCommand().execute(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class CustomBusyPopup extends DecoratedPopupPanel { public static void close(); } public class ScenarioGridWidget extends ResizeComposite { public void selectAndFocus(); public void setContent(AbstractScesimModel, ScenarioSimulationModel.Type); } public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); public Optional<ScenarioGridWidget> getSelectedScenarioGridWidget(); } public interface ScenarioSimulationEditorWrapper { void addBackgroundPage(ScenarioGridWidget); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class SettingsPresenter extends AbstractSubDockPresenter<SettingsView> implements SettingsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.Settings""; public SettingsPresenter(); @Inject public SettingsPresenter(SettingsScenarioSimulationDropdown, SettingsView); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void getModelSuccessCallbackMethod(DataManagementStrategy dataManagementStrategy, ScenarioSimulationModel model) { this.dataManagementStrategy = dataManagementStrategy; this.model = model; scenarioSimulationEditorWrapper.addBackgroundPage(scenarioBackgroundGridWidget); context.getStatus().setSimulation(model.getSimulation()); context.getStatus().setBackground(model.getBackground()); scenarioMainGridWidget.setContent(model.getSimulation(), model.getSettings().getType()); scenarioBackgroundGridWidget.setContent(model.getBackground(), model.getSettings().getType()); populateRightDocks(TestToolsPresenter.IDENTIFIER); populateRightDocks(SettingsPresenter.IDENTIFIER); CustomBusyPopup.close(); context.getSelectedScenarioGridWidget().ifPresent(ScenarioGridWidget::selectAndFocus); getValidateCommand().execute(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class CustomBusyPopup extends DecoratedPopupPanel { public static void close(); } public class ScenarioGridWidget extends ResizeComposite { public void selectAndFocus(); public void setContent(AbstractScesimModel, ScenarioSimulationModel.Type); } public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); public Optional<ScenarioGridWidget> getSelectedScenarioGridWidget(); } public interface ScenarioSimulationEditorWrapper { void addBackgroundPage(ScenarioGridWidget); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class SettingsPresenter extends AbstractSubDockPresenter<SettingsView> implements SettingsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.Settings""; public SettingsPresenter(); @Inject public SettingsPresenter(SettingsScenarioSimulationDropdown, SettingsView); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onExportToCsvSIMULATION() { when(backgroundGridWidgetSpy.isSelected()).thenReturn(false); when(scenarioGridWidgetSpy.isSelected()).thenReturn(true); presenterSpy.onExportToCsv(); verify(scenarioSimulationEditorWrapperMock, times(1)).onExportToCsv(isA(RemoteCallback.class), isA(ScenarioSimulationHasBusyIndicatorDefaultErrorCallback.class), eq(simulationMock)); }","ScenarioSimulationEditorPresenter { protected void onExportToCsv() { context.getSelectedGridWidget().ifPresent(gridWidget -> scenarioSimulationEditorWrapper.onExportToCsv(getExportCallBack(), new ScenarioSimulationHasBusyIndicatorDefaultErrorCallback(view), context.getAbstractScesimModelByGridWidget(gridWidget))); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { protected void onExportToCsv() { context.getSelectedGridWidget().ifPresent(gridWidget -> scenarioSimulationEditorWrapper.onExportToCsv(getExportCallBack(), new ScenarioSimulationHasBusyIndicatorDefaultErrorCallback(view), context.getAbstractScesimModelByGridWidget(gridWidget))); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private ScenarioSimulationView view; }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Optional<GridWidget> getSelectedGridWidget(); public <T extends AbstractScesimData> AbstractScesimModel<T> getAbstractScesimModelByGridWidget(GridWidget); } public interface ScenarioSimulationEditorWrapper { void onExportToCsv(RemoteCallback<String>, ScenarioSimulationHasBusyIndicatorDefaultErrorCallback, AbstractScesimModel<?extendsAbstractScesimData>); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { protected void onExportToCsv() { context.getSelectedGridWidget().ifPresent(gridWidget -> scenarioSimulationEditorWrapper.onExportToCsv(getExportCallBack(), new ScenarioSimulationHasBusyIndicatorDefaultErrorCallback(view), context.getAbstractScesimModelByGridWidget(gridWidget))); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private ScenarioSimulationView view;</PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Optional<GridWidget> getSelectedGridWidget(); public <T extends AbstractScesimData> AbstractScesimModel<T> getAbstractScesimModelByGridWidget(GridWidget); } public interface ScenarioSimulationEditorWrapper { void onExportToCsv(RemoteCallback<String>, ScenarioSimulationHasBusyIndicatorDefaultErrorCallback, AbstractScesimModel<?extendsAbstractScesimData>); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void cleanReadOnlyColumn() { Simulation simulation = new Simulation(); ScesimModelDescriptor simulationDescriptor = simulation.getScesimModelDescriptor(); FactMapping test1 = simulationDescriptor.addFactMapping(FactIdentifier.create(""test1"", String.class.getCanonicalName()), ExpressionIdentifier.create("""", FactMappingType.GIVEN)); FactMapping test2 = simulationDescriptor.addFactMapping(FactIdentifier.create(""test2"", String.class.getCanonicalName()), ExpressionIdentifier.create("""", FactMappingType.GIVEN)); test1.addExpressionElement(""test"", String.class.getCanonicalName()); Scenario scenario = simulation.addData(); scenario.addMappingValue(test1.getFactIdentifier(), test1.getExpressionIdentifier(), LOWER_CASE_VALUE); scenario.addMappingValue(test2.getFactIdentifier(), test2.getExpressionIdentifier(), LOWER_CASE_VALUE); presenterSpy.cleanReadOnlyColumn(simulation); assertNotNull(scenario.getFactMappingValue(test1.getFactIdentifier(), test1.getExpressionIdentifier()).get().getRawValue()); assertNull(scenario.getFactMappingValue(test2.getFactIdentifier(), test2.getExpressionIdentifier()).get().getRawValue()); }","ScenarioSimulationEditorPresenter { protected void cleanReadOnlyColumn(AbstractScesimModel abstractScesimModel) { ScesimModelDescriptor scesimModelDescriptor = abstractScesimModel.getScesimModelDescriptor(); for (int i = 0; i < abstractScesimModel.getUnmodifiableData().size(); i += 1) { AbstractScesimData abstractScesimData = abstractScesimModel.getDataByIndex(i); for (FactMapping factMapping : scesimModelDescriptor.getUnmodifiableFactMappings()) { if (isColumnReadOnly(factMapping)) { abstractScesimData.getFactMappingValue(factMapping.getFactIdentifier(), factMapping.getExpressionIdentifier()).ifPresent(fmv -> fmv.setRawValue(null)); } } } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { protected void cleanReadOnlyColumn(AbstractScesimModel abstractScesimModel) { ScesimModelDescriptor scesimModelDescriptor = abstractScesimModel.getScesimModelDescriptor(); for (int i = 0; i < abstractScesimModel.getUnmodifiableData().size(); i += 1) { AbstractScesimData abstractScesimData = abstractScesimModel.getDataByIndex(i); for (FactMapping factMapping : scesimModelDescriptor.getUnmodifiableFactMappings()) { if (isColumnReadOnly(factMapping)) { abstractScesimData.getFactMappingValue(factMapping.getFactIdentifier(), factMapping.getExpressionIdentifier()).ifPresent(fmv -> fmv.setRawValue(null)); } } } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private boolean isColumnReadOnly(FactMapping); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { protected void cleanReadOnlyColumn(AbstractScesimModel abstractScesimModel) { ScesimModelDescriptor scesimModelDescriptor = abstractScesimModel.getScesimModelDescriptor(); for (int i = 0; i < abstractScesimModel.getUnmodifiableData().size(); i += 1) { AbstractScesimData abstractScesimData = abstractScesimModel.getDataByIndex(i); for (FactMapping factMapping : scesimModelDescriptor.getUnmodifiableFactMappings()) { if (isColumnReadOnly(factMapping)) { abstractScesimData.getFactMappingValue(factMapping.getFactIdentifier(), factMapping.getExpressionIdentifier()).ifPresent(fmv -> fmv.setRawValue(null)); } } } } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private boolean isColumnReadOnly(FactMapping);</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void getValidationCallback() { presenterSpy.getValidationCallback().callback(null); verify(confirmPopupPresenterMock, never()).show(anyString(), anyString()); List<FactMappingValidationError> validationErrors = new ArrayList<>(); presenterSpy.getValidationCallback().callback(validationErrors); verify(confirmPopupPresenterMock, never()).show(anyString(), anyString()); String errorMessage = ""errorMessage""; String errorId = ""errorId""; String errorId2 = ""errorId2""; validationErrors.add(new FactMappingValidationError(errorId, errorMessage)); validationErrors.add(new FactMappingValidationError(""errorId2"", ScenarioSimulationI18nServerMessage.SCENARIO_VALIDATION_NODE_CHANGED_ERROR, ""p1"", ""p2"")); presenterSpy.getValidationCallback().callback(validationErrors); verify(confirmPopupPresenterMock, times(1)).show(anyString(), contains(errorId)); verify(confirmPopupPresenterMock, times(1)).show(anyString(), contains(errorMessage)); verify(confirmPopupPresenterMock, times(1)).show(anyString(), contains(errorId2)); verify(confirmPopupPresenterMock, times(1)).show(anyString(), contains(ScenarioSimulationEditorConstants.INSTANCE.scenarioValidationNodeChangedError(""p1"", ""p2""))); }","ScenarioSimulationEditorPresenter { protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback() { return result -> { view.hideBusyIndicator(); if (result != null && !result.isEmpty()) { StringBuilder errorMessage = new StringBuilder(ScenarioSimulationEditorConstants.INSTANCE.validationErrorMessage()); errorMessage.append("":<br/>""); for (FactMappingValidationError validationError : result) { String message = validationError.getErrorMessage() != null ? validationError.getErrorMessage() : ScenarioSimulationEditorI18nServerManager.retrieveMessage(validationError); errorMessage.append(""<b>""); errorMessage.append(validationError.getErrorId()); errorMessage.append(""</b> - ""); errorMessage.append(message); errorMessage.append(""<br/>""); } confirmPopupPresenter.show(ScenarioSimulationEditorConstants.INSTANCE.validationErrorTitle(), errorMessage.toString()); } else { sendNotification(ScenarioSimulationEditorConstants.INSTANCE.validationSucceed(), NotificationEvent.NotificationType.SUCCESS); } }; } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback() { return result -> { view.hideBusyIndicator(); if (result != null && !result.isEmpty()) { StringBuilder errorMessage = new StringBuilder(ScenarioSimulationEditorConstants.INSTANCE.validationErrorMessage()); errorMessage.append("":<br/>""); for (FactMappingValidationError validationError : result) { String message = validationError.getErrorMessage() != null ? validationError.getErrorMessage() : ScenarioSimulationEditorI18nServerManager.retrieveMessage(validationError); errorMessage.append(""<b>""); errorMessage.append(validationError.getErrorId()); errorMessage.append(""</b> - ""); errorMessage.append(message); errorMessage.append(""<br/>""); } confirmPopupPresenter.show(ScenarioSimulationEditorConstants.INSTANCE.validationErrorTitle(), errorMessage.toString()); } else { sendNotification(ScenarioSimulationEditorConstants.INSTANCE.validationSucceed(), NotificationEvent.NotificationType.SUCCESS); } }; } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private ScenarioSimulationView view; private ConfirmPopupPresenter confirmPopupPresenter; }</FCTX> <ECTX>@Dependent public class ConfirmPopupPresenter implements ConfirmPopup.Presenter { @Override public void show(String, String); } @Portable public class FactMappingValidationError { public FactMappingValidationError(); public FactMappingValidationError(String, String); public FactMappingValidationError(String, ScenarioSimulationI18nServerMessage, String); public String getErrorMessage(); public String getErrorId(); } public interface ScenarioSimulationEditorConstants extends Messages { } public class ScenarioSimulationEditorI18nServerManager { public static String retrieveMessage(FactMappingValidationError); } public interface ScenarioSimulationView extends KieEditorView, IsWidget, RequiresResize { hideBusyIndicator(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback() { return result -> { view.hideBusyIndicator(); if (result != null && !result.isEmpty()) { StringBuilder errorMessage = new StringBuilder(ScenarioSimulationEditorConstants.INSTANCE.validationErrorMessage()); errorMessage.append("":<br/>""); for (FactMappingValidationError validationError : result) { String message = validationError.getErrorMessage() != null ? validationError.getErrorMessage() : ScenarioSimulationEditorI18nServerManager.retrieveMessage(validationError); errorMessage.append(""<b>""); errorMessage.append(validationError.getErrorId()); errorMessage.append(""</b> - ""); errorMessage.append(message); errorMessage.append(""<br/>""); } confirmPopupPresenter.show(ScenarioSimulationEditorConstants.INSTANCE.validationErrorTitle(), errorMessage.toString()); } else { sendNotification(ScenarioSimulationEditorConstants.INSTANCE.validationSucceed(), NotificationEvent.NotificationType.SUCCESS); } }; } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private ScenarioSimulationView view; private ConfirmPopupPresenter confirmPopupPresenter;</PRIVATE_FCTX> }</FCTX> <ECTX>@Dependent public class ConfirmPopupPresenter implements ConfirmPopup.Presenter { @Override public void show(String, String); } @Portable public class FactMappingValidationError { public FactMappingValidationError(); public FactMappingValidationError(String, String); public FactMappingValidationError(String, ScenarioSimulationI18nServerMessage, String); public String getErrorMessage(); public String getErrorId(); } public interface ScenarioSimulationEditorConstants extends Messages { } public class ScenarioSimulationEditorI18nServerManager { public static String retrieveMessage(FactMappingValidationError); } public interface ScenarioSimulationView extends KieEditorView, IsWidget, RequiresResize { hideBusyIndicator(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void getImportCallback() { List<AbstractScesimModel> toTest = Arrays.asList(new Simulation(), new Background()); for (AbstractScesimModel abstractScesimModel : toTest) { FactMapping factMapping = abstractScesimModel.getScesimModelDescriptor().addFactMapping(FactIdentifier.EMPTY, ExpressionIdentifier.create(""empty"", FactMappingType.GIVEN)); FactMappingValue toBeRemoved = abstractScesimModel.addData().addOrUpdateMappingValue(factMapping.getFactIdentifier(), factMapping.getExpressionIdentifier(), ""toBeRemoved""); presenterSpy.getImportCallBack().callback(abstractScesimModel); verify(presenterSpy, times(1)).cleanReadOnlyColumn(eq(abstractScesimModel)); assertNull(toBeRemoved.getRawValue()); reset(presenterSpy); } }","ScenarioSimulationEditorPresenter { protected RemoteCallback<AbstractScesimModel> getImportCallBack() { return scesimModel -> { cleanReadOnlyColumn(scesimModel); if (scesimModel instanceof Simulation) { model.setSimulation((Simulation) scesimModel); scenarioMainGridWidget.setContent(model.getSimulation(), model.getSettings().getType()); context.getStatus().setSimulation(model.getSimulation()); scenarioMainGridWidget.onResize(); } else if (scesimModel instanceof Background) { model.setBackground((Background) scesimModel); scenarioBackgroundGridWidget.setContent(model.getBackground(), model.getSettings().getType()); context.getStatus().setBackground(model.getBackground()); scenarioBackgroundGridWidget.onResize(); } }; } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { protected RemoteCallback<AbstractScesimModel> getImportCallBack() { return scesimModel -> { cleanReadOnlyColumn(scesimModel); if (scesimModel instanceof Simulation) { model.setSimulation((Simulation) scesimModel); scenarioMainGridWidget.setContent(model.getSimulation(), model.getSettings().getType()); context.getStatus().setSimulation(model.getSimulation()); scenarioMainGridWidget.onResize(); } else if (scesimModel instanceof Background) { model.setBackground((Background) scesimModel); scenarioBackgroundGridWidget.setContent(model.getBackground(), model.getSettings().getType()); context.getStatus().setBackground(model.getBackground()); scenarioBackgroundGridWidget.onResize(); } }; } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void setContent(AbstractScesimModel, ScenarioSimulationModel.Type); @Override public void onResize(); } public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { protected RemoteCallback<AbstractScesimModel> getImportCallBack() { return scesimModel -> { cleanReadOnlyColumn(scesimModel); if (scesimModel instanceof Simulation) { model.setSimulation((Simulation) scesimModel); scenarioMainGridWidget.setContent(model.getSimulation(), model.getSettings().getType()); context.getStatus().setSimulation(model.getSimulation()); scenarioMainGridWidget.onResize(); } else if (scesimModel instanceof Background) { model.setBackground((Background) scesimModel); scenarioBackgroundGridWidget.setContent(model.getBackground(), model.getSettings().getType()); context.getStatus().setBackground(model.getBackground()); scenarioBackgroundGridWidget.onResize(); } }; } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { public void setContent(AbstractScesimModel, ScenarioSimulationModel.Type); @Override public void onResize(); } public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public Status getStatus(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void sendNotification() { presenterSpy.sendNotification(""message"", NotificationEvent.NotificationType.ERROR); verify(eventBusMock, times(1)).fireEvent(scenarioNotificationEventArgumentCaptor.capture()); assertEquals(""message"", scenarioNotificationEventArgumentCaptor.getValue().getMessage()); assertEquals(NotificationEvent.NotificationType.ERROR, scenarioNotificationEventArgumentCaptor.getValue().getNotificationType()); assertTrue(scenarioNotificationEventArgumentCaptor.getValue().isAutoHide()); }","ScenarioSimulationEditorPresenter { public void sendNotification(String text, NotificationEvent.NotificationType type) { eventBus.fireEvent(new ScenarioNotificationEvent(text, type)); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void sendNotification(String text, NotificationEvent.NotificationType type) { eventBus.fireEvent(new ScenarioNotificationEvent(text, type)); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private ScenarioSimulationResourceType type; }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void sendNotification(String text, NotificationEvent.NotificationType type) { eventBus.fireEvent(new ScenarioNotificationEvent(text, type)); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private ScenarioSimulationResourceType type;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void sendNotificationAutoHide() { presenterSpy.sendNotification(""message"", NotificationEvent.NotificationType.ERROR, false); verify(eventBusMock, times(1)).fireEvent(scenarioNotificationEventArgumentCaptor.capture()); assertEquals(""message"", scenarioNotificationEventArgumentCaptor.getValue().getMessage()); assertEquals(NotificationEvent.NotificationType.ERROR, scenarioNotificationEventArgumentCaptor.getValue().getNotificationType()); assertFalse(scenarioNotificationEventArgumentCaptor.getValue().isAutoHide()); }","ScenarioSimulationEditorPresenter { public void sendNotification(String text, NotificationEvent.NotificationType type, boolean autoHide) { eventBus.fireEvent(new ScenarioNotificationEvent(text, type, autoHide)); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void sendNotification(String text, NotificationEvent.NotificationType type, boolean autoHide) { eventBus.fireEvent(new ScenarioNotificationEvent(text, type, autoHide)); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private ScenarioSimulationResourceType type; }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void sendNotification(String text, NotificationEvent.NotificationType type, boolean autoHide) { eventBus.fireEvent(new ScenarioNotificationEvent(text, type, autoHide)); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private ScenarioSimulationResourceType type;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void expandSettingsDock() { presenterSpy.expandSettingsDock(); verify(abstractScenarioSimulationDocksHandlerMock, times(1)).expandSettingsDock(); }","ScenarioSimulationEditorPresenter { public void expandSettingsDock() { abstractScenarioSimulationDocksHandler.expandSettingsDock(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void expandSettingsDock() { abstractScenarioSimulationDocksHandler.expandSettingsDock(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler; }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void expandSettingsDock(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void expandSettingsDock() { abstractScenarioSimulationDocksHandler.expandSettingsDock(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler;</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void expandSettingsDock(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void reloadSettingsDock() { presenterSpy.reloadSettingsDock(); verify(abstractScenarioSimulationDocksHandlerMock, times(1)).getSettingsPresenter(); verify(presenterSpy, times(1)).updateSettings(settingsPresenterMock); }","ScenarioSimulationEditorPresenter { public void reloadSettingsDock() { this.updateSettings(abstractScenarioSimulationDocksHandler.getSettingsPresenter()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void reloadSettingsDock() { this.updateSettings(abstractScenarioSimulationDocksHandler.getSettingsPresenter()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler; }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public SettingsView.Presenter getSettingsPresenter(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void reloadSettingsDock() { this.updateSettings(abstractScenarioSimulationDocksHandler.getSettingsPresenter()); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX>private AbstractScenarioSimulationDocksHandler abstractScenarioSimulationDocksHandler;</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public SettingsView.Presenter getSettingsPresenter(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
