target,src_fm_fc_ms_ff,src_fm_fc_dctx,src_fm_fc_dctx_priv,imports_focal_class,imports_test_class
"@Test public void unpublishTestResultsAlerts(){ presenterSpy.unpublishTestResultsAlerts(); verify(scenarioSimulationEditorWrapperMock, times(1)).unpublishTestResultsAlerts(); }","ScenarioSimulationEditorPresenter { public void unpublishTestResultsAlerts() { scenarioSimulationEditorWrapper.unpublishTestResultsAlerts(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public void unpublishTestResultsAlerts() { scenarioSimulationEditorWrapper.unpublishTestResultsAlerts(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { void unpublishTestResultsAlerts(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public void unpublishTestResultsAlerts() { scenarioSimulationEditorWrapper.unpublishTestResultsAlerts(); } public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { void unpublishTestResultsAlerts(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void testCustomRuleName() throws Exception { adRowWithCustomRuleName(1, ""John is important"", ""John""); model.setData(data); String source = service.getSource(path, model); assertTrue(""Expected custom rule name to be present"", source.contains(""rule \""John is important\""\n"")); }","GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); @Override public String getPattern(); @Override public String getSource(Path, GuidedDecisionTable52); @Override public String getSource(Path); }","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); private Expander getDSLExpander(Path); }</FCTX> <ECTX></ECTX>","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); <PRIVATE_FCTX>private Expander getDSLExpander(Path);</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.io.IOException;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Collection;|import java.util.List;|import javax.enterprise.context.ApplicationScoped;|import javax.inject.Inject;|import javax.inject.Named;|import org.drools.compiler.lang.Expander;|import org.drools.compiler.lang.dsl.DSLMappingFile;|import org.drools.compiler.lang.dsl.DSLTokenizedMappingFile;|import org.drools.compiler.lang.dsl.DefaultExpander;|import org.drools.workbench.models.guided.dtable.backend.GuidedDTDRLPersistence;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.kie.workbench.common.services.backend.file.DSLFileFilter;|import org.kie.workbench.common.services.backend.source.BaseSourceService;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.kie.workbench.common.services.shared.source.SourceGenerationFailedException;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;|import org.uberfire.backend.server.util.Paths;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.Path;,import java.net.URI;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.HashSet;|import java.util.List;|import java.util.stream.Stream;|import org.drools.workbench.models.datamodel.rule.BaseSingleFieldConstraint;|import org.drools.workbench.models.guided.dtable.shared.model.ConditionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.DTCellValue52;|import org.drools.workbench.models.guided.dtable.shared.model.DescriptionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.models.guided.dtable.shared.model.Pattern52;|import org.drools.workbench.models.guided.dtable.shared.model.RowNumberCol52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.guvnor.common.services.project.model.Package;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.imports.Import;|import org.kie.soup.project.datamodel.imports.Imports;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.mockito.Mock;|import org.mockito.runners.MockitoJUnitRunner;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.FileSystem;|import org.uberfire.java.nio.file.Path;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Mockito.when;
"@Test public void getUpdateDMNMetadataCommand() { presenterSpy.getUpdateDMNMetadataCommand().execute(); verify(scenarioSimulationEditorWrapperMock, times(1)).getDMNMetadata(); }","ScenarioSimulationEditorPresenter { public Command getUpdateDMNMetadataCommand() { return () -> scenarioSimulationEditorWrapper.getDMNMetadata();} public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); public void setWrapper(ScenarioSimulationEditorWrapper); public void setPath(ObservablePath); public ObservablePath getPath(); public void setPackageName(String); public void onClose(); public void showDocks(PlaceStatus); public void hideDocks(); public void onUberfireDocksInteractionEvent(UberfireDocksInteractionEvent); public void expandToolsDock(); public void expandSettingsDock(); public ScenarioSimulationView getView(); public ScenarioSimulationModel getModel(); public Command getPopulateTestToolsCommand(); public void reloadTestTools(boolean); public void reloadSettingsDock(); public void onRunScenario(); public void onRunScenario(List<Integer>); public void onUndo(); public void onRedo(); public void setUndoButtonEnabledStatus(boolean); public void setRedoButtonEnabledStatus(boolean); public void setItemMenuEnabled(boolean); public void addDownloadMenuItem(FileMenuBuilder, Supplier<Path>); public DataManagementStrategy getDataManagementStrategy(); public void onImport(String, GridWidget); public EventBus getEventBus(); public ScenarioSimulationContext getContext(); protected void resetDocks(); protected boolean isUberfireDocksInteractionEventToManage(UberfireDocksInteractionEvent); protected RemoteCallback<SimulationRunResult> getRefreshModelCallback(); protected void refreshModelContent(SimulationRunResult); public void sendNotification(String, NotificationEvent.NotificationType); public void sendNotification(String, NotificationEvent.NotificationType, boolean); protected void registerTestToolsCallback(); protected void unRegisterTestToolsCallback(); protected ErrorCallback<Object> getImportErrorCallback(); public void makeMenuBar(FileMenuBuilder); public void addCommonActions(FileMenuBuilder, MenuItem, MenuItem); public void loadContent(); public boolean isDirty(); public void onEditTabSelected(); public void onBackgroundTabSelected(); public void onOverviewSelected(); public void onImportsTabSelected(); public void validateSimulation(); public void selectSimulationTab(); public void selectBackgroundTab(); protected void onDownload(Supplier<Path>); protected void open(String); protected void showImportDialog(); protected void onExportToCsv(); public RemoteCallback<String> getExportCallBack(); protected RemoteCallback<AbstractScesimModel> getImportCallBack(); protected Command getValidateCommand(); protected RemoteCallback<List<FactMappingValidationError>> getValidationCallback(); public ErrorCallback<Boolean> getValidationFailedCallback(); protected void cleanReadOnlyColumn(AbstractScesimModel); public void populateRightDocks(String); public void getModelSuccessCallbackMethod(DataManagementStrategy, ScenarioSimulationModel); public ScenarioSimulationResourceType getType(); public void setTestTools(TestToolsView.Presenter); protected void clearTestToolsStatus(); public void setCheatSheet(CheatSheetView.Presenter); public void setSettings(SettingsView.Presenter); protected void updateSettings(SettingsView.Presenter); public String getJsonModel(ScenarioSimulationModel); protected String getFileDownloadURL(Supplier<Path>); public void unpublishTestResultsAlerts(); public Command getUpdateDMNMetadataCommand(); public static final String IDENTIFIER = ""ScenarioSimulationEditor""; protected String packageName = """"; protected ObservablePath path; protected EventBus eventBus; protected ScenarioGridWidget scenarioMainGridWidget; protected ScenarioGridWidget scenarioBackgroundGridWidget; protected PlaceManager placeManager; protected DataManagementStrategy dataManagementStrategy; protected ScenarioSimulationContext context; protected ScenarioSimulationModel model; protected long scenarioPresenterId; protected MenuItem undoMenuItem; protected MenuItem redoMenuItem; protected MenuItem runScenarioMenuItem; protected MenuItem exportToCSVMenuItem; protected MenuItem importMenuItem; protected MenuItem downloadMenuItem; protected ScenarioSimulationEditorWrapper scenarioSimulationEditorWrapper; }","<FCTX>ScenarioSimulationEditorPresenter { public Command getUpdateDMNMetadataCommand() { return () -> scenarioSimulationEditorWrapper.getDMNMetadata();} public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { void getDMNMetadata(); }</ECTX>","<FCTX>ScenarioSimulationEditorPresenter { public Command getUpdateDMNMetadataCommand() { return () -> scenarioSimulationEditorWrapper.getDMNMetadata();} public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface ScenarioSimulationEditorWrapper { void getDMNMetadata(); }</ECTX>",import java.util.List;|import java.util.concurrent.atomic.AtomicLong;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import javax.enterprise.event.Observes;|import javax.inject.Inject;|import com.google.gwt.core.client.GWT;|import com.google.gwt.event.shared.EventBus;|import elemental2.dom.DomGlobal;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.AbstractDMODataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioMenuItemFactory;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorI18nServerManager;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.jboss.errai.enterprise.client.jaxrs.MarshallingWrapper;|import org.kie.workbench.common.widgets.client.menu.FileMenuBuilder;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextContent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.ext.widgets.common.client.common.BusyPopup;|import org.uberfire.mvp.Command;|import org.uberfire.mvp.impl.DefaultPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.menu.MenuItem;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.drools.workbench.screens.scenariosimulation.service.ImportExportType.CSV;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.List;|import java.util.function.Supplier;|import com.google.gwtmockito.GwtMockitoTestRunner;|import com.google.gwtmockito.WithClassesToStub;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.Background;|import org.drools.scenariosimulation.api.model.BackgroundData;|import org.drools.scenariosimulation.api.model.BackgroundDataWithIndex;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScenarioWithIndex;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.model.Simulation;|import org.drools.scenariosimulation.api.model.SimulationRunMetadata;|import org.drools.workbench.screens.scenariosimulation.client.editor.strategies.DataManagementStrategy;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ImportEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.RedoEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.UndoEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.ScenarioSimulationHasBusyIndicatorDefaultErrorCallback;|import org.drools.workbench.screens.scenariosimulation.client.popup.ConfirmPopupPresenter;|import org.drools.workbench.screens.scenariosimulation.client.producers.AbstractScenarioSimulationProducer;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.model.FactMappingValidationError;|import org.drools.workbench.screens.scenariosimulation.model.SimulationRunResult;|import org.drools.workbench.screens.scenariosimulation.utils.ScenarioSimulationI18nServerMessage;|import org.guvnor.common.services.shared.test.TestResultMessage;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.junit.Before;|import org.junit.Rule;|import org.junit.Test;|import org.junit.rules.ExpectedException;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.InOrder;|import org.mockito.Mock;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.AbstractWorkbenchActivity;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDocksInteractionEvent;|import org.uberfire.ext.editor.commons.client.file.exports.TextFileExport;|import org.uberfire.mvp.impl.PathPlaceRequest;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.contains;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Matchers.same;|import static org.mockito.Mockito.atLeastOnce;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.inOrder;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onResize() { scenarioViewImpl.onResize(); verify(scenarioViewImpl, times(1)).setPixelSize(eq(WIDTH), eq(HEIGHT)); verify(scenarioGridWidgetSpy, times(1)).onResize(); }","ScenarioSimulationViewImpl extends KieEditorViewImpl implements ScenarioSimulationView { @Override public void onResize() { final Widget parent = getParent(); if (parent != null) { final double w = parent.getOffsetWidth(); final double h = parent.getOffsetHeight(); setPixelSize((int) w, (int) h); } scenarioGridWidget.onResize(); } @Override public void init(); @Override public ScenarioGridWidget getScenarioGridWidget(); @Override public void setScenarioGridWidget(ScenarioGridWidget); @Override public void onResize(); protected ScenarioGridWidget scenarioGridWidget; }","<FCTX>ScenarioSimulationViewImpl extends KieEditorViewImpl implements ScenarioSimulationView { @Override public void onResize() { final Widget parent = getParent(); if (parent != null) { final double w = parent.getOffsetWidth(); final double h = parent.getOffsetHeight(); setPixelSize((int) w, (int) h); } scenarioGridWidget.onResize(); } }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { @Override public void onResize(); }</ECTX>","<FCTX>ScenarioSimulationViewImpl extends KieEditorViewImpl implements ScenarioSimulationView { @Override public void onResize() { final Widget parent = getParent(); if (parent != null) { final double w = parent.getOffsetWidth(); final double h = parent.getOffsetHeight(); setPixelSize((int) w, (int) h); } scenarioGridWidget.onResize(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioGridWidget extends ResizeComposite { @Override public void onResize(); }</ECTX>",import javax.enterprise.context.Dependent;|import com.google.gwt.user.client.ui.Widget;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridWidget;|import org.kie.workbench.common.widgets.metadata.client.KieEditorViewImpl;,import com.google.gwt.user.client.ui.Widget;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.AbstractScenarioSimulationTest;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void getSimpleClassFactModelTree() { Class[] expectedClazzes = {String.class, Boolean.class, Integer.class, Double.class, Number.class}; for (Class expectedClazz : expectedClazzes) { final FactModelTree retrieved = AbstractDataManagementStrategy.getSimpleClassFactModelTree( expectedClazz.getSimpleName(), expectedClazz.getCanonicalName()); assertNotNull(retrieved); String key = expectedClazz.getSimpleName(); assertEquals(key, retrieved.getFactName()); String fullName = expectedClazz.getCanonicalName(); String packageName = fullName.substring(0, fullName.lastIndexOf(""."")); assertEquals(packageName, retrieved.getFullPackage()); Map<String, FactModelTree.PropertyTypeName> simpleProperties = retrieved.getSimpleProperties(); assertNotNull(simpleProperties); assertEquals(1, simpleProperties.size()); assertTrue(simpleProperties.containsKey(TestProperties.LOWER_CASE_VALUE)); FactModelTree.PropertyTypeName simplePropertyValue = simpleProperties.get(TestProperties.LOWER_CASE_VALUE); assertNotNull(simplePropertyValue); assertEquals(fullName, simplePropertyValue.getTypeName()); assertEquals(fullName, simplePropertyValue.getPropertyTypeNameToVisualize()); assertFalse(simplePropertyValue.getBaseTypeName().isPresent()); } }","AbstractDataManagementStrategy implements DataManagementStrategy { public static FactModelTree getSimpleClassFactModelTree(String classSimpleName, String fullClassName) { String packageName = fullClassName.substring(0, fullClassName.lastIndexOf('.')); String factClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1); return FactModelTree.ofSimpleDMO(classSimpleName, packageName, fullClassName, factClassName); } @Override public void setModel(ScenarioSimulationModel); public static FactModelTree getSimpleClassFactModelTree(String, String); public <T extends AbstractScesimModel<E>, E extends AbstractScesimData> Map<String, List<List<String>>> getPropertiesToHide(AbstractScesimGridModel<T,E>); protected <T extends AbstractScesimModel<E>, E extends AbstractScesimData> List<List<String>> getPropertiesToHide(ScenarioGridColumn, AbstractScesimGridModel<T,E>); public void storeData(FactModelTuple, TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); public SortedMap<String, FactModelTree> getInstanceMap(SortedMap<String,FactModelTree>); protected ScenarioSimulationModel model; protected ResultHolder factModelTreeHolder = new ResultHolder(); }","<FCTX>AbstractDataManagementStrategy implements DataManagementStrategy { public static FactModelTree getSimpleClassFactModelTree(String classSimpleName, String fullClassName) { String packageName = fullClassName.substring(0, fullClassName.lastIndexOf('.')); String factClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1); return FactModelTree.ofSimpleDMO(classSimpleName, packageName, fullClassName, factClassName); } }</FCTX> <ECTX>@Portable public class FactModelTree { public FactModelTree(); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, String); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, Type); public static FactModelTree ofSimpleDMO(String, String, String, String); }</ECTX>","<FCTX>AbstractDataManagementStrategy implements DataManagementStrategy { public static FactModelTree getSimpleClassFactModelTree(String classSimpleName, String fullClassName) { String packageName = fullClassName.substring(0, fullClassName.lastIndexOf('.')); String factClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1); return FactModelTree.ofSimpleDMO(classSimpleName, packageName, fullClassName, factClassName); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@Portable public class FactModelTree { public FactModelTree(); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, String); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, Type); public static FactModelTree ofSimpleDMO(String, String, String, String); }</ECTX>",import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.List;|import java.util.Map;|import java.util.Objects;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.ExpressionElement;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.models.AbstractScesimGridModel;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenterData;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import static org.drools.scenariosimulation.api.utils.ConstantsHolder.VALUE;,import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenterData;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.uberfire.backend.vfs.ObservablePath;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void setModel() { abstractDataManagementStrategySpy.model = null; ScenarioSimulationModel modelMock = mock(ScenarioSimulationModel.class); abstractDataManagementStrategySpy.setModel(modelMock); assertEquals(modelMock, abstractDataManagementStrategySpy.model); }","AbstractDataManagementStrategy implements DataManagementStrategy { @Override public void setModel(ScenarioSimulationModel model) { this.model = model; } @Override public void setModel(ScenarioSimulationModel); public static FactModelTree getSimpleClassFactModelTree(String, String); public <T extends AbstractScesimModel<E>, E extends AbstractScesimData> Map<String, List<List<String>>> getPropertiesToHide(AbstractScesimGridModel<T,E>); protected <T extends AbstractScesimModel<E>, E extends AbstractScesimData> List<List<String>> getPropertiesToHide(ScenarioGridColumn, AbstractScesimGridModel<T,E>); public void storeData(FactModelTuple, TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); public SortedMap<String, FactModelTree> getInstanceMap(SortedMap<String,FactModelTree>); protected ScenarioSimulationModel model; protected ResultHolder factModelTreeHolder = new ResultHolder(); }",<FCTX>AbstractDataManagementStrategy implements DataManagementStrategy { @Override public void setModel(ScenarioSimulationModel model) { this.model = model; } }</FCTX> <ECTX></ECTX>,<FCTX>AbstractDataManagementStrategy implements DataManagementStrategy { @Override public void setModel(ScenarioSimulationModel model) { this.model = model; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.List;|import java.util.Map;|import java.util.Objects;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.ExpressionElement;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.models.AbstractScesimGridModel;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenterData;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import static org.drools.scenariosimulation.api.utils.ConstantsHolder.VALUE;,import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenterData;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.uberfire.backend.vfs.ObservablePath;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void storeDataSimulation() { ScenarioSimulationContext scenarioSimulationContextSpy = spy(scenarioSimulationContextLocal); doReturn(simulationMock).when(scenarioSimulationContextSpy).getAbstractScesimModelByGridWidget(GridWidget.SIMULATION); final FactModelTuple factModelTuple = getFactTuple(); abstractDataManagementStrategySpy.storeData(factModelTuple, testToolsPresenterMock, scenarioSimulationContextSpy, GridWidget.SIMULATION); verify(testToolsPresenterMock, times(1)).populateTestTools(testToolsPresenterDataArgumentCaptor.capture()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue().getDataObjectFieldsMap()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue().getHiddenFieldsMap()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue().getInstanceFieldsMap()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue().getPropertiesToHide()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue().getSimpleJavaInstanceFieldsMap()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue().getSimpleJavaTypeFieldsMap()); assertEquals(GridWidget.SIMULATION, testToolsPresenterDataArgumentCaptor.getValue().getGridWidget()); verify(scenarioSimulationContextSpy, times(1)).setDataObjectFieldsMap(isA(SortedMap.class)); verify(scenarioSimulationContextSpy, times(1)).setDataObjectsInstancesName(isA(Set.class)); verify(scenarioGridModelMock, times(1)).setSimpleJavaTypeInstancesName(isA(Set.class)); }","AbstractDataManagementStrategy implements DataManagementStrategy { public void storeData(final FactModelTuple factModelTuple, final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { final Map<String, List<List<String>>> propertiesToHide = getPropertiesToHide(context.getAbstractScesimGridModelByGridWidget(gridWidget)); final SortedMap<String, FactModelTree> visibleFacts = factModelTuple.getVisibleFacts(); final Map<Boolean, List<Map.Entry<String, FactModelTree>>> partitionBy = visibleFacts.entrySet().stream().collect(Collectors.partitioningBy(stringFactModelTreeEntry -> stringFactModelTreeEntry.getValue().isSimple())); final SortedMap<String, FactModelTree> complexDataObjects = new TreeMap<>(partitionBy.get(false).stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))); final SortedMap<String, FactModelTree> simpleDataObjects = new TreeMap<>(partitionBy.get(true).stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))); SortedMap<String, FactModelTree> dataObjectFieldsMap = new TreeMap<>(); dataObjectFieldsMap.putAll(visibleFacts); dataObjectFieldsMap.putAll(factModelTuple.getHiddenFacts()); context.setDataObjectFieldsMap(dataObjectFieldsMap); SortedMap<String, FactModelTree> instanceFieldsMap = new TreeMap<>(); SortedMap<String, FactModelTree> simpleJavaTypeInstanceFieldsMap = new TreeMap<>(); if (GridWidget.SIMULATION.equals(gridWidget)) { instanceFieldsMap = getInstanceMap(complexDataObjects); simpleJavaTypeInstanceFieldsMap = getInstanceMap(simpleDataObjects); Set<String> dataObjectsInstancesName = new HashSet<>(visibleFacts.keySet()); dataObjectsInstancesName.addAll(instanceFieldsMap.keySet()); context.setDataObjectsInstancesName(dataObjectsInstancesName); Set<String> simpleJavaTypeInstancesName = new HashSet<>(simpleDataObjects.keySet()); simpleJavaTypeInstancesName.addAll(simpleJavaTypeInstanceFieldsMap.keySet()); context.getAbstractScesimGridModelByGridWidget(gridWidget).setSimpleJavaTypeInstancesName(simpleJavaTypeInstancesName); } TestToolsPresenterData testToolsPresenterData = new TestToolsPresenterData(complexDataObjects, simpleDataObjects, instanceFieldsMap, simpleJavaTypeInstanceFieldsMap, factModelTuple.getHiddenFacts(), propertiesToHide, gridWidget); testToolsPresenter.populateTestTools(testToolsPresenterData); } @Override public void setModel(ScenarioSimulationModel); public static FactModelTree getSimpleClassFactModelTree(String, String); public <T extends AbstractScesimModel<E>, E extends AbstractScesimData> Map<String, List<List<String>>> getPropertiesToHide(AbstractScesimGridModel<T,E>); protected <T extends AbstractScesimModel<E>, E extends AbstractScesimData> List<List<String>> getPropertiesToHide(ScenarioGridColumn, AbstractScesimGridModel<T,E>); public void storeData(FactModelTuple, TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); public SortedMap<String, FactModelTree> getInstanceMap(SortedMap<String,FactModelTree>); protected ScenarioSimulationModel model; protected ResultHolder factModelTreeHolder = new ResultHolder(); }","<FCTX>AbstractDataManagementStrategy implements DataManagementStrategy { public void storeData(final FactModelTuple factModelTuple, final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { final Map<String, List<List<String>>> propertiesToHide = getPropertiesToHide(context.getAbstractScesimGridModelByGridWidget(gridWidget)); final SortedMap<String, FactModelTree> visibleFacts = factModelTuple.getVisibleFacts(); final Map<Boolean, List<Map.Entry<String, FactModelTree>>> partitionBy = visibleFacts.entrySet().stream().collect(Collectors.partitioningBy(stringFactModelTreeEntry -> stringFactModelTreeEntry.getValue().isSimple())); final SortedMap<String, FactModelTree> complexDataObjects = new TreeMap<>(partitionBy.get(false).stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))); final SortedMap<String, FactModelTree> simpleDataObjects = new TreeMap<>(partitionBy.get(true).stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))); SortedMap<String, FactModelTree> dataObjectFieldsMap = new TreeMap<>(); dataObjectFieldsMap.putAll(visibleFacts); dataObjectFieldsMap.putAll(factModelTuple.getHiddenFacts()); context.setDataObjectFieldsMap(dataObjectFieldsMap); SortedMap<String, FactModelTree> instanceFieldsMap = new TreeMap<>(); SortedMap<String, FactModelTree> simpleJavaTypeInstanceFieldsMap = new TreeMap<>(); if (GridWidget.SIMULATION.equals(gridWidget)) { instanceFieldsMap = getInstanceMap(complexDataObjects); simpleJavaTypeInstanceFieldsMap = getInstanceMap(simpleDataObjects); Set<String> dataObjectsInstancesName = new HashSet<>(visibleFacts.keySet()); dataObjectsInstancesName.addAll(instanceFieldsMap.keySet()); context.setDataObjectsInstancesName(dataObjectsInstancesName); Set<String> simpleJavaTypeInstancesName = new HashSet<>(simpleDataObjects.keySet()); simpleJavaTypeInstancesName.addAll(simpleJavaTypeInstanceFieldsMap.keySet()); context.getAbstractScesimGridModelByGridWidget(gridWidget).setSimpleJavaTypeInstancesName(simpleJavaTypeInstancesName); } TestToolsPresenterData testToolsPresenterData = new TestToolsPresenterData(complexDataObjects, simpleDataObjects, instanceFieldsMap, simpleJavaTypeInstanceFieldsMap, factModelTuple.getHiddenFacts(), propertiesToHide, gridWidget); testToolsPresenter.populateTestTools(testToolsPresenterData); } }</FCTX> <ECTX>@Portable public class FactModelTuple { public FactModelTuple(); public FactModelTuple(SortedMap<String,FactModelTree>, SortedMap<String,FactModelTree>); public SortedMap<String, FactModelTree> getVisibleFacts(); public SortedMap<String, FactModelTree> getHiddenFacts(); } public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public AbstractScesimGridModel getAbstractScesimGridModelByGridWidget(GridWidget); public void setDataObjectFieldsMap(SortedMap<String,FactModelTree>); public void setDataObjectsInstancesName(Set<String>); }</ECTX>","<FCTX>AbstractDataManagementStrategy implements DataManagementStrategy { public void storeData(final FactModelTuple factModelTuple, final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { final Map<String, List<List<String>>> propertiesToHide = getPropertiesToHide(context.getAbstractScesimGridModelByGridWidget(gridWidget)); final SortedMap<String, FactModelTree> visibleFacts = factModelTuple.getVisibleFacts(); final Map<Boolean, List<Map.Entry<String, FactModelTree>>> partitionBy = visibleFacts.entrySet().stream().collect(Collectors.partitioningBy(stringFactModelTreeEntry -> stringFactModelTreeEntry.getValue().isSimple())); final SortedMap<String, FactModelTree> complexDataObjects = new TreeMap<>(partitionBy.get(false).stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))); final SortedMap<String, FactModelTree> simpleDataObjects = new TreeMap<>(partitionBy.get(true).stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))); SortedMap<String, FactModelTree> dataObjectFieldsMap = new TreeMap<>(); dataObjectFieldsMap.putAll(visibleFacts); dataObjectFieldsMap.putAll(factModelTuple.getHiddenFacts()); context.setDataObjectFieldsMap(dataObjectFieldsMap); SortedMap<String, FactModelTree> instanceFieldsMap = new TreeMap<>(); SortedMap<String, FactModelTree> simpleJavaTypeInstanceFieldsMap = new TreeMap<>(); if (GridWidget.SIMULATION.equals(gridWidget)) { instanceFieldsMap = getInstanceMap(complexDataObjects); simpleJavaTypeInstanceFieldsMap = getInstanceMap(simpleDataObjects); Set<String> dataObjectsInstancesName = new HashSet<>(visibleFacts.keySet()); dataObjectsInstancesName.addAll(instanceFieldsMap.keySet()); context.setDataObjectsInstancesName(dataObjectsInstancesName); Set<String> simpleJavaTypeInstancesName = new HashSet<>(simpleDataObjects.keySet()); simpleJavaTypeInstancesName.addAll(simpleJavaTypeInstanceFieldsMap.keySet()); context.getAbstractScesimGridModelByGridWidget(gridWidget).setSimpleJavaTypeInstancesName(simpleJavaTypeInstancesName); } TestToolsPresenterData testToolsPresenterData = new TestToolsPresenterData(complexDataObjects, simpleDataObjects, instanceFieldsMap, simpleJavaTypeInstanceFieldsMap, factModelTuple.getHiddenFacts(), propertiesToHide, gridWidget); testToolsPresenter.populateTestTools(testToolsPresenterData); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@Portable public class FactModelTuple { public FactModelTuple(); public FactModelTuple(SortedMap<String,FactModelTree>, SortedMap<String,FactModelTree>); public SortedMap<String, FactModelTree> getVisibleFacts(); public SortedMap<String, FactModelTree> getHiddenFacts(); } public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public AbstractScesimGridModel getAbstractScesimGridModelByGridWidget(GridWidget); public void setDataObjectFieldsMap(SortedMap<String,FactModelTree>); public void setDataObjectsInstancesName(Set<String>); }</ECTX>",import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.List;|import java.util.Map;|import java.util.Objects;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.ExpressionElement;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.models.AbstractScesimGridModel;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenterData;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import static org.drools.scenariosimulation.api.utils.ConstantsHolder.VALUE;,import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenterData;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.uberfire.backend.vfs.ObservablePath;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void storeDataBackground() { ScenarioSimulationContext scenarioSimulationContextSpy = spy(scenarioSimulationContextLocal); doReturn(backgroundMock).when(scenarioSimulationContextSpy).getAbstractScesimModelByGridWidget(GridWidget.BACKGROUND); final FactModelTuple factModelTuple = getFactTuple(); abstractDataManagementStrategySpy.storeData(factModelTuple, testToolsPresenterMock, scenarioSimulationContextSpy, GridWidget.BACKGROUND); verify(testToolsPresenterMock, times(1)).populateTestTools(testToolsPresenterDataArgumentCaptor.capture()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue().getDataObjectFieldsMap()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue().getHiddenFieldsMap()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue().getInstanceFieldsMap()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue().getPropertiesToHide()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue().getSimpleJavaInstanceFieldsMap()); assertNotNull(testToolsPresenterDataArgumentCaptor.getValue().getSimpleJavaTypeFieldsMap()); assertEquals(GridWidget.BACKGROUND, testToolsPresenterDataArgumentCaptor.getValue().getGridWidget()); verify(scenarioSimulationContextSpy, times(1)).setDataObjectFieldsMap(isA(SortedMap.class)); verify(scenarioSimulationContextSpy, never()).setDataObjectsInstancesName(isA(Set.class)); verify(backgroundGridModelMock, never()).setSimpleJavaTypeInstancesName(isA(Set.class)); }","AbstractDataManagementStrategy implements DataManagementStrategy { public void storeData(final FactModelTuple factModelTuple, final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { final Map<String, List<List<String>>> propertiesToHide = getPropertiesToHide(context.getAbstractScesimGridModelByGridWidget(gridWidget)); final SortedMap<String, FactModelTree> visibleFacts = factModelTuple.getVisibleFacts(); final Map<Boolean, List<Map.Entry<String, FactModelTree>>> partitionBy = visibleFacts.entrySet().stream().collect(Collectors.partitioningBy(stringFactModelTreeEntry -> stringFactModelTreeEntry.getValue().isSimple())); final SortedMap<String, FactModelTree> complexDataObjects = new TreeMap<>(partitionBy.get(false).stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))); final SortedMap<String, FactModelTree> simpleDataObjects = new TreeMap<>(partitionBy.get(true).stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))); SortedMap<String, FactModelTree> dataObjectFieldsMap = new TreeMap<>(); dataObjectFieldsMap.putAll(visibleFacts); dataObjectFieldsMap.putAll(factModelTuple.getHiddenFacts()); context.setDataObjectFieldsMap(dataObjectFieldsMap); SortedMap<String, FactModelTree> instanceFieldsMap = new TreeMap<>(); SortedMap<String, FactModelTree> simpleJavaTypeInstanceFieldsMap = new TreeMap<>(); if (GridWidget.SIMULATION.equals(gridWidget)) { instanceFieldsMap = getInstanceMap(complexDataObjects); simpleJavaTypeInstanceFieldsMap = getInstanceMap(simpleDataObjects); Set<String> dataObjectsInstancesName = new HashSet<>(visibleFacts.keySet()); dataObjectsInstancesName.addAll(instanceFieldsMap.keySet()); context.setDataObjectsInstancesName(dataObjectsInstancesName); Set<String> simpleJavaTypeInstancesName = new HashSet<>(simpleDataObjects.keySet()); simpleJavaTypeInstancesName.addAll(simpleJavaTypeInstanceFieldsMap.keySet()); context.getAbstractScesimGridModelByGridWidget(gridWidget).setSimpleJavaTypeInstancesName(simpleJavaTypeInstancesName); } TestToolsPresenterData testToolsPresenterData = new TestToolsPresenterData(complexDataObjects, simpleDataObjects, instanceFieldsMap, simpleJavaTypeInstanceFieldsMap, factModelTuple.getHiddenFacts(), propertiesToHide, gridWidget); testToolsPresenter.populateTestTools(testToolsPresenterData); } @Override public void setModel(ScenarioSimulationModel); public static FactModelTree getSimpleClassFactModelTree(String, String); public <T extends AbstractScesimModel<E>, E extends AbstractScesimData> Map<String, List<List<String>>> getPropertiesToHide(AbstractScesimGridModel<T,E>); protected <T extends AbstractScesimModel<E>, E extends AbstractScesimData> List<List<String>> getPropertiesToHide(ScenarioGridColumn, AbstractScesimGridModel<T,E>); public void storeData(FactModelTuple, TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); public SortedMap<String, FactModelTree> getInstanceMap(SortedMap<String,FactModelTree>); protected ScenarioSimulationModel model; protected ResultHolder factModelTreeHolder = new ResultHolder(); }","<FCTX>AbstractDataManagementStrategy implements DataManagementStrategy { public void storeData(final FactModelTuple factModelTuple, final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { final Map<String, List<List<String>>> propertiesToHide = getPropertiesToHide(context.getAbstractScesimGridModelByGridWidget(gridWidget)); final SortedMap<String, FactModelTree> visibleFacts = factModelTuple.getVisibleFacts(); final Map<Boolean, List<Map.Entry<String, FactModelTree>>> partitionBy = visibleFacts.entrySet().stream().collect(Collectors.partitioningBy(stringFactModelTreeEntry -> stringFactModelTreeEntry.getValue().isSimple())); final SortedMap<String, FactModelTree> complexDataObjects = new TreeMap<>(partitionBy.get(false).stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))); final SortedMap<String, FactModelTree> simpleDataObjects = new TreeMap<>(partitionBy.get(true).stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))); SortedMap<String, FactModelTree> dataObjectFieldsMap = new TreeMap<>(); dataObjectFieldsMap.putAll(visibleFacts); dataObjectFieldsMap.putAll(factModelTuple.getHiddenFacts()); context.setDataObjectFieldsMap(dataObjectFieldsMap); SortedMap<String, FactModelTree> instanceFieldsMap = new TreeMap<>(); SortedMap<String, FactModelTree> simpleJavaTypeInstanceFieldsMap = new TreeMap<>(); if (GridWidget.SIMULATION.equals(gridWidget)) { instanceFieldsMap = getInstanceMap(complexDataObjects); simpleJavaTypeInstanceFieldsMap = getInstanceMap(simpleDataObjects); Set<String> dataObjectsInstancesName = new HashSet<>(visibleFacts.keySet()); dataObjectsInstancesName.addAll(instanceFieldsMap.keySet()); context.setDataObjectsInstancesName(dataObjectsInstancesName); Set<String> simpleJavaTypeInstancesName = new HashSet<>(simpleDataObjects.keySet()); simpleJavaTypeInstancesName.addAll(simpleJavaTypeInstanceFieldsMap.keySet()); context.getAbstractScesimGridModelByGridWidget(gridWidget).setSimpleJavaTypeInstancesName(simpleJavaTypeInstancesName); } TestToolsPresenterData testToolsPresenterData = new TestToolsPresenterData(complexDataObjects, simpleDataObjects, instanceFieldsMap, simpleJavaTypeInstanceFieldsMap, factModelTuple.getHiddenFacts(), propertiesToHide, gridWidget); testToolsPresenter.populateTestTools(testToolsPresenterData); } }</FCTX> <ECTX>@Portable public class FactModelTuple { public FactModelTuple(); public FactModelTuple(SortedMap<String,FactModelTree>, SortedMap<String,FactModelTree>); public SortedMap<String, FactModelTree> getVisibleFacts(); public SortedMap<String, FactModelTree> getHiddenFacts(); } public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public AbstractScesimGridModel getAbstractScesimGridModelByGridWidget(GridWidget); public void setDataObjectFieldsMap(SortedMap<String,FactModelTree>); public void setDataObjectsInstancesName(Set<String>); }</ECTX>","<FCTX>AbstractDataManagementStrategy implements DataManagementStrategy { public void storeData(final FactModelTuple factModelTuple, final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { final Map<String, List<List<String>>> propertiesToHide = getPropertiesToHide(context.getAbstractScesimGridModelByGridWidget(gridWidget)); final SortedMap<String, FactModelTree> visibleFacts = factModelTuple.getVisibleFacts(); final Map<Boolean, List<Map.Entry<String, FactModelTree>>> partitionBy = visibleFacts.entrySet().stream().collect(Collectors.partitioningBy(stringFactModelTreeEntry -> stringFactModelTreeEntry.getValue().isSimple())); final SortedMap<String, FactModelTree> complexDataObjects = new TreeMap<>(partitionBy.get(false).stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))); final SortedMap<String, FactModelTree> simpleDataObjects = new TreeMap<>(partitionBy.get(true).stream().collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))); SortedMap<String, FactModelTree> dataObjectFieldsMap = new TreeMap<>(); dataObjectFieldsMap.putAll(visibleFacts); dataObjectFieldsMap.putAll(factModelTuple.getHiddenFacts()); context.setDataObjectFieldsMap(dataObjectFieldsMap); SortedMap<String, FactModelTree> instanceFieldsMap = new TreeMap<>(); SortedMap<String, FactModelTree> simpleJavaTypeInstanceFieldsMap = new TreeMap<>(); if (GridWidget.SIMULATION.equals(gridWidget)) { instanceFieldsMap = getInstanceMap(complexDataObjects); simpleJavaTypeInstanceFieldsMap = getInstanceMap(simpleDataObjects); Set<String> dataObjectsInstancesName = new HashSet<>(visibleFacts.keySet()); dataObjectsInstancesName.addAll(instanceFieldsMap.keySet()); context.setDataObjectsInstancesName(dataObjectsInstancesName); Set<String> simpleJavaTypeInstancesName = new HashSet<>(simpleDataObjects.keySet()); simpleJavaTypeInstancesName.addAll(simpleJavaTypeInstanceFieldsMap.keySet()); context.getAbstractScesimGridModelByGridWidget(gridWidget).setSimpleJavaTypeInstancesName(simpleJavaTypeInstancesName); } TestToolsPresenterData testToolsPresenterData = new TestToolsPresenterData(complexDataObjects, simpleDataObjects, instanceFieldsMap, simpleJavaTypeInstanceFieldsMap, factModelTuple.getHiddenFacts(), propertiesToHide, gridWidget); testToolsPresenter.populateTestTools(testToolsPresenterData); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@Portable public class FactModelTuple { public FactModelTuple(); public FactModelTuple(SortedMap<String,FactModelTree>, SortedMap<String,FactModelTree>); public SortedMap<String, FactModelTree> getVisibleFacts(); public SortedMap<String, FactModelTree> getHiddenFacts(); } public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public AbstractScesimGridModel getAbstractScesimGridModelByGridWidget(GridWidget); public void setDataObjectFieldsMap(SortedMap<String,FactModelTree>); public void setDataObjectsInstancesName(Set<String>); }</ECTX>",import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.List;|import java.util.Map;|import java.util.Objects;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.ExpressionElement;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.models.AbstractScesimGridModel;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenterData;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import static org.drools.scenariosimulation.api.utils.ConstantsHolder.VALUE;,import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenterData;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.uberfire.backend.vfs.ObservablePath;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void getInstanceMap() { SortedMap<String, FactModelTree> sourceMap = getSourceMap(); SortedMap<String, FactModelTree> retrieved = abstractDataManagementStrategySpy.getInstanceMap(sourceMap); assertNotNull(retrieved); assertTrue(retrieved.isEmpty()); abstractDataManagementStrategySpy.setModel(modelLocal); retrieved = abstractDataManagementStrategySpy.getInstanceMap(sourceMap); assertNotNull(retrieved); assertEquals(2, retrieved.size()); }","AbstractDataManagementStrategy implements DataManagementStrategy { public SortedMap<String, FactModelTree> getInstanceMap(SortedMap<String, FactModelTree> sourceMap) { SortedMap<String, FactModelTree> toReturn = new TreeMap<>(); if (model != null) { final ScesimModelDescriptor simulationDescriptor = model.getSimulation().getScesimModelDescriptor(); final ScenarioSimulationModel.Type type = model.getSettings().getType(); simulationDescriptor.getUnmodifiableFactMappings().stream().filter(factMapping -> !Objects.equals(FactMappingType.OTHER, factMapping.getExpressionIdentifier().getType())).forEach(factMapping -> { String dataObjectName = ScenarioSimulationModel.Type.DMN.equals(type) ? factMapping.getFactIdentifier().getClassName() : factMapping.getFactIdentifier().getClassNameWithoutPackage().replace(""$"", "".""); final String instanceName = factMapping.getFactAlias(); if (!instanceName.equals(dataObjectName)) { final FactModelTree factModelTree = sourceMap.get(dataObjectName); if (factModelTree != null) { toReturn.put(instanceName, factModelTree); } } }); } return toReturn; } @Override public void setModel(ScenarioSimulationModel); public static FactModelTree getSimpleClassFactModelTree(String, String); public <T extends AbstractScesimModel<E>, E extends AbstractScesimData> Map<String, List<List<String>>> getPropertiesToHide(AbstractScesimGridModel<T,E>); protected <T extends AbstractScesimModel<E>, E extends AbstractScesimData> List<List<String>> getPropertiesToHide(ScenarioGridColumn, AbstractScesimGridModel<T,E>); public void storeData(FactModelTuple, TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); public SortedMap<String, FactModelTree> getInstanceMap(SortedMap<String,FactModelTree>); protected ScenarioSimulationModel model; protected ResultHolder factModelTreeHolder = new ResultHolder(); }","<FCTX>AbstractDataManagementStrategy implements DataManagementStrategy { public SortedMap<String, FactModelTree> getInstanceMap(SortedMap<String, FactModelTree> sourceMap) { SortedMap<String, FactModelTree> toReturn = new TreeMap<>(); if (model != null) { final ScesimModelDescriptor simulationDescriptor = model.getSimulation().getScesimModelDescriptor(); final ScenarioSimulationModel.Type type = model.getSettings().getType(); simulationDescriptor.getUnmodifiableFactMappings().stream().filter(factMapping -> !Objects.equals(FactMappingType.OTHER, factMapping.getExpressionIdentifier().getType())).forEach(factMapping -> { String dataObjectName = ScenarioSimulationModel.Type.DMN.equals(type) ? factMapping.getFactIdentifier().getClassName() : factMapping.getFactIdentifier().getClassNameWithoutPackage().replace(""$"", "".""); final String instanceName = factMapping.getFactAlias(); if (!instanceName.equals(dataObjectName)) { final FactModelTree factModelTree = sourceMap.get(dataObjectName); if (factModelTree != null) { toReturn.put(instanceName, factModelTree); } } }); } return toReturn; } }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDataManagementStrategy implements DataManagementStrategy { public SortedMap<String, FactModelTree> getInstanceMap(SortedMap<String, FactModelTree> sourceMap) { SortedMap<String, FactModelTree> toReturn = new TreeMap<>(); if (model != null) { final ScesimModelDescriptor simulationDescriptor = model.getSimulation().getScesimModelDescriptor(); final ScenarioSimulationModel.Type type = model.getSettings().getType(); simulationDescriptor.getUnmodifiableFactMappings().stream().filter(factMapping -> !Objects.equals(FactMappingType.OTHER, factMapping.getExpressionIdentifier().getType())).forEach(factMapping -> { String dataObjectName = ScenarioSimulationModel.Type.DMN.equals(type) ? factMapping.getFactIdentifier().getClassName() : factMapping.getFactIdentifier().getClassNameWithoutPackage().replace(""$"", "".""); final String instanceName = factMapping.getFactAlias(); if (!instanceName.equals(dataObjectName)) { final FactModelTree factModelTree = sourceMap.get(dataObjectName); if (factModelTree != null) { toReturn.put(instanceName, factModelTree); } } }); } return toReturn; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.List;|import java.util.Map;|import java.util.Objects;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.ExpressionElement;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.models.AbstractScesimGridModel;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenterData;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import static org.drools.scenariosimulation.api.utils.ConstantsHolder.VALUE;,import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenterData;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.uberfire.backend.vfs.ObservablePath;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void populateTestToolsWithoutFactModelTuple() { factModelTreeHolderlocal.setFactModelTuple(null); abstractDMNDataManagementStrategySpy.populateTestTools(testToolsPresenterMock, scenarioSimulationContextLocal, GridWidget.SIMULATION); verify(abstractDMNDataManagementStrategySpy, times(1)).retrieveFactModelTuple(eq(testToolsPresenterMock), eq(scenarioSimulationContextLocal), eq(GridWidget.SIMULATION)); verify(abstractDMNDataManagementStrategySpy, never()).getSuccessCallback(testToolsPresenterMock, scenarioSimulationContextLocal, GridWidget.SIMULATION); verify(abstractDMNDataManagementStrategySpy, never()).getSuccessCallbackMethod(eq(factModelTupleLocal), eq(testToolsPresenterMock), eq(scenarioSimulationContextLocal), eq(GridWidget.SIMULATION)); }","AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null && Objects.equals(dmnFilePath, model.getSettings().getDmnFilePath())) { getSuccessCallback(testToolsPresenter, context, gridWidget).callback(factModelTreeHolder.getFactModelTuple()); } else { dmnFilePath = model.getSettings().getDmnFilePath(); retrieveFactModelTuple(testToolsPresenter, context, gridWidget); } } public AbstractDMNDataManagementStrategy(EventBus); protected abstract void retrieveFactModelTuple(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void manageScenarioSimulationModelContent(ObservablePath, ScenarioSimulationModelContent); @Override public boolean isADataType(String); public RemoteCallback<FactModelTuple> getSuccessCallback(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); public void getSuccessCallbackMethod(FactModelTuple, TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void showErrorsAndCleanupState(FactModelTuple); protected ErrorCallback<Message> getErrorCallback(); protected final EventBus eventBus; protected Path currentPath; protected String dmnFilePath; }","<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null && Objects.equals(dmnFilePath, model.getSettings().getDmnFilePath())) { getSuccessCallback(testToolsPresenter, context, gridWidget).callback(factModelTreeHolder.getFactModelTuple()); } else { dmnFilePath = model.getSettings().getDmnFilePath(); retrieveFactModelTuple(testToolsPresenter, context, gridWidget); } } public AbstractDMNDataManagementStrategy(EventBus); }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null && Objects.equals(dmnFilePath, model.getSettings().getDmnFilePath())) { getSuccessCallback(testToolsPresenter, context, gridWidget).callback(factModelTreeHolder.getFactModelTuple()); } else { dmnFilePath = model.getSettings().getDmnFilePath(); retrieveFactModelTuple(testToolsPresenter, context, gridWidget); } } public AbstractDMNDataManagementStrategy(EventBus); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Objects;|import com.google.gwt.event.shared.EventBus;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.UnsupportedDMNEvent;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.jboss.errai.bus.client.api.messaging.Message;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.ext.widgets.common.client.common.popups.errors.ErrorPopup;,import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import com.google.gwt.event.shared.EventBus;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mockito;|import org.uberfire.backend.vfs.Path;|import static junit.framework.TestCase.assertTrue;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void populateTestToolsWithoutFactModelTupleAndDifferentDMNPath() { factModelTreeHolderlocal.setFactModelTuple(null); modelLocal.getSettings().setDmnName(""/src/test.dmn""); abstractDMNDataManagementStrategySpy.populateTestTools(testToolsPresenterMock, scenarioSimulationContextLocal, GridWidget.SIMULATION); verify(abstractDMNDataManagementStrategySpy, times(1)).retrieveFactModelTuple(eq(testToolsPresenterMock), eq(scenarioSimulationContextLocal), eq(GridWidget.SIMULATION)); verify(abstractDMNDataManagementStrategySpy, never()).getSuccessCallback(testToolsPresenterMock, scenarioSimulationContextLocal, GridWidget.SIMULATION); verify(abstractDMNDataManagementStrategySpy, never()).getSuccessCallbackMethod(eq(factModelTupleLocal), eq(testToolsPresenterMock), eq(scenarioSimulationContextLocal), eq(GridWidget.SIMULATION)); }","AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null && Objects.equals(dmnFilePath, model.getSettings().getDmnFilePath())) { getSuccessCallback(testToolsPresenter, context, gridWidget).callback(factModelTreeHolder.getFactModelTuple()); } else { dmnFilePath = model.getSettings().getDmnFilePath(); retrieveFactModelTuple(testToolsPresenter, context, gridWidget); } } public AbstractDMNDataManagementStrategy(EventBus); protected abstract void retrieveFactModelTuple(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void manageScenarioSimulationModelContent(ObservablePath, ScenarioSimulationModelContent); @Override public boolean isADataType(String); public RemoteCallback<FactModelTuple> getSuccessCallback(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); public void getSuccessCallbackMethod(FactModelTuple, TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void showErrorsAndCleanupState(FactModelTuple); protected ErrorCallback<Message> getErrorCallback(); protected final EventBus eventBus; protected Path currentPath; protected String dmnFilePath; }","<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null && Objects.equals(dmnFilePath, model.getSettings().getDmnFilePath())) { getSuccessCallback(testToolsPresenter, context, gridWidget).callback(factModelTreeHolder.getFactModelTuple()); } else { dmnFilePath = model.getSettings().getDmnFilePath(); retrieveFactModelTuple(testToolsPresenter, context, gridWidget); } } public AbstractDMNDataManagementStrategy(EventBus); }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null && Objects.equals(dmnFilePath, model.getSettings().getDmnFilePath())) { getSuccessCallback(testToolsPresenter, context, gridWidget).callback(factModelTreeHolder.getFactModelTuple()); } else { dmnFilePath = model.getSettings().getDmnFilePath(); retrieveFactModelTuple(testToolsPresenter, context, gridWidget); } } public AbstractDMNDataManagementStrategy(EventBus); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Objects;|import com.google.gwt.event.shared.EventBus;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.UnsupportedDMNEvent;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.jboss.errai.bus.client.api.messaging.Message;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.ext.widgets.common.client.common.popups.errors.ErrorPopup;,import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import com.google.gwt.event.shared.EventBus;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mockito;|import org.uberfire.backend.vfs.Path;|import static junit.framework.TestCase.assertTrue;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void populateTestToolsWithFactDifferentDMNPath() { modelLocal.getSettings().setDmnName(""/src/test.dmn""); abstractDMNDataManagementStrategySpy.populateTestTools(testToolsPresenterMock, scenarioSimulationContextLocal, GridWidget.SIMULATION); verify(abstractDMNDataManagementStrategySpy, never()).retrieveFactModelTuple(any(), any(), any()); verify(abstractDMNDataManagementStrategySpy, times(1)).getSuccessCallback(testToolsPresenterMock, scenarioSimulationContextLocal, GridWidget.SIMULATION); verify(abstractDMNDataManagementStrategySpy, times(1)).getSuccessCallbackMethod(eq(factModelTupleLocal), eq(testToolsPresenterMock), eq(scenarioSimulationContextLocal), eq(GridWidget.SIMULATION)); }","AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null && Objects.equals(dmnFilePath, model.getSettings().getDmnFilePath())) { getSuccessCallback(testToolsPresenter, context, gridWidget).callback(factModelTreeHolder.getFactModelTuple()); } else { dmnFilePath = model.getSettings().getDmnFilePath(); retrieveFactModelTuple(testToolsPresenter, context, gridWidget); } } public AbstractDMNDataManagementStrategy(EventBus); protected abstract void retrieveFactModelTuple(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void manageScenarioSimulationModelContent(ObservablePath, ScenarioSimulationModelContent); @Override public boolean isADataType(String); public RemoteCallback<FactModelTuple> getSuccessCallback(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); public void getSuccessCallbackMethod(FactModelTuple, TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void showErrorsAndCleanupState(FactModelTuple); protected ErrorCallback<Message> getErrorCallback(); protected final EventBus eventBus; protected Path currentPath; protected String dmnFilePath; }","<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null && Objects.equals(dmnFilePath, model.getSettings().getDmnFilePath())) { getSuccessCallback(testToolsPresenter, context, gridWidget).callback(factModelTreeHolder.getFactModelTuple()); } else { dmnFilePath = model.getSettings().getDmnFilePath(); retrieveFactModelTuple(testToolsPresenter, context, gridWidget); } } public AbstractDMNDataManagementStrategy(EventBus); }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null && Objects.equals(dmnFilePath, model.getSettings().getDmnFilePath())) { getSuccessCallback(testToolsPresenter, context, gridWidget).callback(factModelTreeHolder.getFactModelTuple()); } else { dmnFilePath = model.getSettings().getDmnFilePath(); retrieveFactModelTuple(testToolsPresenter, context, gridWidget); } } public AbstractDMNDataManagementStrategy(EventBus); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Objects;|import com.google.gwt.event.shared.EventBus;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.UnsupportedDMNEvent;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.jboss.errai.bus.client.api.messaging.Message;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.ext.widgets.common.client.common.popups.errors.ErrorPopup;,import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import com.google.gwt.event.shared.EventBus;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mockito;|import org.uberfire.backend.vfs.Path;|import static junit.framework.TestCase.assertTrue;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void testFormulaFieldBinding() throws Exception { final ConditionCol52 ageEqualToFormulaCondition = new ConditionCol52(); ageEqualToFormulaCondition.setConstraintValueType(BaseSingleFieldConstraint.TYPE_RET_VALUE); ageEqualToFormulaCondition.setHeader(""age equals to""); ageEqualToFormulaCondition.setFactField(""age""); ageEqualToFormulaCondition.setOperator(""==""); ageEqualToFormulaCondition.setBinding(""$age""); pattern.setChildColumns(Arrays.asList(ageEqualToFormulaCondition)); model.setConditionPatterns(Arrays.asList(pattern)); addRow(1, ""1 + 1""); model.setData(data); final String source = service.getSource(path, model); assertTrue(source.contains(""$p : Person( $age : age == ( 1 + 1 ) )"")); }","GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); @Override public String getPattern(); @Override public String getSource(Path, GuidedDecisionTable52); @Override public String getSource(Path); }","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); private Expander getDSLExpander(Path); }</FCTX> <ECTX></ECTX>","<FCTX>GuidedDecisionTableSourceService extends BaseSourceService<GuidedDecisionTable52> { @Override public String getSource(final Path path, final GuidedDecisionTable52 model) throws SourceGenerationFailedException { try { final String dslr = GuidedDTDRLPersistence.getInstance().marshal(model); final Expander expander = getDSLExpander(path); final String drl = expander.expand(dslr); return drl; } catch (Exception e) { throw new SourceGenerationFailedException(e.getMessage()); } } @Inject public GuidedDecisionTableSourceService(GuidedDTableResourceTypeDefinition, GuidedDecisionTableEditorService, IOService, FileDiscoveryService, KieModuleService); <PRIVATE_FCTX>private Expander getDSLExpander(Path);</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.io.IOException;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Collection;|import java.util.List;|import javax.enterprise.context.ApplicationScoped;|import javax.inject.Inject;|import javax.inject.Named;|import org.drools.compiler.lang.Expander;|import org.drools.compiler.lang.dsl.DSLMappingFile;|import org.drools.compiler.lang.dsl.DSLTokenizedMappingFile;|import org.drools.compiler.lang.dsl.DefaultExpander;|import org.drools.workbench.models.guided.dtable.backend.GuidedDTDRLPersistence;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.kie.workbench.common.services.backend.file.DSLFileFilter;|import org.kie.workbench.common.services.backend.source.BaseSourceService;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.kie.workbench.common.services.shared.source.SourceGenerationFailedException;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;|import org.uberfire.backend.server.util.Paths;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.Path;,import java.net.URI;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.HashSet;|import java.util.List;|import java.util.stream.Stream;|import org.drools.workbench.models.datamodel.rule.BaseSingleFieldConstraint;|import org.drools.workbench.models.guided.dtable.shared.model.ConditionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.DTCellValue52;|import org.drools.workbench.models.guided.dtable.shared.model.DescriptionCol52;|import org.drools.workbench.models.guided.dtable.shared.model.GuidedDecisionTable52;|import org.drools.workbench.models.guided.dtable.shared.model.Pattern52;|import org.drools.workbench.models.guided.dtable.shared.model.RowNumberCol52;|import org.drools.workbench.screens.guided.dtable.service.GuidedDecisionTableEditorService;|import org.drools.workbench.screens.guided.dtable.type.GuidedDTableResourceTypeDefinition;|import org.guvnor.common.services.backend.file.FileDiscoveryService;|import org.guvnor.common.services.project.model.Package;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.imports.Import;|import org.kie.soup.project.datamodel.imports.Imports;|import org.kie.workbench.common.services.shared.project.KieModuleService;|import org.mockito.Mock;|import org.mockito.runners.MockitoJUnitRunner;|import org.uberfire.io.IOService;|import org.uberfire.java.nio.file.FileSystem;|import org.uberfire.java.nio.file.Path;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Mockito.when;
"@Test public void populateTestToolsWithFactModelTuple() { abstractDMNDataManagementStrategySpy.populateTestTools(testToolsPresenterMock, scenarioSimulationContextLocal, GridWidget.SIMULATION); verify(abstractDMNDataManagementStrategySpy, never()).retrieveFactModelTuple(any(), any(), any()); verify(abstractDMNDataManagementStrategySpy, times(1)).getSuccessCallback(testToolsPresenterMock, scenarioSimulationContextLocal, GridWidget.SIMULATION); verify(abstractDMNDataManagementStrategySpy, times(1)).getSuccessCallbackMethod(eq(factModelTupleLocal), eq(testToolsPresenterMock), eq(scenarioSimulationContextLocal), eq(GridWidget.SIMULATION)); }","AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null && Objects.equals(dmnFilePath, model.getSettings().getDmnFilePath())) { getSuccessCallback(testToolsPresenter, context, gridWidget).callback(factModelTreeHolder.getFactModelTuple()); } else { dmnFilePath = model.getSettings().getDmnFilePath(); retrieveFactModelTuple(testToolsPresenter, context, gridWidget); } } public AbstractDMNDataManagementStrategy(EventBus); protected abstract void retrieveFactModelTuple(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void manageScenarioSimulationModelContent(ObservablePath, ScenarioSimulationModelContent); @Override public boolean isADataType(String); public RemoteCallback<FactModelTuple> getSuccessCallback(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); public void getSuccessCallbackMethod(FactModelTuple, TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void showErrorsAndCleanupState(FactModelTuple); protected ErrorCallback<Message> getErrorCallback(); protected final EventBus eventBus; protected Path currentPath; protected String dmnFilePath; }","<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null && Objects.equals(dmnFilePath, model.getSettings().getDmnFilePath())) { getSuccessCallback(testToolsPresenter, context, gridWidget).callback(factModelTreeHolder.getFactModelTuple()); } else { dmnFilePath = model.getSettings().getDmnFilePath(); retrieveFactModelTuple(testToolsPresenter, context, gridWidget); } } public AbstractDMNDataManagementStrategy(EventBus); }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null && Objects.equals(dmnFilePath, model.getSettings().getDmnFilePath())) { getSuccessCallback(testToolsPresenter, context, gridWidget).callback(factModelTreeHolder.getFactModelTuple()); } else { dmnFilePath = model.getSettings().getDmnFilePath(); retrieveFactModelTuple(testToolsPresenter, context, gridWidget); } } public AbstractDMNDataManagementStrategy(EventBus); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Objects;|import com.google.gwt.event.shared.EventBus;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.UnsupportedDMNEvent;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.jboss.errai.bus.client.api.messaging.Message;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.ext.widgets.common.client.common.popups.errors.ErrorPopup;,import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import com.google.gwt.event.shared.EventBus;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mockito;|import org.uberfire.backend.vfs.Path;|import static junit.framework.TestCase.assertTrue;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void manageScenarioSimulationModelContent() { final ScenarioSimulationModelContent contentMock = Mockito.spy(content); abstractDMNDataManagementStrategySpy.manageScenarioSimulationModelContent(observablePathMock, contentMock); verify(observablePathMock, times(1)).getOriginal(); verify(contentMock, times(1)).getModel(); }","AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void manageScenarioSimulationModelContent(ObservablePath currentPath, ScenarioSimulationModelContent toManage) { this.currentPath = currentPath.getOriginal(); model = toManage.getModel(); } public AbstractDMNDataManagementStrategy(EventBus); protected abstract void retrieveFactModelTuple(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void manageScenarioSimulationModelContent(ObservablePath, ScenarioSimulationModelContent); @Override public boolean isADataType(String); public RemoteCallback<FactModelTuple> getSuccessCallback(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); public void getSuccessCallbackMethod(FactModelTuple, TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void showErrorsAndCleanupState(FactModelTuple); protected ErrorCallback<Message> getErrorCallback(); protected final EventBus eventBus; protected Path currentPath; protected String dmnFilePath; }","<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void manageScenarioSimulationModelContent(ObservablePath currentPath, ScenarioSimulationModelContent toManage) { this.currentPath = currentPath.getOriginal(); model = toManage.getModel(); } public AbstractDMNDataManagementStrategy(EventBus); }</FCTX> <ECTX>@Portable public class ScenarioSimulationModelContent { public ScenarioSimulationModelContent(); public ScenarioSimulationModelContent(ScenarioSimulationModel, Overview, PackageDataModelOracleBaselinePayload); public ScenarioSimulationModel getModel(); }</ECTX>","<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public void manageScenarioSimulationModelContent(ObservablePath currentPath, ScenarioSimulationModelContent toManage) { this.currentPath = currentPath.getOriginal(); model = toManage.getModel(); } public AbstractDMNDataManagementStrategy(EventBus); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@Portable public class ScenarioSimulationModelContent { public ScenarioSimulationModelContent(); public ScenarioSimulationModelContent(ScenarioSimulationModel, Overview, PackageDataModelOracleBaselinePayload); public ScenarioSimulationModel getModel(); }</ECTX>",import java.util.Objects;|import com.google.gwt.event.shared.EventBus;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.UnsupportedDMNEvent;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.jboss.errai.bus.client.api.messaging.Message;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.ext.widgets.common.client.common.popups.errors.ErrorPopup;,import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import com.google.gwt.event.shared.EventBus;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mockito;|import org.uberfire.backend.vfs.Path;|import static junit.framework.TestCase.assertTrue;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void isADataType() { visibleFactsLocal.clear(); hiddenFactsLocal.clear(); commonIsADataType(""TEST"", false); visibleFactsLocal.put(""TEST"", new FactModelTree()); commonIsADataType(""TOAST"", false); commonIsADataType(""TEST"", true); visibleFactsLocal.clear(); hiddenFactsLocal.put(""TEST"", new FactModelTree()); commonIsADataType(""TOAST"", false); commonIsADataType(""TEST"", true); }","AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public boolean isADataType(String value) { return factModelTreeHolder.factModelTuple.getHiddenFacts().keySet().contains(value) || factModelTreeHolder.factModelTuple.getVisibleFacts().keySet().contains(value); } public AbstractDMNDataManagementStrategy(EventBus); protected abstract void retrieveFactModelTuple(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void manageScenarioSimulationModelContent(ObservablePath, ScenarioSimulationModelContent); @Override public boolean isADataType(String); public RemoteCallback<FactModelTuple> getSuccessCallback(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); public void getSuccessCallbackMethod(FactModelTuple, TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void showErrorsAndCleanupState(FactModelTuple); protected ErrorCallback<Message> getErrorCallback(); protected final EventBus eventBus; protected Path currentPath; protected String dmnFilePath; }",<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public boolean isADataType(String value) { return factModelTreeHolder.factModelTuple.getHiddenFacts().keySet().contains(value) || factModelTreeHolder.factModelTuple.getVisibleFacts().keySet().contains(value); } public AbstractDMNDataManagementStrategy(EventBus); }</FCTX> <ECTX></ECTX>,<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { @Override public boolean isADataType(String value) { return factModelTreeHolder.factModelTuple.getHiddenFacts().keySet().contains(value) || factModelTreeHolder.factModelTuple.getVisibleFacts().keySet().contains(value); } public AbstractDMNDataManagementStrategy(EventBus); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import java.util.Objects;|import com.google.gwt.event.shared.EventBus;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.UnsupportedDMNEvent;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.jboss.errai.bus.client.api.messaging.Message;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.ext.widgets.common.client.common.popups.errors.ErrorPopup;,import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import com.google.gwt.event.shared.EventBus;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mockito;|import org.uberfire.backend.vfs.Path;|import static junit.framework.TestCase.assertTrue;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void getSuccessCallbackMethod() { Map<String, List<String>> alreadyAssignedProperties = new HashMap<>(); factModelTreeHolderlocal.setFactModelTuple(null); doReturn(alreadyAssignedProperties).when(abstractDMNDataManagementStrategySpy).getPropertiesToHide(scenarioGridModelMock); abstractDMNDataManagementStrategySpy.getSuccessCallbackMethod(factModelTupleLocal, testToolsPresenterMock, scenarioSimulationContextLocal, GridWidget.SIMULATION); verify(abstractDMNDataManagementStrategySpy, times(1)).getPropertiesToHide(eq(scenarioGridModelMock)); verify(abstractDMNDataManagementStrategySpy, times(1)).storeData(eq(factModelTupleLocal), eq(testToolsPresenterMock), eq(scenarioSimulationContextLocal), eq(GridWidget.SIMULATION)); verify(abstractDMNDataManagementStrategySpy, times(1)).showErrorsAndCleanupState(eq(factModelTupleLocal)); assertEquals(factModelTupleLocal, factModelTreeHolderlocal.getFactModelTuple()); }","AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { public void getSuccessCallbackMethod(final FactModelTuple factModelTuple, final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { factModelTreeHolder.setFactModelTuple(factModelTuple); storeData(factModelTuple, testToolsPresenter, context, gridWidget); showErrorsAndCleanupState(factModelTuple); } public AbstractDMNDataManagementStrategy(EventBus); protected abstract void retrieveFactModelTuple(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); @Override public void manageScenarioSimulationModelContent(ObservablePath, ScenarioSimulationModelContent); @Override public boolean isADataType(String); public RemoteCallback<FactModelTuple> getSuccessCallback(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); public void getSuccessCallbackMethod(FactModelTuple, TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void showErrorsAndCleanupState(FactModelTuple); protected ErrorCallback<Message> getErrorCallback(); protected final EventBus eventBus; protected Path currentPath; protected String dmnFilePath; }","<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { public void getSuccessCallbackMethod(final FactModelTuple factModelTuple, final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { factModelTreeHolder.setFactModelTuple(factModelTuple); storeData(factModelTuple, testToolsPresenter, context, gridWidget); showErrorsAndCleanupState(factModelTuple); } public AbstractDMNDataManagementStrategy(EventBus); }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDMNDataManagementStrategy extends AbstractDataManagementStrategy { public void getSuccessCallbackMethod(final FactModelTuple factModelTuple, final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { factModelTreeHolder.setFactModelTuple(factModelTuple); storeData(factModelTuple, testToolsPresenter, context, gridWidget); showErrorsAndCleanupState(factModelTuple); } public AbstractDMNDataManagementStrategy(EventBus); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Objects;|import com.google.gwt.event.shared.EventBus;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.UnsupportedDMNEvent;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.jboss.errai.bus.client.api.messaging.Message;|import org.jboss.errai.common.client.api.ErrorCallback;|import org.jboss.errai.common.client.api.RemoteCallback;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.backend.vfs.Path;|import org.uberfire.ext.widgets.common.client.common.popups.errors.ErrorPopup;,import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import com.google.gwt.event.shared.EventBus;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mockito;|import org.uberfire.backend.vfs.Path;|import static junit.framework.TestCase.assertTrue;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyString;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void populateTestToolsWithoutFactModelTuple() { factModelTreeHolderlocal.setFactModelTuple(null); abstractDMODataManagementStrategySpy.populateTestTools(testToolsPresenterMock, scenarioSimulationContextLocal, GridWidget.SIMULATION); verify(abstractDMODataManagementStrategySpy, never()).storeData(eq(factModelTupleLocal), eq(testToolsPresenterMock), eq(scenarioSimulationContextLocal), eq(GridWidget.SIMULATION)); verify(abstractDMODataManagementStrategySpy, times(1)).aggregatorCallbackMethod(eq(testToolsPresenterMock), eq(0), isA(SortedMap.class), eq(scenarioSimulationContextLocal), eq(null), isA(List.class), eq(GridWidget.SIMULATION)); verify(abstractDMODataManagementStrategySpy, never()).loadSuperTypes(any(), any(), anyInt(), any(), any(), any(), any(), any()); }","AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null) { storeData(factModelTreeHolder.getFactModelTuple(), testToolsPresenter, context, gridWidget); } else { if (skipPopulateTestTools()) { testToolsPresenter.hideInstances(); return; } List<String> factTypes = getFactTypes(); final Map<Boolean, List<String>> partitionedFactTypes = factTypes.stream().collect(Collectors.partitioningBy(factType -> SIMPLE_CLASSES_MAP.keySet().contains(factType))); final List<String> dataObjectsTypes = partitionedFactTypes.get(false); final List<String> simpleJavaTypes = partitionedFactTypes.get(true); int expectedElements = dataObjectsTypes.size(); final SortedMap<String, FactModelTree> dataObjectsFieldsMap = new TreeMap<>(); final Map<String, String> superTypesMap = new HashMap<>(); if (dataObjectsTypes.isEmpty()) { aggregatorCallbackMethod(testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, null, simpleJavaTypes, gridWidget); } else { loadSuperTypes(dataObjectsTypes, testToolsPresenter, expectedElements, dataObjectsFieldsMap, superTypesMap, context, simpleJavaTypes, gridWidget); } } } protected abstract String getFQCNByFactName(String); protected abstract String getParametricFieldType(String, String); protected abstract List<String> getFactTypes(); protected abstract void getSuperType(String, Callback<String>); protected abstract boolean skipPopulateTestTools(); protected abstract void manageDataObjects(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void loadSuperTypes(List<String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, Map<String,String>, ScenarioSimulationContext, List<String>, GridWidget); protected Callback<String> superTypeAggregatorCallBack(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget, String); public FactModelTree getFactModelTree(String, Map<String,String>, ModelField[]); protected String defineClassNameField(String, Map<String,String>); public void populateGenericTypeMap(Map<String,List<String>>, String, String, boolean); public void aggregatorCallbackMethod(TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, FactModelTree, List<String>, GridWidget); public void populateFactModelTree(FactModelTree, SortedMap<String,FactModelTree>); protected String packageName = """"; }","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null) { storeData(factModelTreeHolder.getFactModelTuple(), testToolsPresenter, context, gridWidget); } else { if (skipPopulateTestTools()) { testToolsPresenter.hideInstances(); return; } List<String> factTypes = getFactTypes(); final Map<Boolean, List<String>> partitionedFactTypes = factTypes.stream().collect(Collectors.partitioningBy(factType -> SIMPLE_CLASSES_MAP.keySet().contains(factType))); final List<String> dataObjectsTypes = partitionedFactTypes.get(false); final List<String> simpleJavaTypes = partitionedFactTypes.get(true); int expectedElements = dataObjectsTypes.size(); final SortedMap<String, FactModelTree> dataObjectsFieldsMap = new TreeMap<>(); final Map<String, String> superTypesMap = new HashMap<>(); if (dataObjectsTypes.isEmpty()) { aggregatorCallbackMethod(testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, null, simpleJavaTypes, gridWidget); } else { loadSuperTypes(dataObjectsTypes, testToolsPresenter, expectedElements, dataObjectsFieldsMap, superTypesMap, context, simpleJavaTypes, gridWidget); } } } }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null) { storeData(factModelTreeHolder.getFactModelTuple(), testToolsPresenter, context, gridWidget); } else { if (skipPopulateTestTools()) { testToolsPresenter.hideInstances(); return; } List<String> factTypes = getFactTypes(); final Map<Boolean, List<String>> partitionedFactTypes = factTypes.stream().collect(Collectors.partitioningBy(factType -> SIMPLE_CLASSES_MAP.keySet().contains(factType))); final List<String> dataObjectsTypes = partitionedFactTypes.get(false); final List<String> simpleJavaTypes = partitionedFactTypes.get(true); int expectedElements = dataObjectsTypes.size(); final SortedMap<String, FactModelTree> dataObjectsFieldsMap = new TreeMap<>(); final Map<String, String> superTypesMap = new HashMap<>(); if (dataObjectsTypes.isEmpty()) { aggregatorCallbackMethod(testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, null, simpleJavaTypes, gridWidget); } else { loadSuperTypes(dataObjectsTypes, testToolsPresenter, expectedElements, dataObjectsFieldsMap, superTypesMap, context, simpleJavaTypes, gridWidget); } } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.utils.ConstantsHolder;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.client.callbacks.Callback;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collections;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.oracle.FieldAccessorsAndMutators;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.client.callbacks.Callback;|import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FACT_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_PACKAGE;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.kie.soup.project.datamodel.oracle.ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void populateTestToolsWithoutFactModelTupleWithFactTypes() { factTypes.add(TestProperties.CLASS_NAME); factModelTreeHolderlocal.setFactModelTuple(null); abstractDMODataManagementStrategySpy.populateTestTools(testToolsPresenterMock, scenarioSimulationContextLocal, GridWidget.SIMULATION); verify(abstractDMODataManagementStrategySpy, never()).storeData(eq(factModelTupleLocal), eq(testToolsPresenterMock), eq(scenarioSimulationContextLocal), eq(GridWidget.SIMULATION)); verify(abstractDMODataManagementStrategySpy, never()).aggregatorCallbackMethod(any(), anyInt(), any(), any(), any(), any(), any()); verify(abstractDMODataManagementStrategySpy, times(1)).loadSuperTypes(isA(List.class), eq(testToolsPresenterMock), eq(1), isA(SortedMap.class), isA(Map.class), eq(scenarioSimulationContextLocal), isA(List.class), eq(GridWidget.SIMULATION)); }","AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null) { storeData(factModelTreeHolder.getFactModelTuple(), testToolsPresenter, context, gridWidget); } else { if (skipPopulateTestTools()) { testToolsPresenter.hideInstances(); return; } List<String> factTypes = getFactTypes(); final Map<Boolean, List<String>> partitionedFactTypes = factTypes.stream().collect(Collectors.partitioningBy(factType -> SIMPLE_CLASSES_MAP.keySet().contains(factType))); final List<String> dataObjectsTypes = partitionedFactTypes.get(false); final List<String> simpleJavaTypes = partitionedFactTypes.get(true); int expectedElements = dataObjectsTypes.size(); final SortedMap<String, FactModelTree> dataObjectsFieldsMap = new TreeMap<>(); final Map<String, String> superTypesMap = new HashMap<>(); if (dataObjectsTypes.isEmpty()) { aggregatorCallbackMethod(testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, null, simpleJavaTypes, gridWidget); } else { loadSuperTypes(dataObjectsTypes, testToolsPresenter, expectedElements, dataObjectsFieldsMap, superTypesMap, context, simpleJavaTypes, gridWidget); } } } protected abstract String getFQCNByFactName(String); protected abstract String getParametricFieldType(String, String); protected abstract List<String> getFactTypes(); protected abstract void getSuperType(String, Callback<String>); protected abstract boolean skipPopulateTestTools(); protected abstract void manageDataObjects(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void loadSuperTypes(List<String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, Map<String,String>, ScenarioSimulationContext, List<String>, GridWidget); protected Callback<String> superTypeAggregatorCallBack(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget, String); public FactModelTree getFactModelTree(String, Map<String,String>, ModelField[]); protected String defineClassNameField(String, Map<String,String>); public void populateGenericTypeMap(Map<String,List<String>>, String, String, boolean); public void aggregatorCallbackMethod(TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, FactModelTree, List<String>, GridWidget); public void populateFactModelTree(FactModelTree, SortedMap<String,FactModelTree>); protected String packageName = """"; }","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null) { storeData(factModelTreeHolder.getFactModelTuple(), testToolsPresenter, context, gridWidget); } else { if (skipPopulateTestTools()) { testToolsPresenter.hideInstances(); return; } List<String> factTypes = getFactTypes(); final Map<Boolean, List<String>> partitionedFactTypes = factTypes.stream().collect(Collectors.partitioningBy(factType -> SIMPLE_CLASSES_MAP.keySet().contains(factType))); final List<String> dataObjectsTypes = partitionedFactTypes.get(false); final List<String> simpleJavaTypes = partitionedFactTypes.get(true); int expectedElements = dataObjectsTypes.size(); final SortedMap<String, FactModelTree> dataObjectsFieldsMap = new TreeMap<>(); final Map<String, String> superTypesMap = new HashMap<>(); if (dataObjectsTypes.isEmpty()) { aggregatorCallbackMethod(testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, null, simpleJavaTypes, gridWidget); } else { loadSuperTypes(dataObjectsTypes, testToolsPresenter, expectedElements, dataObjectsFieldsMap, superTypesMap, context, simpleJavaTypes, gridWidget); } } } }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null) { storeData(factModelTreeHolder.getFactModelTuple(), testToolsPresenter, context, gridWidget); } else { if (skipPopulateTestTools()) { testToolsPresenter.hideInstances(); return; } List<String> factTypes = getFactTypes(); final Map<Boolean, List<String>> partitionedFactTypes = factTypes.stream().collect(Collectors.partitioningBy(factType -> SIMPLE_CLASSES_MAP.keySet().contains(factType))); final List<String> dataObjectsTypes = partitionedFactTypes.get(false); final List<String> simpleJavaTypes = partitionedFactTypes.get(true); int expectedElements = dataObjectsTypes.size(); final SortedMap<String, FactModelTree> dataObjectsFieldsMap = new TreeMap<>(); final Map<String, String> superTypesMap = new HashMap<>(); if (dataObjectsTypes.isEmpty()) { aggregatorCallbackMethod(testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, null, simpleJavaTypes, gridWidget); } else { loadSuperTypes(dataObjectsTypes, testToolsPresenter, expectedElements, dataObjectsFieldsMap, superTypesMap, context, simpleJavaTypes, gridWidget); } } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.utils.ConstantsHolder;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.client.callbacks.Callback;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collections;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.oracle.FieldAccessorsAndMutators;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.client.callbacks.Callback;|import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FACT_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_PACKAGE;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.kie.soup.project.datamodel.oracle.ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void populateTestToolsWithFactModelTuple() { abstractDMODataManagementStrategySpy.populateTestTools(testToolsPresenterMock, scenarioSimulationContextLocal, GridWidget.SIMULATION); verify(abstractDMODataManagementStrategySpy, times(1)).storeData(eq(factModelTupleLocal), eq(testToolsPresenterMock), eq(scenarioSimulationContextLocal), eq(GridWidget.SIMULATION)); verify(abstractDMODataManagementStrategySpy, never()).loadSuperTypes(any(), any(), anyInt(), any(), any(), any(), any(), any()); verify(abstractDMODataManagementStrategySpy, never()).aggregatorCallbackMethod(any(), anyInt(), any(), any(), any(), any(), any()); }","AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null) { storeData(factModelTreeHolder.getFactModelTuple(), testToolsPresenter, context, gridWidget); } else { if (skipPopulateTestTools()) { testToolsPresenter.hideInstances(); return; } List<String> factTypes = getFactTypes(); final Map<Boolean, List<String>> partitionedFactTypes = factTypes.stream().collect(Collectors.partitioningBy(factType -> SIMPLE_CLASSES_MAP.keySet().contains(factType))); final List<String> dataObjectsTypes = partitionedFactTypes.get(false); final List<String> simpleJavaTypes = partitionedFactTypes.get(true); int expectedElements = dataObjectsTypes.size(); final SortedMap<String, FactModelTree> dataObjectsFieldsMap = new TreeMap<>(); final Map<String, String> superTypesMap = new HashMap<>(); if (dataObjectsTypes.isEmpty()) { aggregatorCallbackMethod(testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, null, simpleJavaTypes, gridWidget); } else { loadSuperTypes(dataObjectsTypes, testToolsPresenter, expectedElements, dataObjectsFieldsMap, superTypesMap, context, simpleJavaTypes, gridWidget); } } } protected abstract String getFQCNByFactName(String); protected abstract String getParametricFieldType(String, String); protected abstract List<String> getFactTypes(); protected abstract void getSuperType(String, Callback<String>); protected abstract boolean skipPopulateTestTools(); protected abstract void manageDataObjects(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void loadSuperTypes(List<String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, Map<String,String>, ScenarioSimulationContext, List<String>, GridWidget); protected Callback<String> superTypeAggregatorCallBack(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget, String); public FactModelTree getFactModelTree(String, Map<String,String>, ModelField[]); protected String defineClassNameField(String, Map<String,String>); public void populateGenericTypeMap(Map<String,List<String>>, String, String, boolean); public void aggregatorCallbackMethod(TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, FactModelTree, List<String>, GridWidget); public void populateFactModelTree(FactModelTree, SortedMap<String,FactModelTree>); protected String packageName = """"; }","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null) { storeData(factModelTreeHolder.getFactModelTuple(), testToolsPresenter, context, gridWidget); } else { if (skipPopulateTestTools()) { testToolsPresenter.hideInstances(); return; } List<String> factTypes = getFactTypes(); final Map<Boolean, List<String>> partitionedFactTypes = factTypes.stream().collect(Collectors.partitioningBy(factType -> SIMPLE_CLASSES_MAP.keySet().contains(factType))); final List<String> dataObjectsTypes = partitionedFactTypes.get(false); final List<String> simpleJavaTypes = partitionedFactTypes.get(true); int expectedElements = dataObjectsTypes.size(); final SortedMap<String, FactModelTree> dataObjectsFieldsMap = new TreeMap<>(); final Map<String, String> superTypesMap = new HashMap<>(); if (dataObjectsTypes.isEmpty()) { aggregatorCallbackMethod(testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, null, simpleJavaTypes, gridWidget); } else { loadSuperTypes(dataObjectsTypes, testToolsPresenter, expectedElements, dataObjectsFieldsMap, superTypesMap, context, simpleJavaTypes, gridWidget); } } } }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { @Override public void populateTestTools(final TestToolsView.Presenter testToolsPresenter, final ScenarioSimulationContext context, final GridWidget gridWidget) { if (factModelTreeHolder.getFactModelTuple() != null) { storeData(factModelTreeHolder.getFactModelTuple(), testToolsPresenter, context, gridWidget); } else { if (skipPopulateTestTools()) { testToolsPresenter.hideInstances(); return; } List<String> factTypes = getFactTypes(); final Map<Boolean, List<String>> partitionedFactTypes = factTypes.stream().collect(Collectors.partitioningBy(factType -> SIMPLE_CLASSES_MAP.keySet().contains(factType))); final List<String> dataObjectsTypes = partitionedFactTypes.get(false); final List<String> simpleJavaTypes = partitionedFactTypes.get(true); int expectedElements = dataObjectsTypes.size(); final SortedMap<String, FactModelTree> dataObjectsFieldsMap = new TreeMap<>(); final Map<String, String> superTypesMap = new HashMap<>(); if (dataObjectsTypes.isEmpty()) { aggregatorCallbackMethod(testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, null, simpleJavaTypes, gridWidget); } else { loadSuperTypes(dataObjectsTypes, testToolsPresenter, expectedElements, dataObjectsFieldsMap, superTypesMap, context, simpleJavaTypes, gridWidget); } } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.utils.ConstantsHolder;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.client.callbacks.Callback;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collections;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.oracle.FieldAccessorsAndMutators;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.client.callbacks.Callback;|import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FACT_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_PACKAGE;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.kie.soup.project.datamodel.oracle.ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void loadSuperTypes() { String factType = ""factType""; int expectedElement = 1; List<String> dataObjectsType = Arrays.asList(factType); SortedMap<String, FactModelTree> dataObjectsFieldMap = new TreeMap<>(); Map<String, String> superTypesMap = new HashMap<>(); List<String> javaSimpleType = new ArrayList<>(); abstractDMODataManagementStrategySpy.loadSuperTypes(dataObjectsType, testToolsPresenterMock, expectedElement, dataObjectsFieldMap, superTypesMap, scenarioSimulationContextLocal, javaSimpleType, GridWidget.SIMULATION); verify(abstractDMODataManagementStrategySpy, times(1)).superTypeAggregatorCallBack(eq(dataObjectsType), eq(superTypesMap), eq(testToolsPresenterMock), eq(expectedElement), eq(dataObjectsFieldMap), eq(scenarioSimulationContextLocal), eq(javaSimpleType), eq(GridWidget.SIMULATION), eq(factType)); verify(abstractDMODataManagementStrategySpy, times(1)).getSuperType(eq(factType), isA(Callback.class)); }","AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected void loadSuperTypes(final List<String> dataObjectsTypes, final TestToolsView.Presenter testToolsPresenter, final int expectedElements, final SortedMap<String, FactModelTree> dataObjectsFieldsMap, final Map<String, String> superTypesMap, final ScenarioSimulationContext context, final List<String> simpleJavaTypes, final GridWidget gridWidget) { dataObjectsTypes.forEach(factType -> getSuperType(factType, superTypeAggregatorCallBack(dataObjectsTypes, superTypesMap, testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, simpleJavaTypes, gridWidget, factType))); } protected abstract String getFQCNByFactName(String); protected abstract String getParametricFieldType(String, String); protected abstract List<String> getFactTypes(); protected abstract void getSuperType(String, Callback<String>); protected abstract boolean skipPopulateTestTools(); protected abstract void manageDataObjects(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void loadSuperTypes(List<String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, Map<String,String>, ScenarioSimulationContext, List<String>, GridWidget); protected Callback<String> superTypeAggregatorCallBack(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget, String); public FactModelTree getFactModelTree(String, Map<String,String>, ModelField[]); protected String defineClassNameField(String, Map<String,String>); public void populateGenericTypeMap(Map<String,List<String>>, String, String, boolean); public void aggregatorCallbackMethod(TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, FactModelTree, List<String>, GridWidget); public void populateFactModelTree(FactModelTree, SortedMap<String,FactModelTree>); protected String packageName = """"; }","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected void loadSuperTypes(final List<String> dataObjectsTypes, final TestToolsView.Presenter testToolsPresenter, final int expectedElements, final SortedMap<String, FactModelTree> dataObjectsFieldsMap, final Map<String, String> superTypesMap, final ScenarioSimulationContext context, final List<String> simpleJavaTypes, final GridWidget gridWidget) { dataObjectsTypes.forEach(factType -> getSuperType(factType, superTypeAggregatorCallBack(dataObjectsTypes, superTypesMap, testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, simpleJavaTypes, gridWidget, factType))); } }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected void loadSuperTypes(final List<String> dataObjectsTypes, final TestToolsView.Presenter testToolsPresenter, final int expectedElements, final SortedMap<String, FactModelTree> dataObjectsFieldsMap, final Map<String, String> superTypesMap, final ScenarioSimulationContext context, final List<String> simpleJavaTypes, final GridWidget gridWidget) { dataObjectsTypes.forEach(factType -> getSuperType(factType, superTypeAggregatorCallBack(dataObjectsTypes, superTypesMap, testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, simpleJavaTypes, gridWidget, factType))); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.utils.ConstantsHolder;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.client.callbacks.Callback;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collections;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.oracle.FieldAccessorsAndMutators;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.client.callbacks.Callback;|import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FACT_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_PACKAGE;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.kie.soup.project.datamodel.oracle.ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void superTypeAggregatorCallBack() { String factType = ""factType""; String factType2 = ""factType2""; int expectedElement = 2; List<String> dataObjectsType = Arrays.asList(factType, factType2); SortedMap<String, FactModelTree> dataObjectsFieldMap = new TreeMap<>(); Map<String, String> superTypesMap = new HashMap<>(); List<String> javaSimpleType = new ArrayList<>(); Callback<String> callback = abstractDMODataManagementStrategySpy.superTypeAggregatorCallBack(dataObjectsType, superTypesMap, testToolsPresenterMock, expectedElement, dataObjectsFieldMap, scenarioSimulationContextLocal, javaSimpleType, GridWidget.SIMULATION, factType); callback.callback(Object.class.getCanonicalName()); assertTrue(superTypesMap.containsKey(factType)); assertEquals(Object.class.getCanonicalName(), superTypesMap.get(factType)); Callback<String> callback2 = abstractDMODataManagementStrategySpy.superTypeAggregatorCallBack(dataObjectsType, superTypesMap, testToolsPresenterMock, expectedElement, dataObjectsFieldMap, scenarioSimulationContextLocal, javaSimpleType, GridWidget.SIMULATION, factType2); callback2.callback(Class.class.getCanonicalName()); assertTrue(superTypesMap.containsKey(factType2)); assertEquals(Class.class.getCanonicalName(), superTypesMap.get(factType2)); verify(abstractDMODataManagementStrategySpy, times(1)).manageDataObjects(eq(dataObjectsType), eq(superTypesMap), eq(testToolsPresenterMock), eq(expectedElement), eq(dataObjectsFieldMap), eq(scenarioSimulationContextLocal), eq(javaSimpleType), eq(GridWidget.SIMULATION)); }","AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected Callback<String> superTypeAggregatorCallBack(final List<String> dataObjectsTypes, final Map<String, String> superTypeMap, final TestToolsView.Presenter testToolsPresenter, final int expectedElements, final SortedMap<String, FactModelTree> dataObjectsFieldsMap, final ScenarioSimulationContext context, final List<String> simpleJavaTypes, final GridWidget gridWidget, final String factType) { return superType -> { superTypeMap.put(factType, superType); if (superTypeMap.size() == expectedElements) { manageDataObjects(dataObjectsTypes, superTypeMap, testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, simpleJavaTypes, gridWidget); } }; } protected abstract String getFQCNByFactName(String); protected abstract String getParametricFieldType(String, String); protected abstract List<String> getFactTypes(); protected abstract void getSuperType(String, Callback<String>); protected abstract boolean skipPopulateTestTools(); protected abstract void manageDataObjects(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void loadSuperTypes(List<String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, Map<String,String>, ScenarioSimulationContext, List<String>, GridWidget); protected Callback<String> superTypeAggregatorCallBack(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget, String); public FactModelTree getFactModelTree(String, Map<String,String>, ModelField[]); protected String defineClassNameField(String, Map<String,String>); public void populateGenericTypeMap(Map<String,List<String>>, String, String, boolean); public void aggregatorCallbackMethod(TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, FactModelTree, List<String>, GridWidget); public void populateFactModelTree(FactModelTree, SortedMap<String,FactModelTree>); protected String packageName = """"; }","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected Callback<String> superTypeAggregatorCallBack(final List<String> dataObjectsTypes, final Map<String, String> superTypeMap, final TestToolsView.Presenter testToolsPresenter, final int expectedElements, final SortedMap<String, FactModelTree> dataObjectsFieldsMap, final ScenarioSimulationContext context, final List<String> simpleJavaTypes, final GridWidget gridWidget, final String factType) { return superType -> { superTypeMap.put(factType, superType); if (superTypeMap.size() == expectedElements) { manageDataObjects(dataObjectsTypes, superTypeMap, testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, simpleJavaTypes, gridWidget); } }; } }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected Callback<String> superTypeAggregatorCallBack(final List<String> dataObjectsTypes, final Map<String, String> superTypeMap, final TestToolsView.Presenter testToolsPresenter, final int expectedElements, final SortedMap<String, FactModelTree> dataObjectsFieldsMap, final ScenarioSimulationContext context, final List<String> simpleJavaTypes, final GridWidget gridWidget, final String factType) { return superType -> { superTypeMap.put(factType, superType); if (superTypeMap.size() == expectedElements) { manageDataObjects(dataObjectsTypes, superTypeMap, testToolsPresenter, expectedElements, dataObjectsFieldsMap, context, simpleJavaTypes, gridWidget); } }; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.utils.ConstantsHolder;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.client.callbacks.Callback;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collections;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.oracle.FieldAccessorsAndMutators;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.client.callbacks.Callback;|import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FACT_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_PACKAGE;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.kie.soup.project.datamodel.oracle.ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void defineClassNameField_SimpleType() { Map<String, String> superTypesMap = new HashMap<>(); String retrieved = abstractDMODataManagementStrategySpy.defineClassNameField(String.class.getSimpleName(), superTypesMap); assertEquals(String.class.getCanonicalName(), retrieved); }","AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected String defineClassNameField(String modelFieldClassName, Map<String, String> superTypesMap) { if (SIMPLE_CLASSES_MAP.containsKey(modelFieldClassName)) { return SIMPLE_CLASSES_MAP.get(modelFieldClassName).getCanonicalName(); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypesMap.get(modelFieldClassName))) { return getFQCNByFactName(modelFieldClassName); } return modelFieldClassName; } protected abstract String getFQCNByFactName(String); protected abstract String getParametricFieldType(String, String); protected abstract List<String> getFactTypes(); protected abstract void getSuperType(String, Callback<String>); protected abstract boolean skipPopulateTestTools(); protected abstract void manageDataObjects(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void loadSuperTypes(List<String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, Map<String,String>, ScenarioSimulationContext, List<String>, GridWidget); protected Callback<String> superTypeAggregatorCallBack(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget, String); public FactModelTree getFactModelTree(String, Map<String,String>, ModelField[]); protected String defineClassNameField(String, Map<String,String>); public void populateGenericTypeMap(Map<String,List<String>>, String, String, boolean); public void aggregatorCallbackMethod(TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, FactModelTree, List<String>, GridWidget); public void populateFactModelTree(FactModelTree, SortedMap<String,FactModelTree>); protected String packageName = """"; }","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected String defineClassNameField(String modelFieldClassName, Map<String, String> superTypesMap) { if (SIMPLE_CLASSES_MAP.containsKey(modelFieldClassName)) { return SIMPLE_CLASSES_MAP.get(modelFieldClassName).getCanonicalName(); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypesMap.get(modelFieldClassName))) { return getFQCNByFactName(modelFieldClassName); } return modelFieldClassName; } }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected String defineClassNameField(String modelFieldClassName, Map<String, String> superTypesMap) { if (SIMPLE_CLASSES_MAP.containsKey(modelFieldClassName)) { return SIMPLE_CLASSES_MAP.get(modelFieldClassName).getCanonicalName(); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypesMap.get(modelFieldClassName))) { return getFQCNByFactName(modelFieldClassName); } return modelFieldClassName; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.utils.ConstantsHolder;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.client.callbacks.Callback;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collections;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.oracle.FieldAccessorsAndMutators;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.client.callbacks.Callback;|import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FACT_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_PACKAGE;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.kie.soup.project.datamodel.oracle.ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void checkInstanceIdentity() { final GuidedDTGraphXMLPersistence s1 = GuidedDTGraphXMLPersistence.getInstance(); final GuidedDTGraphXMLPersistence s2 = GuidedDTGraphXMLPersistence.getInstance(); assertEquals( s1, s2 ); }",GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); public static GuidedDTGraphXMLPersistence getInstance(); public String marshal(GuidedDecisionTableEditorGraphModel); public GuidedDecisionTableEditorGraphModel unmarshal(String); },<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); }</FCTX> <ECTX></ECTX>,<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } <PRIVATE_FCTX>private GuidedDTGraphXMLPersistence();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import com.thoughtworks.xstream.XStream;|import com.thoughtworks.xstream.io.xml.DomDriver;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.kie.soup.xstream.XStreamUtils;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;,import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.junit.Test;|import org.uberfire.backend.vfs.Path;|import org.uberfire.backend.vfs.PathFactory;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;
"@Test public void defineClassNameField_NotSimpleNotEnum() { Map<String, String> superTypesMap = new HashMap<>(); String retrieved = abstractDMODataManagementStrategySpy.defineClassNameField(TestProperties.CLASS_NAME, superTypesMap); assertEquals(TestProperties.CLASS_NAME, retrieved); }","AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected String defineClassNameField(String modelFieldClassName, Map<String, String> superTypesMap) { if (SIMPLE_CLASSES_MAP.containsKey(modelFieldClassName)) { return SIMPLE_CLASSES_MAP.get(modelFieldClassName).getCanonicalName(); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypesMap.get(modelFieldClassName))) { return getFQCNByFactName(modelFieldClassName); } return modelFieldClassName; } protected abstract String getFQCNByFactName(String); protected abstract String getParametricFieldType(String, String); protected abstract List<String> getFactTypes(); protected abstract void getSuperType(String, Callback<String>); protected abstract boolean skipPopulateTestTools(); protected abstract void manageDataObjects(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void loadSuperTypes(List<String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, Map<String,String>, ScenarioSimulationContext, List<String>, GridWidget); protected Callback<String> superTypeAggregatorCallBack(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget, String); public FactModelTree getFactModelTree(String, Map<String,String>, ModelField[]); protected String defineClassNameField(String, Map<String,String>); public void populateGenericTypeMap(Map<String,List<String>>, String, String, boolean); public void aggregatorCallbackMethod(TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, FactModelTree, List<String>, GridWidget); public void populateFactModelTree(FactModelTree, SortedMap<String,FactModelTree>); protected String packageName = """"; }","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected String defineClassNameField(String modelFieldClassName, Map<String, String> superTypesMap) { if (SIMPLE_CLASSES_MAP.containsKey(modelFieldClassName)) { return SIMPLE_CLASSES_MAP.get(modelFieldClassName).getCanonicalName(); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypesMap.get(modelFieldClassName))) { return getFQCNByFactName(modelFieldClassName); } return modelFieldClassName; } }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected String defineClassNameField(String modelFieldClassName, Map<String, String> superTypesMap) { if (SIMPLE_CLASSES_MAP.containsKey(modelFieldClassName)) { return SIMPLE_CLASSES_MAP.get(modelFieldClassName).getCanonicalName(); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypesMap.get(modelFieldClassName))) { return getFQCNByFactName(modelFieldClassName); } return modelFieldClassName; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.utils.ConstantsHolder;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.client.callbacks.Callback;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collections;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.oracle.FieldAccessorsAndMutators;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.client.callbacks.Callback;|import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FACT_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_PACKAGE;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.kie.soup.project.datamodel.oracle.ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void defineClassNameField_NotSimpleEnum() { Map<String, String> superTypesMap = new HashMap<>(); superTypesMap.put(TestProperties.CLASS_NAME, Enum.class.getCanonicalName()); String retrieved = abstractDMODataManagementStrategySpy.defineClassNameField(TestProperties.CLASS_NAME, superTypesMap); assertEquals(FULL_CLASS_NAME, retrieved); }","AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected String defineClassNameField(String modelFieldClassName, Map<String, String> superTypesMap) { if (SIMPLE_CLASSES_MAP.containsKey(modelFieldClassName)) { return SIMPLE_CLASSES_MAP.get(modelFieldClassName).getCanonicalName(); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypesMap.get(modelFieldClassName))) { return getFQCNByFactName(modelFieldClassName); } return modelFieldClassName; } protected abstract String getFQCNByFactName(String); protected abstract String getParametricFieldType(String, String); protected abstract List<String> getFactTypes(); protected abstract void getSuperType(String, Callback<String>); protected abstract boolean skipPopulateTestTools(); protected abstract void manageDataObjects(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void loadSuperTypes(List<String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, Map<String,String>, ScenarioSimulationContext, List<String>, GridWidget); protected Callback<String> superTypeAggregatorCallBack(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget, String); public FactModelTree getFactModelTree(String, Map<String,String>, ModelField[]); protected String defineClassNameField(String, Map<String,String>); public void populateGenericTypeMap(Map<String,List<String>>, String, String, boolean); public void aggregatorCallbackMethod(TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, FactModelTree, List<String>, GridWidget); public void populateFactModelTree(FactModelTree, SortedMap<String,FactModelTree>); protected String packageName = """"; }","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected String defineClassNameField(String modelFieldClassName, Map<String, String> superTypesMap) { if (SIMPLE_CLASSES_MAP.containsKey(modelFieldClassName)) { return SIMPLE_CLASSES_MAP.get(modelFieldClassName).getCanonicalName(); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypesMap.get(modelFieldClassName))) { return getFQCNByFactName(modelFieldClassName); } return modelFieldClassName; } }</FCTX> <ECTX></ECTX>","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { protected String defineClassNameField(String modelFieldClassName, Map<String, String> superTypesMap) { if (SIMPLE_CLASSES_MAP.containsKey(modelFieldClassName)) { return SIMPLE_CLASSES_MAP.get(modelFieldClassName).getCanonicalName(); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypesMap.get(modelFieldClassName))) { return getFQCNByFactName(modelFieldClassName); } return modelFieldClassName; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.utils.ConstantsHolder;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.client.callbacks.Callback;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collections;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.oracle.FieldAccessorsAndMutators;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.client.callbacks.Callback;|import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FACT_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_PACKAGE;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.kie.soup.project.datamodel.oracle.ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void getFactModelTree() { Map<String, FactModelTree.PropertyTypeName> simpleProperties = getSimplePropertiesInner(); final ModelField[] modelFields = getModelFieldsInner(simpleProperties); final FactModelTree retrieved = abstractDMODataManagementStrategySpy.getFactModelTree(FACT_NAME, Collections.emptyMap(), modelFields); assertNotNull(retrieved); assertEquals(FACT_NAME, retrieved.getFactName()); assertEquals(FULL_PACKAGE, retrieved.getFullPackage()); assertFalse(retrieved.getSimpleProperties().isEmpty()); retrieved.getSimpleProperties().entrySet().forEach( entry -> { assertFalse(entry.getValue().getBaseTypeName().isPresent()); assertEquals(entry.getValue().getTypeName(), entry.getValue().getPropertyTypeNameToVisualize()); } ); }","AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { public FactModelTree getFactModelTree(String factName, Map<String, String> superTypeMap, ModelField[] modelFields) { Map<String, FactModelTree.PropertyTypeName> simpleProperties = new HashMap<>(); Map<String, List<String>> genericTypesMap = new HashMap<>(); String fullFactClassName = getFQCNByFactName(factName); String factPackageName = packageName; String factClassName = fullFactClassName; if (fullFactClassName != null && fullFactClassName.contains(""."")) { factPackageName = fullFactClassName.substring(0, fullFactClassName.lastIndexOf('.')); factClassName = fullFactClassName.substring(fullFactClassName.lastIndexOf('.') + 1); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypeMap.get(factName))) { simpleProperties.put(ConstantsHolder.VALUE, new FactModelTree.PropertyTypeName(fullFactClassName)); return getSimpleClassFactModelTree(factName, fullFactClassName); } for (ModelField modelField : modelFields) { if (!modelField.getName().equals(""this"")) { String className = defineClassNameField(modelField.getClassName(), superTypeMap); simpleProperties.put(modelField.getName(), new FactModelTree.PropertyTypeName(className)); if (ScenarioSimulationSharedUtils.isCollectionOrMap(className)) { populateGenericTypeMap(genericTypesMap, factName, modelField.getName(), ScenarioSimulationSharedUtils.isList(className)); } } } return FactModelTree.ofDMO(factName, factPackageName, simpleProperties, genericTypesMap, factClassName); } protected abstract String getFQCNByFactName(String); protected abstract String getParametricFieldType(String, String); protected abstract List<String> getFactTypes(); protected abstract void getSuperType(String, Callback<String>); protected abstract boolean skipPopulateTestTools(); protected abstract void manageDataObjects(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void loadSuperTypes(List<String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, Map<String,String>, ScenarioSimulationContext, List<String>, GridWidget); protected Callback<String> superTypeAggregatorCallBack(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget, String); public FactModelTree getFactModelTree(String, Map<String,String>, ModelField[]); protected String defineClassNameField(String, Map<String,String>); public void populateGenericTypeMap(Map<String,List<String>>, String, String, boolean); public void aggregatorCallbackMethod(TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, FactModelTree, List<String>, GridWidget); public void populateFactModelTree(FactModelTree, SortedMap<String,FactModelTree>); protected String packageName = """"; }","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { public FactModelTree getFactModelTree(String factName, Map<String, String> superTypeMap, ModelField[] modelFields) { Map<String, FactModelTree.PropertyTypeName> simpleProperties = new HashMap<>(); Map<String, List<String>> genericTypesMap = new HashMap<>(); String fullFactClassName = getFQCNByFactName(factName); String factPackageName = packageName; String factClassName = fullFactClassName; if (fullFactClassName != null && fullFactClassName.contains(""."")) { factPackageName = fullFactClassName.substring(0, fullFactClassName.lastIndexOf('.')); factClassName = fullFactClassName.substring(fullFactClassName.lastIndexOf('.') + 1); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypeMap.get(factName))) { simpleProperties.put(ConstantsHolder.VALUE, new FactModelTree.PropertyTypeName(fullFactClassName)); return getSimpleClassFactModelTree(factName, fullFactClassName); } for (ModelField modelField : modelFields) { if (!modelField.getName().equals(""this"")) { String className = defineClassNameField(modelField.getClassName(), superTypeMap); simpleProperties.put(modelField.getName(), new FactModelTree.PropertyTypeName(className)); if (ScenarioSimulationSharedUtils.isCollectionOrMap(className)) { populateGenericTypeMap(genericTypesMap, factName, modelField.getName(), ScenarioSimulationSharedUtils.isList(className)); } } } return FactModelTree.ofDMO(factName, factPackageName, simpleProperties, genericTypesMap, factClassName); } }</FCTX> <ECTX>@Portable public class FactModelTree { public FactModelTree(); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, String); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, Type); public static FactModelTree ofDMO(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, String); }</ECTX>","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { public FactModelTree getFactModelTree(String factName, Map<String, String> superTypeMap, ModelField[] modelFields) { Map<String, FactModelTree.PropertyTypeName> simpleProperties = new HashMap<>(); Map<String, List<String>> genericTypesMap = new HashMap<>(); String fullFactClassName = getFQCNByFactName(factName); String factPackageName = packageName; String factClassName = fullFactClassName; if (fullFactClassName != null && fullFactClassName.contains(""."")) { factPackageName = fullFactClassName.substring(0, fullFactClassName.lastIndexOf('.')); factClassName = fullFactClassName.substring(fullFactClassName.lastIndexOf('.') + 1); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypeMap.get(factName))) { simpleProperties.put(ConstantsHolder.VALUE, new FactModelTree.PropertyTypeName(fullFactClassName)); return getSimpleClassFactModelTree(factName, fullFactClassName); } for (ModelField modelField : modelFields) { if (!modelField.getName().equals(""this"")) { String className = defineClassNameField(modelField.getClassName(), superTypeMap); simpleProperties.put(modelField.getName(), new FactModelTree.PropertyTypeName(className)); if (ScenarioSimulationSharedUtils.isCollectionOrMap(className)) { populateGenericTypeMap(genericTypesMap, factName, modelField.getName(), ScenarioSimulationSharedUtils.isList(className)); } } } return FactModelTree.ofDMO(factName, factPackageName, simpleProperties, genericTypesMap, factClassName); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@Portable public class FactModelTree { public FactModelTree(); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, String); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, Type); public static FactModelTree ofDMO(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, String); }</ECTX>",import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.utils.ConstantsHolder;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.client.callbacks.Callback;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collections;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.oracle.FieldAccessorsAndMutators;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.client.callbacks.Callback;|import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FACT_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_PACKAGE;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.kie.soup.project.datamodel.oracle.ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void getFactModelTreeEnumClass() { final ModelField[] modelFields = {}; Map<String, String> superTypesMap = new HashMap<>(); superTypesMap.put(FACT_NAME, Enum.class.getCanonicalName()); final FactModelTree retrieved = abstractDMODataManagementStrategySpy.getFactModelTree(FACT_NAME, superTypesMap, modelFields); assertNotNull(retrieved); assertEquals(FACT_NAME, retrieved.getFactName()); assertEquals(FULL_PACKAGE, retrieved.getFullPackage()); assertTrue(retrieved.getSimpleProperties().containsKey(TestProperties.LOWER_CASE_VALUE)); assertEquals(FULL_CLASS_NAME, retrieved.getSimpleProperties().get(TestProperties.LOWER_CASE_VALUE).getTypeName()); assertEquals(FULL_CLASS_NAME, retrieved.getSimpleProperties().get(TestProperties.LOWER_CASE_VALUE).getPropertyTypeNameToVisualize()); assertFalse(retrieved.getSimpleProperties().get(TestProperties.LOWER_CASE_VALUE).getBaseTypeName().isPresent()); assertEquals(FULL_CLASS_NAME, retrieved.getSimpleProperties().get(TestProperties.LOWER_CASE_VALUE).getPropertyTypeNameToVisualize()); }","AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { public FactModelTree getFactModelTree(String factName, Map<String, String> superTypeMap, ModelField[] modelFields) { Map<String, FactModelTree.PropertyTypeName> simpleProperties = new HashMap<>(); Map<String, List<String>> genericTypesMap = new HashMap<>(); String fullFactClassName = getFQCNByFactName(factName); String factPackageName = packageName; String factClassName = fullFactClassName; if (fullFactClassName != null && fullFactClassName.contains(""."")) { factPackageName = fullFactClassName.substring(0, fullFactClassName.lastIndexOf('.')); factClassName = fullFactClassName.substring(fullFactClassName.lastIndexOf('.') + 1); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypeMap.get(factName))) { simpleProperties.put(ConstantsHolder.VALUE, new FactModelTree.PropertyTypeName(fullFactClassName)); return getSimpleClassFactModelTree(factName, fullFactClassName); } for (ModelField modelField : modelFields) { if (!modelField.getName().equals(""this"")) { String className = defineClassNameField(modelField.getClassName(), superTypeMap); simpleProperties.put(modelField.getName(), new FactModelTree.PropertyTypeName(className)); if (ScenarioSimulationSharedUtils.isCollectionOrMap(className)) { populateGenericTypeMap(genericTypesMap, factName, modelField.getName(), ScenarioSimulationSharedUtils.isList(className)); } } } return FactModelTree.ofDMO(factName, factPackageName, simpleProperties, genericTypesMap, factClassName); } protected abstract String getFQCNByFactName(String); protected abstract String getParametricFieldType(String, String); protected abstract List<String> getFactTypes(); protected abstract void getSuperType(String, Callback<String>); protected abstract boolean skipPopulateTestTools(); protected abstract void manageDataObjects(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget); @Override public void populateTestTools(TestToolsView.Presenter, ScenarioSimulationContext, GridWidget); protected void loadSuperTypes(List<String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, Map<String,String>, ScenarioSimulationContext, List<String>, GridWidget); protected Callback<String> superTypeAggregatorCallBack(List<String>, Map<String,String>, TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, List<String>, GridWidget, String); public FactModelTree getFactModelTree(String, Map<String,String>, ModelField[]); protected String defineClassNameField(String, Map<String,String>); public void populateGenericTypeMap(Map<String,List<String>>, String, String, boolean); public void aggregatorCallbackMethod(TestToolsView.Presenter, int, SortedMap<String,FactModelTree>, ScenarioSimulationContext, FactModelTree, List<String>, GridWidget); public void populateFactModelTree(FactModelTree, SortedMap<String,FactModelTree>); protected String packageName = """"; }","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { public FactModelTree getFactModelTree(String factName, Map<String, String> superTypeMap, ModelField[] modelFields) { Map<String, FactModelTree.PropertyTypeName> simpleProperties = new HashMap<>(); Map<String, List<String>> genericTypesMap = new HashMap<>(); String fullFactClassName = getFQCNByFactName(factName); String factPackageName = packageName; String factClassName = fullFactClassName; if (fullFactClassName != null && fullFactClassName.contains(""."")) { factPackageName = fullFactClassName.substring(0, fullFactClassName.lastIndexOf('.')); factClassName = fullFactClassName.substring(fullFactClassName.lastIndexOf('.') + 1); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypeMap.get(factName))) { simpleProperties.put(ConstantsHolder.VALUE, new FactModelTree.PropertyTypeName(fullFactClassName)); return getSimpleClassFactModelTree(factName, fullFactClassName); } for (ModelField modelField : modelFields) { if (!modelField.getName().equals(""this"")) { String className = defineClassNameField(modelField.getClassName(), superTypeMap); simpleProperties.put(modelField.getName(), new FactModelTree.PropertyTypeName(className)); if (ScenarioSimulationSharedUtils.isCollectionOrMap(className)) { populateGenericTypeMap(genericTypesMap, factName, modelField.getName(), ScenarioSimulationSharedUtils.isList(className)); } } } return FactModelTree.ofDMO(factName, factPackageName, simpleProperties, genericTypesMap, factClassName); } }</FCTX> <ECTX>@Portable public class FactModelTree { public FactModelTree(); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, String); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, Type); public static FactModelTree ofDMO(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, String); }</ECTX>","<FCTX>AbstractDMODataManagementStrategy extends AbstractDataManagementStrategy { public FactModelTree getFactModelTree(String factName, Map<String, String> superTypeMap, ModelField[] modelFields) { Map<String, FactModelTree.PropertyTypeName> simpleProperties = new HashMap<>(); Map<String, List<String>> genericTypesMap = new HashMap<>(); String fullFactClassName = getFQCNByFactName(factName); String factPackageName = packageName; String factClassName = fullFactClassName; if (fullFactClassName != null && fullFactClassName.contains(""."")) { factPackageName = fullFactClassName.substring(0, fullFactClassName.lastIndexOf('.')); factClassName = fullFactClassName.substring(fullFactClassName.lastIndexOf('.') + 1); } if (ScenarioSimulationSharedUtils.isEnumCanonicalName(superTypeMap.get(factName))) { simpleProperties.put(ConstantsHolder.VALUE, new FactModelTree.PropertyTypeName(fullFactClassName)); return getSimpleClassFactModelTree(factName, fullFactClassName); } for (ModelField modelField : modelFields) { if (!modelField.getName().equals(""this"")) { String className = defineClassNameField(modelField.getClassName(), superTypeMap); simpleProperties.put(modelField.getName(), new FactModelTree.PropertyTypeName(className)); if (ScenarioSimulationSharedUtils.isCollectionOrMap(className)) { populateGenericTypeMap(genericTypesMap, factName, modelField.getName(), ScenarioSimulationSharedUtils.isList(className)); } } } return FactModelTree.ofDMO(factName, factPackageName, simpleProperties, genericTypesMap, factClassName); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@Portable public class FactModelTree { public FactModelTree(); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, String); public FactModelTree(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, Type); public static FactModelTree ofDMO(String, String, Map<String,PropertyTypeName>, Map<String,List<String>>, String); }</ECTX>",import java.util.ArrayList;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import org.drools.scenariosimulation.api.utils.ConstantsHolder;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.client.callbacks.Callback;,import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collections;|import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.SortedMap;|import java.util.TreeMap;|import java.util.stream.Collectors;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.TestProperties;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.drools.workbench.screens.scenariosimulation.model.ScenarioSimulationModelContent;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTuple;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.soup.project.datamodel.oracle.FieldAccessorsAndMutators;|import org.kie.soup.project.datamodel.oracle.ModelField;|import org.uberfire.backend.vfs.ObservablePath;|import org.uberfire.client.callbacks.Callback;|import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FACT_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_PACKAGE;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.kie.soup.project.datamodel.oracle.ModelField.FIELD_CLASS_TYPE.REGULAR_CLASS;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void createDomElement() { when(scenarioGridModelMock.getSelectedCellsOrigin()).thenReturn(new GridData.SelectedCell(0, 0)); when(factMappingMock.getExpressionAlias()).thenReturn(MAP_CLASS_NAME); when(factMappingMock.getClassName()).thenReturn(MAP_CLASS_NAME); collectionEditorSingletonDOMElementFactorySpy.createDomElement(scenarioGridLayerMock, scenarioGridMock); verify(collectionEditorViewImpl, times(1)).addDomHandler(isA(MouseWheelHandler.class), eq(MouseWheelEvent.getType())); verify(collectionEditorViewImpl, times(1)).addDomHandler(isA(ContextMenuHandler.class), eq(ContextMenuEvent.getType())); }","CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { @Override public CollectionEditorDOMElement createDomElement(final GridLayer gridLayer, final GridWidget gridWidget) { if (this.widget != null) { this.widget.close(); } this.widget = createWidget(); this.widget.addDomHandler(MouseWheelEvent::stopPropagation, MouseWheelEvent.getType()); this.widget.addDomHandler(event -> { event.stopPropagation(); event.preventDefault(); }, ContextMenuEvent.getType()); this.widget.addDomHandler(ClickEvent::stopPropagation, ClickEvent.getType()); this.widget.addDomHandler(KeyDownEvent::stopPropagation, KeyDownEvent.getType()); final AbstractScesimGridModel<? extends AbstractScesimModel, ? extends AbstractScesimData> model = ((ScenarioGrid) gridWidget).getModel(); final GridData.SelectedCell selectedCellsOrigin = model.getSelectedCellsOrigin(); final Optional<GridColumn<?>> selectedColumn = model.getColumns().stream().filter(col -> col.getIndex() == selectedCellsOrigin.getColumnIndex()).findFirst(); selectedColumn.ifPresent(col -> { final int actualIndex = model.getColumns().indexOf(col); final FactMapping factMapping = model.getAbstractScesimModel().get().getScesimModelDescriptor().getFactMappingByIndex(actualIndex); setCollectionEditorStructureData(this.widget, factMapping); this.e = createDomElementInternal(widget, gridLayer, gridWidget); }); return e; } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); @Override public CollectionViewImpl createWidget(); @Override public CollectionEditorDOMElement createDomElement(GridLayer, GridWidget); @Override protected String getValue(); protected void setCollectionEditorStructureData(CollectionViewImpl, FactMapping); protected String getRuleComplexType(String); protected void manageList(CollectionViewImpl, String, String, ScenarioSimulationModel.Type); protected void manageMap(CollectionViewImpl, String, String, String, ScenarioSimulationModel.Type); @Override public CollectionEditorDOMElement createDomElementInternal(CollectionViewImpl, GridLayer, GridWidget); protected Map<String, String> getSimplePropertiesMap(String); protected Map<String, Map<String, String>> getExpandablePropertiesMap(String); protected void commonCloseHandling(CollectionEditorDOMElement); @Override public void registerHandlers(CollectionViewImpl, CollectionEditorDOMElement); protected ViewsProvider viewsProvider; protected ScenarioSimulationContext scenarioSimulationContext; }","<FCTX>CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { @Override public CollectionEditorDOMElement createDomElement(final GridLayer gridLayer, final GridWidget gridWidget) { if (this.widget != null) { this.widget.close(); } this.widget = createWidget(); this.widget.addDomHandler(MouseWheelEvent::stopPropagation, MouseWheelEvent.getType()); this.widget.addDomHandler(event -> { event.stopPropagation(); event.preventDefault(); }, ContextMenuEvent.getType()); this.widget.addDomHandler(ClickEvent::stopPropagation, ClickEvent.getType()); this.widget.addDomHandler(KeyDownEvent::stopPropagation, KeyDownEvent.getType()); final AbstractScesimGridModel<? extends AbstractScesimModel, ? extends AbstractScesimData> model = ((ScenarioGrid) gridWidget).getModel(); final GridData.SelectedCell selectedCellsOrigin = model.getSelectedCellsOrigin(); final Optional<GridColumn<?>> selectedColumn = model.getColumns().stream().filter(col -> col.getIndex() == selectedCellsOrigin.getColumnIndex()).findFirst(); selectedColumn.ifPresent(col -> { final int actualIndex = model.getColumns().indexOf(col); final FactMapping factMapping = model.getAbstractScesimModel().get().getScesimModelDescriptor().getFactMappingByIndex(actualIndex); setCollectionEditorStructureData(this.widget, factMapping); this.e = createDomElementInternal(widget, gridLayer, gridWidget); }); return e; } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); }</FCTX> <ECTX>public abstract class AbstractScesimGridModel<T extends AbstractScesimModel<E>, E extends AbstractScesimData> extends BaseGridData { public AbstractScesimGridModel(); public AbstractScesimGridModel(boolean); public Optional<T> getAbstractScesimModel(); getColumns(); getSelectedCellsOrigin(); }</ECTX>","<FCTX>CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { @Override public CollectionEditorDOMElement createDomElement(final GridLayer gridLayer, final GridWidget gridWidget) { if (this.widget != null) { this.widget.close(); } this.widget = createWidget(); this.widget.addDomHandler(MouseWheelEvent::stopPropagation, MouseWheelEvent.getType()); this.widget.addDomHandler(event -> { event.stopPropagation(); event.preventDefault(); }, ContextMenuEvent.getType()); this.widget.addDomHandler(ClickEvent::stopPropagation, ClickEvent.getType()); this.widget.addDomHandler(KeyDownEvent::stopPropagation, KeyDownEvent.getType()); final AbstractScesimGridModel<? extends AbstractScesimModel, ? extends AbstractScesimData> model = ((ScenarioGrid) gridWidget).getModel(); final GridData.SelectedCell selectedCellsOrigin = model.getSelectedCellsOrigin(); final Optional<GridColumn<?>> selectedColumn = model.getColumns().stream().filter(col -> col.getIndex() == selectedCellsOrigin.getColumnIndex()).findFirst(); selectedColumn.ifPresent(col -> { final int actualIndex = model.getColumns().indexOf(col); final FactMapping factMapping = model.getAbstractScesimModel().get().getScesimModelDescriptor().getFactMappingByIndex(actualIndex); setCollectionEditorStructureData(this.widget, factMapping); this.e = createDomElementInternal(widget, gridLayer, gridWidget); }); return e; } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class AbstractScesimGridModel<T extends AbstractScesimModel<E>, E extends AbstractScesimData> extends BaseGridData { public AbstractScesimGridModel(); public AbstractScesimGridModel(boolean); public Optional<T> getAbstractScesimModel(); getColumns(); getSelectedCellsOrigin(); }</ECTX>",import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.Optional;|import java.util.stream.Collectors;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.dom.client.KeyDownEvent;|import com.google.gwt.event.dom.client.MouseWheelEvent;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionViewImpl;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.domelements.CollectionEditorDOMElement;|import org.drools.workbench.screens.scenariosimulation.client.models.AbstractScesimGridModel;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.utils.ViewsProvider;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.dom.single.impl.BaseSingletonDOMElementFactory;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import org.uberfire.ext.wires.core.grids.client.widget.layer.impl.GridLienzoPanel;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.RULE;|import static org.drools.scenariosimulation.api.utils.ConstantsHolder.VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.isSimpleJavaType;,import java.util.Collections;|import java.util.HashMap;|import java.util.Map;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.dom.client.ContextMenuHandler;|import com.google.gwt.event.dom.client.MouseWheelEvent;|import com.google.gwt.event.dom.client.MouseWheelHandler;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionPresenter;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionViewImpl;|import org.drools.workbench.screens.scenariosimulation.client.domelements.CollectionEditorDOMElement;|import org.drools.workbench.screens.scenariosimulation.client.events.CloseCompositeEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SaveEditorEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.CloseCompositeEventHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.SaveEditorEventHandler;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.DMN;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.RULE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_EXPANDABLE_TYPE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_EXPANDABLE_TYPE_2;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_SIMPLE_TYPE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_SIMPLE_TYPE_2;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_FACT_CLASSNAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LIST_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MAP_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NUMBER_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.STRING_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.isSimpleJavaType;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void manageList() { String key = FULL_CLASS_NAME + ""#"" + LIST_CLASS_NAME; collectionEditorSingletonDOMElementFactorySpy.manageList(collectionEditorViewImpl, key, STRING_CLASS_NAME, ScenarioSimulationModel.Type.RULE); Map<String, String> expectedMap1 = new HashMap<>(); expectedMap1.put(LOWER_CASE_VALUE, STRING_CLASS_NAME); verify(collectionEditorViewImpl, times(1)).initListStructure(eq(key), eq(expectedMap1), isA(Map.class), eq(ScenarioSimulationModel.Type.RULE)); verify(collectionEditorSingletonDOMElementFactorySpy, times(1)).getExpandablePropertiesMap(eq(STRING_CLASS_NAME)); }","CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { protected void manageList(CollectionViewImpl collectionEditorView, String key, String genericTypeName0, ScenarioSimulationModel.Type type) { collectionEditorView.initListStructure(key, getSimplePropertiesMap(genericTypeName0), getExpandablePropertiesMap(genericTypeName0), type); } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); @Override public CollectionViewImpl createWidget(); @Override public CollectionEditorDOMElement createDomElement(GridLayer, GridWidget); @Override protected String getValue(); protected void setCollectionEditorStructureData(CollectionViewImpl, FactMapping); protected String getRuleComplexType(String); protected void manageList(CollectionViewImpl, String, String, ScenarioSimulationModel.Type); protected void manageMap(CollectionViewImpl, String, String, String, ScenarioSimulationModel.Type); @Override public CollectionEditorDOMElement createDomElementInternal(CollectionViewImpl, GridLayer, GridWidget); protected Map<String, String> getSimplePropertiesMap(String); protected Map<String, Map<String, String>> getExpandablePropertiesMap(String); protected void commonCloseHandling(CollectionEditorDOMElement); @Override public void registerHandlers(CollectionViewImpl, CollectionEditorDOMElement); protected ViewsProvider viewsProvider; protected ScenarioSimulationContext scenarioSimulationContext; }","<FCTX>CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { protected void manageList(CollectionViewImpl collectionEditorView, String key, String genericTypeName0, ScenarioSimulationModel.Type type) { collectionEditorView.initListStructure(key, getSimplePropertiesMap(genericTypeName0), getExpandablePropertiesMap(genericTypeName0), type); } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); }</FCTX> <ECTX>@Templated public class CollectionViewImpl extends FocusWidget implements HasCloseCompositeHandler, HasSaveEditorHandler, CollectionView { public CollectionViewImpl(); @Override public void initListStructure(String, Map<String,String>, Map<String,Map<String,String>>, ScenarioSimulationModel.Type); }</ECTX>","<FCTX>CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { protected void manageList(CollectionViewImpl collectionEditorView, String key, String genericTypeName0, ScenarioSimulationModel.Type type) { collectionEditorView.initListStructure(key, getSimplePropertiesMap(genericTypeName0), getExpandablePropertiesMap(genericTypeName0), type); } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@Templated public class CollectionViewImpl extends FocusWidget implements HasCloseCompositeHandler, HasSaveEditorHandler, CollectionView { public CollectionViewImpl(); @Override public void initListStructure(String, Map<String,String>, Map<String,Map<String,String>>, ScenarioSimulationModel.Type); }</ECTX>",import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.Optional;|import java.util.stream.Collectors;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.dom.client.KeyDownEvent;|import com.google.gwt.event.dom.client.MouseWheelEvent;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionViewImpl;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.domelements.CollectionEditorDOMElement;|import org.drools.workbench.screens.scenariosimulation.client.models.AbstractScesimGridModel;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.utils.ViewsProvider;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.dom.single.impl.BaseSingletonDOMElementFactory;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import org.uberfire.ext.wires.core.grids.client.widget.layer.impl.GridLienzoPanel;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.RULE;|import static org.drools.scenariosimulation.api.utils.ConstantsHolder.VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.isSimpleJavaType;,import java.util.Collections;|import java.util.HashMap;|import java.util.Map;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.dom.client.ContextMenuHandler;|import com.google.gwt.event.dom.client.MouseWheelEvent;|import com.google.gwt.event.dom.client.MouseWheelHandler;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionPresenter;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionViewImpl;|import org.drools.workbench.screens.scenariosimulation.client.domelements.CollectionEditorDOMElement;|import org.drools.workbench.screens.scenariosimulation.client.events.CloseCompositeEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SaveEditorEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.CloseCompositeEventHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.SaveEditorEventHandler;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.DMN;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.RULE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_EXPANDABLE_TYPE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_EXPANDABLE_TYPE_2;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_SIMPLE_TYPE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_SIMPLE_TYPE_2;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_FACT_CLASSNAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LIST_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MAP_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NUMBER_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.STRING_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.isSimpleJavaType;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void getExpandableProperties_SimpleType() { Map<String, Map<String, String>> resultMap = collectionEditorSingletonDOMElementFactorySpy.getExpandablePropertiesMap(STRING_CLASS_NAME); assertTrue(resultMap.isEmpty()); }","CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { protected Map<String, Map<String, String>> getExpandablePropertiesMap(String typeName) { final Map<String, Map<String, String>> toReturn = new HashMap<>(); if (isSimpleJavaType(typeName)) { return toReturn; } boolean isRule = RULE.equals(scenarioSimulationContext.getScenarioSimulationModel().getSettings().getType()); final Map<String, String> expandableProperties = scenarioSimulationContext.getDataObjectFieldsMap().get(typeName).getExpandableProperties(); expandableProperties.forEach((key, nestedTypeName) -> { if (isRule) { nestedTypeName = nestedTypeName.substring(nestedTypeName.lastIndexOf('.') + 1); } toReturn.put(key, getSimplePropertiesMap(nestedTypeName)); }); return toReturn; } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); @Override public CollectionViewImpl createWidget(); @Override public CollectionEditorDOMElement createDomElement(GridLayer, GridWidget); @Override protected String getValue(); protected void setCollectionEditorStructureData(CollectionViewImpl, FactMapping); protected String getRuleComplexType(String); protected void manageList(CollectionViewImpl, String, String, ScenarioSimulationModel.Type); protected void manageMap(CollectionViewImpl, String, String, String, ScenarioSimulationModel.Type); @Override public CollectionEditorDOMElement createDomElementInternal(CollectionViewImpl, GridLayer, GridWidget); protected Map<String, String> getSimplePropertiesMap(String); protected Map<String, Map<String, String>> getExpandablePropertiesMap(String); protected void commonCloseHandling(CollectionEditorDOMElement); @Override public void registerHandlers(CollectionViewImpl, CollectionEditorDOMElement); protected ViewsProvider viewsProvider; protected ScenarioSimulationContext scenarioSimulationContext; }","<FCTX>CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { protected Map<String, Map<String, String>> getExpandablePropertiesMap(String typeName) { final Map<String, Map<String, String>> toReturn = new HashMap<>(); if (isSimpleJavaType(typeName)) { return toReturn; } boolean isRule = RULE.equals(scenarioSimulationContext.getScenarioSimulationModel().getSettings().getType()); final Map<String, String> expandableProperties = scenarioSimulationContext.getDataObjectFieldsMap().get(typeName).getExpandableProperties(); expandableProperties.forEach((key, nestedTypeName) -> { if (isRule) { nestedTypeName = nestedTypeName.substring(nestedTypeName.lastIndexOf('.') + 1); } toReturn.put(key, getSimplePropertiesMap(nestedTypeName)); }); return toReturn; } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public ScenarioSimulationModel getScenarioSimulationModel(); public SortedMap<String, FactModelTree> getDataObjectFieldsMap(); } public class ScenarioSimulationUtils { public static boolean isSimpleJavaType(String); }</ECTX>","<FCTX>CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { protected Map<String, Map<String, String>> getExpandablePropertiesMap(String typeName) { final Map<String, Map<String, String>> toReturn = new HashMap<>(); if (isSimpleJavaType(typeName)) { return toReturn; } boolean isRule = RULE.equals(scenarioSimulationContext.getScenarioSimulationModel().getSettings().getType()); final Map<String, String> expandableProperties = scenarioSimulationContext.getDataObjectFieldsMap().get(typeName).getExpandableProperties(); expandableProperties.forEach((key, nestedTypeName) -> { if (isRule) { nestedTypeName = nestedTypeName.substring(nestedTypeName.lastIndexOf('.') + 1); } toReturn.put(key, getSimplePropertiesMap(nestedTypeName)); }); return toReturn; } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public ScenarioSimulationModel getScenarioSimulationModel(); public SortedMap<String, FactModelTree> getDataObjectFieldsMap(); } public class ScenarioSimulationUtils { public static boolean isSimpleJavaType(String); }</ECTX>",import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.Optional;|import java.util.stream.Collectors;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.dom.client.KeyDownEvent;|import com.google.gwt.event.dom.client.MouseWheelEvent;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionViewImpl;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.domelements.CollectionEditorDOMElement;|import org.drools.workbench.screens.scenariosimulation.client.models.AbstractScesimGridModel;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.utils.ViewsProvider;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.dom.single.impl.BaseSingletonDOMElementFactory;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import org.uberfire.ext.wires.core.grids.client.widget.layer.impl.GridLienzoPanel;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.RULE;|import static org.drools.scenariosimulation.api.utils.ConstantsHolder.VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.isSimpleJavaType;,import java.util.Collections;|import java.util.HashMap;|import java.util.Map;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.dom.client.ContextMenuHandler;|import com.google.gwt.event.dom.client.MouseWheelEvent;|import com.google.gwt.event.dom.client.MouseWheelHandler;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionPresenter;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionViewImpl;|import org.drools.workbench.screens.scenariosimulation.client.domelements.CollectionEditorDOMElement;|import org.drools.workbench.screens.scenariosimulation.client.events.CloseCompositeEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SaveEditorEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.CloseCompositeEventHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.SaveEditorEventHandler;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.DMN;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.RULE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_EXPANDABLE_TYPE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_EXPANDABLE_TYPE_2;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_SIMPLE_TYPE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_SIMPLE_TYPE_2;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_FACT_CLASSNAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LIST_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MAP_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NUMBER_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.STRING_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.isSimpleJavaType;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void getExpandableProperties_NotSimpleType() { Map<String, Map<String, String>> expectedResult = new HashMap<>(); expectedResult.put(""a"", Collections.singletonMap(""z"", ""w"")); Map<String, Map<String, String>> resultMap = collectionEditorSingletonDOMElementFactorySpy.getExpandablePropertiesMap(FULL_FACT_CLASSNAME); assertEquals(expectedResult, resultMap); }","CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { protected Map<String, Map<String, String>> getExpandablePropertiesMap(String typeName) { final Map<String, Map<String, String>> toReturn = new HashMap<>(); if (isSimpleJavaType(typeName)) { return toReturn; } boolean isRule = RULE.equals(scenarioSimulationContext.getScenarioSimulationModel().getSettings().getType()); final Map<String, String> expandableProperties = scenarioSimulationContext.getDataObjectFieldsMap().get(typeName).getExpandableProperties(); expandableProperties.forEach((key, nestedTypeName) -> { if (isRule) { nestedTypeName = nestedTypeName.substring(nestedTypeName.lastIndexOf('.') + 1); } toReturn.put(key, getSimplePropertiesMap(nestedTypeName)); }); return toReturn; } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); @Override public CollectionViewImpl createWidget(); @Override public CollectionEditorDOMElement createDomElement(GridLayer, GridWidget); @Override protected String getValue(); protected void setCollectionEditorStructureData(CollectionViewImpl, FactMapping); protected String getRuleComplexType(String); protected void manageList(CollectionViewImpl, String, String, ScenarioSimulationModel.Type); protected void manageMap(CollectionViewImpl, String, String, String, ScenarioSimulationModel.Type); @Override public CollectionEditorDOMElement createDomElementInternal(CollectionViewImpl, GridLayer, GridWidget); protected Map<String, String> getSimplePropertiesMap(String); protected Map<String, Map<String, String>> getExpandablePropertiesMap(String); protected void commonCloseHandling(CollectionEditorDOMElement); @Override public void registerHandlers(CollectionViewImpl, CollectionEditorDOMElement); protected ViewsProvider viewsProvider; protected ScenarioSimulationContext scenarioSimulationContext; }","<FCTX>CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { protected Map<String, Map<String, String>> getExpandablePropertiesMap(String typeName) { final Map<String, Map<String, String>> toReturn = new HashMap<>(); if (isSimpleJavaType(typeName)) { return toReturn; } boolean isRule = RULE.equals(scenarioSimulationContext.getScenarioSimulationModel().getSettings().getType()); final Map<String, String> expandableProperties = scenarioSimulationContext.getDataObjectFieldsMap().get(typeName).getExpandableProperties(); expandableProperties.forEach((key, nestedTypeName) -> { if (isRule) { nestedTypeName = nestedTypeName.substring(nestedTypeName.lastIndexOf('.') + 1); } toReturn.put(key, getSimplePropertiesMap(nestedTypeName)); }); return toReturn; } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public ScenarioSimulationModel getScenarioSimulationModel(); public SortedMap<String, FactModelTree> getDataObjectFieldsMap(); } public class ScenarioSimulationUtils { public static boolean isSimpleJavaType(String); }</ECTX>","<FCTX>CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { protected Map<String, Map<String, String>> getExpandablePropertiesMap(String typeName) { final Map<String, Map<String, String>> toReturn = new HashMap<>(); if (isSimpleJavaType(typeName)) { return toReturn; } boolean isRule = RULE.equals(scenarioSimulationContext.getScenarioSimulationModel().getSettings().getType()); final Map<String, String> expandableProperties = scenarioSimulationContext.getDataObjectFieldsMap().get(typeName).getExpandableProperties(); expandableProperties.forEach((key, nestedTypeName) -> { if (isRule) { nestedTypeName = nestedTypeName.substring(nestedTypeName.lastIndexOf('.') + 1); } toReturn.put(key, getSimplePropertiesMap(nestedTypeName)); }); return toReturn; } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class ScenarioSimulationContext { public ScenarioSimulationContext(ScenarioGridWidget, ScenarioGridWidget); public ScenarioSimulationModel getScenarioSimulationModel(); public SortedMap<String, FactModelTree> getDataObjectFieldsMap(); } public class ScenarioSimulationUtils { public static boolean isSimpleJavaType(String); }</ECTX>",import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.Optional;|import java.util.stream.Collectors;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.dom.client.KeyDownEvent;|import com.google.gwt.event.dom.client.MouseWheelEvent;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionViewImpl;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.domelements.CollectionEditorDOMElement;|import org.drools.workbench.screens.scenariosimulation.client.models.AbstractScesimGridModel;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.utils.ViewsProvider;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.dom.single.impl.BaseSingletonDOMElementFactory;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import org.uberfire.ext.wires.core.grids.client.widget.layer.impl.GridLienzoPanel;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.RULE;|import static org.drools.scenariosimulation.api.utils.ConstantsHolder.VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.isSimpleJavaType;,import java.util.Collections;|import java.util.HashMap;|import java.util.Map;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.dom.client.ContextMenuHandler;|import com.google.gwt.event.dom.client.MouseWheelEvent;|import com.google.gwt.event.dom.client.MouseWheelHandler;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionPresenter;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionViewImpl;|import org.drools.workbench.screens.scenariosimulation.client.domelements.CollectionEditorDOMElement;|import org.drools.workbench.screens.scenariosimulation.client.events.CloseCompositeEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SaveEditorEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.CloseCompositeEventHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.SaveEditorEventHandler;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.DMN;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.RULE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_EXPANDABLE_TYPE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_EXPANDABLE_TYPE_2;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_SIMPLE_TYPE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_SIMPLE_TYPE_2;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_FACT_CLASSNAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LIST_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MAP_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NUMBER_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.STRING_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.isSimpleJavaType;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void getRuleComplexType() { String ruleComplexType = collectionEditorSingletonDOMElementFactorySpy.getRuleComplexType(FULL_CLASS_NAME); assertEquals(CLASS_NAME, ruleComplexType); ruleComplexType = collectionEditorSingletonDOMElementFactorySpy.getRuleComplexType(""com.Test$Nested""); assertEquals(""Test.Nested"", ruleComplexType); }","CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { protected String getRuleComplexType(String genericTypeName0) { return genericTypeName0.substring(genericTypeName0.lastIndexOf('.') + 1).replace(""$"", "".""); } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); @Override public CollectionViewImpl createWidget(); @Override public CollectionEditorDOMElement createDomElement(GridLayer, GridWidget); @Override protected String getValue(); protected void setCollectionEditorStructureData(CollectionViewImpl, FactMapping); protected String getRuleComplexType(String); protected void manageList(CollectionViewImpl, String, String, ScenarioSimulationModel.Type); protected void manageMap(CollectionViewImpl, String, String, String, ScenarioSimulationModel.Type); @Override public CollectionEditorDOMElement createDomElementInternal(CollectionViewImpl, GridLayer, GridWidget); protected Map<String, String> getSimplePropertiesMap(String); protected Map<String, Map<String, String>> getExpandablePropertiesMap(String); protected void commonCloseHandling(CollectionEditorDOMElement); @Override public void registerHandlers(CollectionViewImpl, CollectionEditorDOMElement); protected ViewsProvider viewsProvider; protected ScenarioSimulationContext scenarioSimulationContext; }","<FCTX>CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { protected String getRuleComplexType(String genericTypeName0) { return genericTypeName0.substring(genericTypeName0.lastIndexOf('.') + 1).replace(""$"", "".""); } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); }</FCTX> <ECTX></ECTX>","<FCTX>CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { protected String getRuleComplexType(String genericTypeName0) { return genericTypeName0.substring(genericTypeName0.lastIndexOf('.') + 1).replace(""$"", "".""); } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.Optional;|import java.util.stream.Collectors;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.dom.client.KeyDownEvent;|import com.google.gwt.event.dom.client.MouseWheelEvent;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionViewImpl;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.domelements.CollectionEditorDOMElement;|import org.drools.workbench.screens.scenariosimulation.client.models.AbstractScesimGridModel;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.utils.ViewsProvider;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.dom.single.impl.BaseSingletonDOMElementFactory;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import org.uberfire.ext.wires.core.grids.client.widget.layer.impl.GridLienzoPanel;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.RULE;|import static org.drools.scenariosimulation.api.utils.ConstantsHolder.VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.isSimpleJavaType;,import java.util.Collections;|import java.util.HashMap;|import java.util.Map;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.dom.client.ContextMenuHandler;|import com.google.gwt.event.dom.client.MouseWheelEvent;|import com.google.gwt.event.dom.client.MouseWheelHandler;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionPresenter;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionViewImpl;|import org.drools.workbench.screens.scenariosimulation.client.domelements.CollectionEditorDOMElement;|import org.drools.workbench.screens.scenariosimulation.client.events.CloseCompositeEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SaveEditorEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.CloseCompositeEventHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.SaveEditorEventHandler;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.DMN;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.RULE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_EXPANDABLE_TYPE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_EXPANDABLE_TYPE_2;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_SIMPLE_TYPE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_SIMPLE_TYPE_2;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_FACT_CLASSNAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LIST_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MAP_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NUMBER_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.STRING_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.isSimpleJavaType;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void registerHandlers() { CollectionEditorDOMElement collectionEditorDOMElementMock = mock(CollectionEditorDOMElement.class); collectionEditorSingletonDOMElementFactorySpy.registerHandlers(collectionEditorViewImpl, collectionEditorDOMElementMock); ArgumentCaptor<CloseCompositeEventHandler> closeHandler = ArgumentCaptor.forClass(CloseCompositeEventHandler.class); verify(collectionEditorViewImpl, times(1)).addCloseCompositeEventHandler(closeHandler.capture()); closeHandler.getValue().onEvent(mock(CloseCompositeEvent.class)); verify(collectionEditorSingletonDOMElementFactorySpy).destroyResources(); verify(scenarioGridLayerMock).batch(); verify(scenarioGridPanelMock).setFocus(eq(true)); verify(collectionEditorDOMElementMock).stopEditingMode(); reset(collectionEditorSingletonDOMElementFactorySpy); reset(scenarioGridLayerMock); reset(scenarioGridPanelMock); ArgumentCaptor<SaveEditorEventHandler> saveHandler = ArgumentCaptor.forClass(SaveEditorEventHandler.class); verify(collectionEditorViewImpl, times(1)).addSaveEditorEventHandler(saveHandler.capture()); saveHandler.getValue().onEvent(mock(SaveEditorEvent.class)); verify(collectionEditorSingletonDOMElementFactorySpy).flush(); verify(scenarioGridLayerMock).batch(); verify(scenarioGridPanelMock).setFocus(eq(true)); }","CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { @Override public void registerHandlers(final CollectionViewImpl widget, final CollectionEditorDOMElement widgetDomElement) { widget.addCloseCompositeEventHandler(event -> commonCloseHandling(widgetDomElement)); widget.addSaveEditorEventHandler(event -> { flush(); gridLayer.batch(); gridPanel.setFocus(true); }); } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); @Override public CollectionViewImpl createWidget(); @Override public CollectionEditorDOMElement createDomElement(GridLayer, GridWidget); @Override protected String getValue(); protected void setCollectionEditorStructureData(CollectionViewImpl, FactMapping); protected String getRuleComplexType(String); protected void manageList(CollectionViewImpl, String, String, ScenarioSimulationModel.Type); protected void manageMap(CollectionViewImpl, String, String, String, ScenarioSimulationModel.Type); @Override public CollectionEditorDOMElement createDomElementInternal(CollectionViewImpl, GridLayer, GridWidget); protected Map<String, String> getSimplePropertiesMap(String); protected Map<String, Map<String, String>> getExpandablePropertiesMap(String); protected void commonCloseHandling(CollectionEditorDOMElement); @Override public void registerHandlers(CollectionViewImpl, CollectionEditorDOMElement); protected ViewsProvider viewsProvider; protected ScenarioSimulationContext scenarioSimulationContext; }","<FCTX>CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { @Override public void registerHandlers(final CollectionViewImpl widget, final CollectionEditorDOMElement widgetDomElement) { widget.addCloseCompositeEventHandler(event -> commonCloseHandling(widgetDomElement)); widget.addSaveEditorEventHandler(event -> { flush(); gridLayer.batch(); gridPanel.setFocus(true); }); } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); }</FCTX> <ECTX>@Templated public class CollectionViewImpl extends FocusWidget implements HasCloseCompositeHandler, HasSaveEditorHandler, CollectionView { public CollectionViewImpl(); @Override public HandlerRegistration addCloseCompositeEventHandler(CloseCompositeEventHandler); @Override public HandlerRegistration addSaveEditorEventHandler(SaveEditorEventHandler); }</ECTX>","<FCTX>CollectionEditorSingletonDOMElementFactory extends BaseSingletonDOMElementFactory<String, CollectionViewImpl, CollectionEditorDOMElement> { @Override public void registerHandlers(final CollectionViewImpl widget, final CollectionEditorDOMElement widgetDomElement) { widget.addCloseCompositeEventHandler(event -> commonCloseHandling(widgetDomElement)); widget.addSaveEditorEventHandler(event -> { flush(); gridLayer.batch(); gridPanel.setFocus(true); }); } public CollectionEditorSingletonDOMElementFactory(GridLienzoPanel, GridLayer, GridWidget, ScenarioSimulationContext, ViewsProvider); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@Templated public class CollectionViewImpl extends FocusWidget implements HasCloseCompositeHandler, HasSaveEditorHandler, CollectionView { public CollectionViewImpl(); @Override public HandlerRegistration addCloseCompositeEventHandler(CloseCompositeEventHandler); @Override public HandlerRegistration addSaveEditorEventHandler(SaveEditorEventHandler); }</ECTX>",import java.util.HashMap;|import java.util.List;|import java.util.Map;|import java.util.Optional;|import java.util.stream.Collectors;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.dom.client.KeyDownEvent;|import com.google.gwt.event.dom.client.MouseWheelEvent;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionViewImpl;|import org.drools.workbench.screens.scenariosimulation.client.commands.ScenarioSimulationContext;|import org.drools.workbench.screens.scenariosimulation.client.domelements.CollectionEditorDOMElement;|import org.drools.workbench.screens.scenariosimulation.client.models.AbstractScesimGridModel;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.utils.ViewsProvider;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.dom.single.impl.BaseSingletonDOMElementFactory;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import org.uberfire.ext.wires.core.grids.client.widget.layer.impl.GridLienzoPanel;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.RULE;|import static org.drools.scenariosimulation.api.utils.ConstantsHolder.VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.isSimpleJavaType;,import java.util.Collections;|import java.util.HashMap;|import java.util.Map;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.dom.client.ContextMenuHandler;|import com.google.gwt.event.dom.client.MouseWheelEvent;|import com.google.gwt.event.dom.client.MouseWheelHandler;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionPresenter;|import org.drools.workbench.screens.scenariosimulation.client.collectioneditor.CollectionViewImpl;|import org.drools.workbench.screens.scenariosimulation.client.domelements.CollectionEditorDOMElement;|import org.drools.workbench.screens.scenariosimulation.client.events.CloseCompositeEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.SaveEditorEvent;|import org.drools.workbench.screens.scenariosimulation.client.handlers.CloseCompositeEventHandler;|import org.drools.workbench.screens.scenariosimulation.client.handlers.SaveEditorEventHandler;|import org.drools.workbench.screens.scenariosimulation.model.typedescriptor.FactModelTree;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.ArgumentCaptor;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.DMN;|import static org.drools.scenariosimulation.api.model.ScenarioSimulationModel.Type.RULE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_EXPANDABLE_TYPE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_EXPANDABLE_TYPE_2;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_SIMPLE_TYPE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXPECTED_MAP_FOR_SIMPLE_TYPE_2;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_FACT_CLASSNAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LIST_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LOWER_CASE_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MAP_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NUMBER_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.STRING_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.isSimpleJavaType;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
@Test public void checkUnmarshallingNull() { final GuidedDecisionTableEditorGraphModel model = GuidedDTGraphXMLPersistence.getInstance().unmarshal( null ); assertEmptyModel( model ); },GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); public static GuidedDTGraphXMLPersistence getInstance(); public String marshal(GuidedDecisionTableEditorGraphModel); public GuidedDecisionTableEditorGraphModel unmarshal(String); },<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); }</FCTX> <ECTX></ECTX>,<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } <PRIVATE_FCTX>private GuidedDTGraphXMLPersistence();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import com.thoughtworks.xstream.XStream;|import com.thoughtworks.xstream.io.xml.DomDriver;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.kie.soup.xstream.XStreamUtils;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;,import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.junit.Test;|import org.uberfire.backend.vfs.Path;|import org.uberfire.backend.vfs.PathFactory;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;
"@Test public void provideDocks() { final Collection<UberfireDock> docks = abstractScenarioSimulationDocksHandlerSpy.provideDocks(""id""); assertEquals(MANAGED_DOCKS.values().length, docks.size()); final UberfireDock cheetSheetDock = (UberfireDock) docks.toArray()[MANAGED_DOCKS.CHEATSHEET.ordinal()]; assertNotNull(cheetSheetDock); assertEquals(CheatSheetPresenter.IDENTIFIER, cheetSheetDock.getPlaceRequest().getIdentifier()); assertEquals(ScenarioSimulationEditorConstants.INSTANCE.scenarioCheatSheet(), cheetSheetDock.getLabel()); assertEquals(UberfireDockPosition.EAST, cheetSheetDock.getDockPosition()); assertEquals(""FILE_TEXT"", cheetSheetDock.getIconType()); final UberfireDock settingsDock = (UberfireDock) docks.toArray()[MANAGED_DOCKS.SETTINGS.ordinal()]; assertNotNull(settingsDock); assertEquals(SettingsPresenter.IDENTIFIER, settingsDock.getPlaceRequest().getIdentifier()); assertEquals(ScenarioSimulationEditorConstants.INSTANCE.settings(), settingsDock.getLabel()); assertEquals(UberfireDockPosition.EAST, settingsDock.getDockPosition()); assertEquals(""SLIDERS"", settingsDock.getIconType()); final UberfireDock testToolsDock = (UberfireDock) docks.toArray()[MANAGED_DOCKS.TOOLS.ordinal()]; assertNotNull(testToolsDock); assertEquals(TestToolsPresenter.IDENTIFIER, testToolsDock.getPlaceRequest().getIdentifier()); assertEquals(ScenarioSimulationEditorConstants.INSTANCE.testTools(), testToolsDock.getLabel()); assertEquals(UberfireDockPosition.EAST, testToolsDock.getDockPosition()); assertEquals(""INFO_CIRCLE"", testToolsDock.getIconType()); }","AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { @Override public Collection<UberfireDock> provideDocks(final String perspectiveIdentifier) { List<UberfireDock> result = new ArrayList<>(); settingsDock = new UberfireDock(UberfireDockPosition.EAST, ""SLIDERS"", new DefaultPlaceRequest(SettingsPresenter.IDENTIFIER), perspectiveIdentifier); result.add(settingsDock.withSize(450).withLabel(ScenarioSimulationEditorConstants.INSTANCE.settings())); toolsDock = new UberfireDock(UberfireDockPosition.EAST, ""INFO_CIRCLE"", new DefaultPlaceRequest(TestToolsPresenter.IDENTIFIER), perspectiveIdentifier); result.add(toolsDock.withSize(450).withLabel(ScenarioSimulationEditorConstants.INSTANCE.testTools())); cheatSheetDock = new UberfireDock(UberfireDockPosition.EAST, ""FILE_TEXT"", new DefaultPlaceRequest(CheatSheetPresenter.IDENTIFIER), perspectiveIdentifier); result.add(cheatSheetDock.withSize(450).withLabel(ScenarioSimulationEditorConstants.INSTANCE.scenarioCheatSheet())); return result; } @Override public Collection<UberfireDock> provideDocks(String); public void addDocks(); public void removeDocks(); @Override protected void refreshDocks(boolean, boolean); public void expandToolsDock(); public void expandSettingsDock(); public abstract void expandTestResultsDock(); public void resetDocks(); public void setScesimEditorId(String); public CheatSheetView.Presenter getCheatSheetPresenter(); public TestToolsView.Presenter getTestToolsPresenter(); public SettingsView.Presenter getSettingsPresenter(); protected PlaceRequest getSettingsPlaceManager(); protected PlaceRequest getTestToolsPlaceManager(); protected PlaceRequest getCurrentRightDockPlaceRequest(String); public static final String SCESIMEDITOR_ID = ""scesimeditorid""; @Inject protected AuthoringEditorDock authoringWorkbenchDocks; @Inject protected PlaceManager placeManager; @Inject protected TestToolsPresenter testToolsPresenter; @Inject protected SettingsPresenter settingsPresenter; @Inject protected CheatSheetPresenter cheatSheetPresenter; }","<FCTX>AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { @Override public Collection<UberfireDock> provideDocks(final String perspectiveIdentifier) { List<UberfireDock> result = new ArrayList<>(); settingsDock = new UberfireDock(UberfireDockPosition.EAST, ""SLIDERS"", new DefaultPlaceRequest(SettingsPresenter.IDENTIFIER), perspectiveIdentifier); result.add(settingsDock.withSize(450).withLabel(ScenarioSimulationEditorConstants.INSTANCE.settings())); toolsDock = new UberfireDock(UberfireDockPosition.EAST, ""INFO_CIRCLE"", new DefaultPlaceRequest(TestToolsPresenter.IDENTIFIER), perspectiveIdentifier); result.add(toolsDock.withSize(450).withLabel(ScenarioSimulationEditorConstants.INSTANCE.testTools())); cheatSheetDock = new UberfireDock(UberfireDockPosition.EAST, ""FILE_TEXT"", new DefaultPlaceRequest(CheatSheetPresenter.IDENTIFIER), perspectiveIdentifier); result.add(cheatSheetDock.withSize(450).withLabel(ScenarioSimulationEditorConstants.INSTANCE.scenarioCheatSheet())); return result; } private UberfireDock settingsDock; private UberfireDock toolsDock; private UberfireDock cheatSheetDock; }</FCTX> <ECTX>@ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class CheatSheetPresenter extends AbstractSubDockPresenter<CheatSheetView> implements CheatSheetView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.CheatSheet""; public CheatSheetPresenter(); @Inject public CheatSheetPresenter(CheatSheetView); } public interface ScenarioSimulationEditorConstants extends Messages { } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class SettingsPresenter extends AbstractSubDockPresenter<SettingsView> implements SettingsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.Settings""; public SettingsPresenter(); @Inject public SettingsPresenter(SettingsScenarioSimulationDropdown, SettingsView); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>","<FCTX>AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { @Override public Collection<UberfireDock> provideDocks(final String perspectiveIdentifier) { List<UberfireDock> result = new ArrayList<>(); settingsDock = new UberfireDock(UberfireDockPosition.EAST, ""SLIDERS"", new DefaultPlaceRequest(SettingsPresenter.IDENTIFIER), perspectiveIdentifier); result.add(settingsDock.withSize(450).withLabel(ScenarioSimulationEditorConstants.INSTANCE.settings())); toolsDock = new UberfireDock(UberfireDockPosition.EAST, ""INFO_CIRCLE"", new DefaultPlaceRequest(TestToolsPresenter.IDENTIFIER), perspectiveIdentifier); result.add(toolsDock.withSize(450).withLabel(ScenarioSimulationEditorConstants.INSTANCE.testTools())); cheatSheetDock = new UberfireDock(UberfireDockPosition.EAST, ""FILE_TEXT"", new DefaultPlaceRequest(CheatSheetPresenter.IDENTIFIER), perspectiveIdentifier); result.add(cheatSheetDock.withSize(450).withLabel(ScenarioSimulationEditorConstants.INSTANCE.scenarioCheatSheet())); return result; } <PRIVATE_FCTX>private UberfireDock settingsDock; private UberfireDock toolsDock; private UberfireDock cheatSheetDock;</PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class CheatSheetPresenter extends AbstractSubDockPresenter<CheatSheetView> implements CheatSheetView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.CheatSheet""; public CheatSheetPresenter(); @Inject public CheatSheetPresenter(CheatSheetView); } public interface ScenarioSimulationEditorConstants extends Messages { } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class SettingsPresenter extends AbstractSubDockPresenter<SettingsView> implements SettingsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.Settings""; public SettingsPresenter(); @Inject public SettingsPresenter(SettingsScenarioSimulationDropdown, SettingsView); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public static final String IDENTIFIER = ""org.drools.scenariosimulation.TestTools""; public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); }</ECTX>",import java.util.ArrayList;|import java.util.Collection;|import java.util.List;|import javax.inject.Inject;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.kie.workbench.common.widgets.client.docks.AbstractWorkbenchDocksHandler;|import org.kie.workbench.common.widgets.client.docks.AuthoringEditorDock;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDockPosition;|import org.uberfire.mvp.PlaceRequest;|import org.uberfire.mvp.impl.DefaultPlaceRequest;,import java.util.Collection;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.workbench.common.widgets.client.docks.AuthoringEditorDock;|import org.mockito.Mock;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDockPosition;|import org.uberfire.mvp.PlaceRequest;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void resetDocks() { abstractScenarioSimulationDocksHandlerSpy.resetDocks(); verify(testToolsPresenterMock, times(1)).reset(); verify(settingsPresenterMock, times(1)).reset(); verify(cheatSheetPresenterMock, times(1)).reset(); }","AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void resetDocks() { settingsPresenter.reset(); cheatSheetPresenter.reset(); testToolsPresenter.reset(); } @Override public Collection<UberfireDock> provideDocks(String); public void addDocks(); public void removeDocks(); @Override protected void refreshDocks(boolean, boolean); public void expandToolsDock(); public void expandSettingsDock(); public abstract void expandTestResultsDock(); public void resetDocks(); public void setScesimEditorId(String); public CheatSheetView.Presenter getCheatSheetPresenter(); public TestToolsView.Presenter getTestToolsPresenter(); public SettingsView.Presenter getSettingsPresenter(); protected PlaceRequest getSettingsPlaceManager(); protected PlaceRequest getTestToolsPlaceManager(); protected PlaceRequest getCurrentRightDockPlaceRequest(String); public static final String SCESIMEDITOR_ID = ""scesimeditorid""; @Inject protected AuthoringEditorDock authoringWorkbenchDocks; @Inject protected PlaceManager placeManager; @Inject protected TestToolsPresenter testToolsPresenter; @Inject protected SettingsPresenter settingsPresenter; @Inject protected CheatSheetPresenter cheatSheetPresenter; }","<FCTX>AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void resetDocks() { settingsPresenter.reset(); cheatSheetPresenter.reset(); testToolsPresenter.reset(); } }</FCTX> <ECTX>@ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class CheatSheetPresenter extends AbstractSubDockPresenter<CheatSheetView> implements CheatSheetView.Presenter { public CheatSheetPresenter(); @Inject public CheatSheetPresenter(CheatSheetView); @Override public void reset(); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class SettingsPresenter extends AbstractSubDockPresenter<SettingsView> implements SettingsView.Presenter { public SettingsPresenter(); @Inject public SettingsPresenter(SettingsScenarioSimulationDropdown, SettingsView); @Override public void reset(); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); @Override public void reset(); }</ECTX>","<FCTX>AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void resetDocks() { settingsPresenter.reset(); cheatSheetPresenter.reset(); testToolsPresenter.reset(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class CheatSheetPresenter extends AbstractSubDockPresenter<CheatSheetView> implements CheatSheetView.Presenter { public CheatSheetPresenter(); @Inject public CheatSheetPresenter(CheatSheetView); @Override public void reset(); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class SettingsPresenter extends AbstractSubDockPresenter<SettingsView> implements SettingsView.Presenter { public SettingsPresenter(); @Inject public SettingsPresenter(SettingsScenarioSimulationDropdown, SettingsView); @Override public void reset(); } @ApplicationScoped @WorkbenchScreen(identifier = IDENTIFIER, preferredWidth = DEFAULT_PREFERRED_WIDHT) public class TestToolsPresenter extends AbstractSubDockPresenter<TestToolsView> implements TestToolsView.Presenter { public TestToolsPresenter(); @Inject public TestToolsPresenter(TestToolsView, ListGroupItemPresenter); @Override public void reset(); }</ECTX>",import java.util.ArrayList;|import java.util.Collection;|import java.util.List;|import javax.inject.Inject;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.kie.workbench.common.widgets.client.docks.AbstractWorkbenchDocksHandler;|import org.kie.workbench.common.widgets.client.docks.AuthoringEditorDock;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDockPosition;|import org.uberfire.mvp.PlaceRequest;|import org.uberfire.mvp.impl.DefaultPlaceRequest;,import java.util.Collection;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.workbench.common.widgets.client.docks.AuthoringEditorDock;|import org.mockito.Mock;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDockPosition;|import org.uberfire.mvp.PlaceRequest;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void addDocks() { abstractScenarioSimulationDocksHandlerSpy.addDocks(); verify(abstractScenarioSimulationDocksHandlerSpy, times(1)).refreshDocks(eq(true), eq(false)); }","AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void addDocks() { refreshDocks(true, false); } @Override public Collection<UberfireDock> provideDocks(String); public void addDocks(); public void removeDocks(); @Override protected void refreshDocks(boolean, boolean); public void expandToolsDock(); public void expandSettingsDock(); public abstract void expandTestResultsDock(); public void resetDocks(); public void setScesimEditorId(String); public CheatSheetView.Presenter getCheatSheetPresenter(); public TestToolsView.Presenter getTestToolsPresenter(); public SettingsView.Presenter getSettingsPresenter(); protected PlaceRequest getSettingsPlaceManager(); protected PlaceRequest getTestToolsPlaceManager(); protected PlaceRequest getCurrentRightDockPlaceRequest(String); public static final String SCESIMEDITOR_ID = ""scesimeditorid""; @Inject protected AuthoringEditorDock authoringWorkbenchDocks; @Inject protected PlaceManager placeManager; @Inject protected TestToolsPresenter testToolsPresenter; @Inject protected SettingsPresenter settingsPresenter; @Inject protected CheatSheetPresenter cheatSheetPresenter; }","<FCTX>AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void addDocks() { refreshDocks(true, false); } }</FCTX> <ECTX></ECTX>","<FCTX>AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void addDocks() { refreshDocks(true, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.Collection;|import java.util.List;|import javax.inject.Inject;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.kie.workbench.common.widgets.client.docks.AbstractWorkbenchDocksHandler;|import org.kie.workbench.common.widgets.client.docks.AuthoringEditorDock;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDockPosition;|import org.uberfire.mvp.PlaceRequest;|import org.uberfire.mvp.impl.DefaultPlaceRequest;,import java.util.Collection;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.workbench.common.widgets.client.docks.AuthoringEditorDock;|import org.mockito.Mock;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDockPosition;|import org.uberfire.mvp.PlaceRequest;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void removeDocks() { abstractScenarioSimulationDocksHandlerSpy.removeDocks(); verify(abstractScenarioSimulationDocksHandlerSpy, times(1)).refreshDocks(eq(true), eq(true)); }","AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void removeDocks() { refreshDocks(true, true); } @Override public Collection<UberfireDock> provideDocks(String); public void addDocks(); public void removeDocks(); @Override protected void refreshDocks(boolean, boolean); public void expandToolsDock(); public void expandSettingsDock(); public abstract void expandTestResultsDock(); public void resetDocks(); public void setScesimEditorId(String); public CheatSheetView.Presenter getCheatSheetPresenter(); public TestToolsView.Presenter getTestToolsPresenter(); public SettingsView.Presenter getSettingsPresenter(); protected PlaceRequest getSettingsPlaceManager(); protected PlaceRequest getTestToolsPlaceManager(); protected PlaceRequest getCurrentRightDockPlaceRequest(String); public static final String SCESIMEDITOR_ID = ""scesimeditorid""; @Inject protected AuthoringEditorDock authoringWorkbenchDocks; @Inject protected PlaceManager placeManager; @Inject protected TestToolsPresenter testToolsPresenter; @Inject protected SettingsPresenter settingsPresenter; @Inject protected CheatSheetPresenter cheatSheetPresenter; }","<FCTX>AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void removeDocks() { refreshDocks(true, true); } }</FCTX> <ECTX></ECTX>","<FCTX>AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { public void removeDocks() { refreshDocks(true, true); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.Collection;|import java.util.List;|import javax.inject.Inject;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.kie.workbench.common.widgets.client.docks.AbstractWorkbenchDocksHandler;|import org.kie.workbench.common.widgets.client.docks.AuthoringEditorDock;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDockPosition;|import org.uberfire.mvp.PlaceRequest;|import org.uberfire.mvp.impl.DefaultPlaceRequest;,import java.util.Collection;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.workbench.common.widgets.client.docks.AuthoringEditorDock;|import org.mockito.Mock;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDockPosition;|import org.uberfire.mvp.PlaceRequest;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void getCurrentRightDockPlaceRequest() { PlaceRequest placeRequest = abstractScenarioSimulationDocksHandlerSpy.getCurrentRightDockPlaceRequest(""identifier""); assertNotNull(placeRequest); assertEquals(""identifier"", placeRequest.getIdentifier()); assertNotNull(placeRequest.getParameter(SCESIMEDITOR_ID, """")); }","AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { protected PlaceRequest getCurrentRightDockPlaceRequest(String identifier) { PlaceRequest toReturn = new DefaultPlaceRequest(identifier); toReturn.addParameter(SCESIMEDITOR_ID, String.valueOf(currentScesimEditorId)); return toReturn; } @Override public Collection<UberfireDock> provideDocks(String); public void addDocks(); public void removeDocks(); @Override protected void refreshDocks(boolean, boolean); public void expandToolsDock(); public void expandSettingsDock(); public abstract void expandTestResultsDock(); public void resetDocks(); public void setScesimEditorId(String); public CheatSheetView.Presenter getCheatSheetPresenter(); public TestToolsView.Presenter getTestToolsPresenter(); public SettingsView.Presenter getSettingsPresenter(); protected PlaceRequest getSettingsPlaceManager(); protected PlaceRequest getTestToolsPlaceManager(); protected PlaceRequest getCurrentRightDockPlaceRequest(String); public static final String SCESIMEDITOR_ID = ""scesimeditorid""; @Inject protected AuthoringEditorDock authoringWorkbenchDocks; @Inject protected PlaceManager placeManager; @Inject protected TestToolsPresenter testToolsPresenter; @Inject protected SettingsPresenter settingsPresenter; @Inject protected CheatSheetPresenter cheatSheetPresenter; }","<FCTX>AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { protected PlaceRequest getCurrentRightDockPlaceRequest(String identifier) { PlaceRequest toReturn = new DefaultPlaceRequest(identifier); toReturn.addParameter(SCESIMEDITOR_ID, String.valueOf(currentScesimEditorId)); return toReturn; } private String currentScesimEditorId; }</FCTX> <ECTX></ECTX>","<FCTX>AbstractScenarioSimulationDocksHandler extends AbstractWorkbenchDocksHandler { protected PlaceRequest getCurrentRightDockPlaceRequest(String identifier) { PlaceRequest toReturn = new DefaultPlaceRequest(identifier); toReturn.addParameter(SCESIMEDITOR_ID, String.valueOf(currentScesimEditorId)); return toReturn; } <PRIVATE_FCTX>private String currentScesimEditorId;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.ArrayList;|import java.util.Collection;|import java.util.List;|import javax.inject.Inject;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsView;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsView;|import org.kie.workbench.common.widgets.client.docks.AbstractWorkbenchDocksHandler;|import org.kie.workbench.common.widgets.client.docks.AuthoringEditorDock;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDockPosition;|import org.uberfire.mvp.PlaceRequest;|import org.uberfire.mvp.impl.DefaultPlaceRequest;,import java.util.Collection;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.CheatSheetPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.SettingsPresenter;|import org.drools.workbench.screens.scenariosimulation.client.rightpanel.TestToolsPresenter;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.workbench.common.widgets.client.docks.AuthoringEditorDock;|import org.mockito.Mock;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.client.mvp.PlaceStatus;|import org.uberfire.client.workbench.docks.UberfireDock;|import org.uberfire.client.workbench.docks.UberfireDockPosition;|import org.uberfire.mvp.PlaceRequest;|import static org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationDocksHandler.SCESIMEDITOR_ID;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void checkCanCreateWhenFeatureDisabled() { when(authorizationManagerMock.authorize(any(ResourceRef.class), eq(ResourceAction.READ), eq(userMock))).thenReturn(false); assertFalse(handler.canCreate()); assertResourceRef(); }","NewScenarioSimulationHandler extends DefaultNewResourceHandler { @Override public boolean canCreate() { return authorizationManager.authorize(new ResourceRef(ScenarioSimulationEditorPresenter.IDENTIFIER, ActivityResourceType.EDITOR), ResourceAction.READ, sessionInfo.getIdentity()); } @Inject public NewScenarioSimulationHandler(ScenarioSimulationResourceType, BusyIndicatorView, Event<NotificationEvent>, Event<NewResourceSuccessEvent>, PlaceManager, Caller<ScenarioSimulationService>, AuthorizationManager, SessionInfo, ScenarioSimulationDropdown); @Override public String getDescription(); @Override public IsWidget getIcon(); @Override public ResourceTypeDefinition getResourceType(); @Override public boolean canCreate(); @Override public Command getCommand(NewResourcePresenter); @Override public void create(Package, String, NewResourcePresenter); @PostConstruct public void setupExtensions(); protected void getCommandMethod(NewResourcePresenter); protected TitledAttachmentFileWidget uploadWidget; protected SourceTypeSelector sourceTypeSelector; }","<FCTX>NewScenarioSimulationHandler extends DefaultNewResourceHandler { @Override public boolean canCreate() { return authorizationManager.authorize(new ResourceRef(ScenarioSimulationEditorPresenter.IDENTIFIER, ActivityResourceType.EDITOR), ResourceAction.READ, sessionInfo.getIdentity()); } @Inject public NewScenarioSimulationHandler(ScenarioSimulationResourceType, BusyIndicatorView, Event<NotificationEvent>, Event<NewResourceSuccessEvent>, PlaceManager, Caller<ScenarioSimulationService>, AuthorizationManager, SessionInfo, ScenarioSimulationDropdown); private final AuthorizationManager authorizationManager; private final SessionInfo sessionInfo; }</FCTX> <ECTX>@Dependent public class ScenarioSimulationEditorPresenter { public static final String IDENTIFIER = ""ScenarioSimulationEditor""; public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</ECTX>","<FCTX>NewScenarioSimulationHandler extends DefaultNewResourceHandler { @Override public boolean canCreate() { return authorizationManager.authorize(new ResourceRef(ScenarioSimulationEditorPresenter.IDENTIFIER, ActivityResourceType.EDITOR), ResourceAction.READ, sessionInfo.getIdentity()); } @Inject public NewScenarioSimulationHandler(ScenarioSimulationResourceType, BusyIndicatorView, Event<NotificationEvent>, Event<NewResourceSuccessEvent>, PlaceManager, Caller<ScenarioSimulationService>, AuthorizationManager, SessionInfo, ScenarioSimulationDropdown); <PRIVATE_FCTX>private final AuthorizationManager authorizationManager; private final SessionInfo sessionInfo;</PRIVATE_FCTX> }</FCTX> <ECTX>@Dependent public class ScenarioSimulationEditorPresenter { public static final String IDENTIFIER = ""ScenarioSimulationEditor""; public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</ECTX>",import javax.annotation.PostConstruct;|import javax.enterprise.context.ApplicationScoped;|import javax.enterprise.event.Event;|import javax.inject.Inject;|import javax.inject.Named;|import com.google.gwt.user.client.ui.Image;|import com.google.gwt.user.client.ui.IsWidget;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.dropdown.ScenarioSimulationDropdown;|import org.drools.workbench.screens.scenariosimulation.client.editor.ScenarioSimulationEditorPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.resources.ScenarioSimulationEditorResources;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.service.ScenarioSimulationService;|import org.guvnor.common.services.project.model.Package;|import org.jboss.errai.common.client.api.Caller;|import org.kie.workbench.common.widgets.client.handlers.DefaultNewResourceHandler;|import org.kie.workbench.common.widgets.client.handlers.NewResourcePresenter;|import org.kie.workbench.common.widgets.client.handlers.NewResourceSuccessEvent;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.commons.data.Pair;|import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;|import org.uberfire.mvp.Command;|import org.uberfire.rpc.SessionInfo;|import org.uberfire.security.ResourceAction;|import org.uberfire.security.ResourceRef;|import org.uberfire.security.authz.AuthorizationManager;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.ActivityResourceType;|import org.uberfire.workbench.type.ResourceTypeDefinition;,import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.editor.ScenarioSimulationEditorPresenter;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.service.ScenarioSimulationService;|import org.guvnor.common.services.project.model.Package;|import org.jboss.errai.security.shared.api.identity.User;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.workbench.common.widgets.client.handlers.NewResourcePresenter;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.Mock;|import org.mockito.Mockito;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;|import org.uberfire.mocks.CallerMock;|import org.uberfire.mocks.EventSourceMock;|import org.uberfire.rpc.SessionInfo;|import org.uberfire.security.ResourceAction;|import org.uberfire.security.ResourceRef;|import org.uberfire.security.authz.AuthorizationManager;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.ActivityResourceType;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isNull;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void checkCanCreateWhenFeatureEnabled() { when(authorizationManagerMock.authorize(any(ResourceRef.class), eq(ResourceAction.READ), eq(userMock))).thenReturn(true); assertTrue(handler.canCreate()); assertResourceRef(); }","NewScenarioSimulationHandler extends DefaultNewResourceHandler { @Override public boolean canCreate() { return authorizationManager.authorize(new ResourceRef(ScenarioSimulationEditorPresenter.IDENTIFIER, ActivityResourceType.EDITOR), ResourceAction.READ, sessionInfo.getIdentity()); } @Inject public NewScenarioSimulationHandler(ScenarioSimulationResourceType, BusyIndicatorView, Event<NotificationEvent>, Event<NewResourceSuccessEvent>, PlaceManager, Caller<ScenarioSimulationService>, AuthorizationManager, SessionInfo, ScenarioSimulationDropdown); @Override public String getDescription(); @Override public IsWidget getIcon(); @Override public ResourceTypeDefinition getResourceType(); @Override public boolean canCreate(); @Override public Command getCommand(NewResourcePresenter); @Override public void create(Package, String, NewResourcePresenter); @PostConstruct public void setupExtensions(); protected void getCommandMethod(NewResourcePresenter); protected TitledAttachmentFileWidget uploadWidget; protected SourceTypeSelector sourceTypeSelector; }","<FCTX>NewScenarioSimulationHandler extends DefaultNewResourceHandler { @Override public boolean canCreate() { return authorizationManager.authorize(new ResourceRef(ScenarioSimulationEditorPresenter.IDENTIFIER, ActivityResourceType.EDITOR), ResourceAction.READ, sessionInfo.getIdentity()); } @Inject public NewScenarioSimulationHandler(ScenarioSimulationResourceType, BusyIndicatorView, Event<NotificationEvent>, Event<NewResourceSuccessEvent>, PlaceManager, Caller<ScenarioSimulationService>, AuthorizationManager, SessionInfo, ScenarioSimulationDropdown); private final AuthorizationManager authorizationManager; private final SessionInfo sessionInfo; }</FCTX> <ECTX>@Dependent public class ScenarioSimulationEditorPresenter { public static final String IDENTIFIER = ""ScenarioSimulationEditor""; public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</ECTX>","<FCTX>NewScenarioSimulationHandler extends DefaultNewResourceHandler { @Override public boolean canCreate() { return authorizationManager.authorize(new ResourceRef(ScenarioSimulationEditorPresenter.IDENTIFIER, ActivityResourceType.EDITOR), ResourceAction.READ, sessionInfo.getIdentity()); } @Inject public NewScenarioSimulationHandler(ScenarioSimulationResourceType, BusyIndicatorView, Event<NotificationEvent>, Event<NewResourceSuccessEvent>, PlaceManager, Caller<ScenarioSimulationService>, AuthorizationManager, SessionInfo, ScenarioSimulationDropdown); <PRIVATE_FCTX>private final AuthorizationManager authorizationManager; private final SessionInfo sessionInfo;</PRIVATE_FCTX> }</FCTX> <ECTX>@Dependent public class ScenarioSimulationEditorPresenter { public static final String IDENTIFIER = ""ScenarioSimulationEditor""; public ScenarioSimulationEditorPresenter(); @Inject public ScenarioSimulationEditorPresenter(AbstractScenarioSimulationProducer, ScenarioSimulationResourceType, PlaceManager, AbstractScenarioSimulationDocksHandler, TextFileExport, ConfirmPopupPresenter); }</ECTX>",import javax.annotation.PostConstruct;|import javax.enterprise.context.ApplicationScoped;|import javax.enterprise.event.Event;|import javax.inject.Inject;|import javax.inject.Named;|import com.google.gwt.user.client.ui.Image;|import com.google.gwt.user.client.ui.IsWidget;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.dropdown.ScenarioSimulationDropdown;|import org.drools.workbench.screens.scenariosimulation.client.editor.ScenarioSimulationEditorPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.resources.ScenarioSimulationEditorResources;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.service.ScenarioSimulationService;|import org.guvnor.common.services.project.model.Package;|import org.jboss.errai.common.client.api.Caller;|import org.kie.workbench.common.widgets.client.handlers.DefaultNewResourceHandler;|import org.kie.workbench.common.widgets.client.handlers.NewResourcePresenter;|import org.kie.workbench.common.widgets.client.handlers.NewResourceSuccessEvent;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.commons.data.Pair;|import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;|import org.uberfire.mvp.Command;|import org.uberfire.rpc.SessionInfo;|import org.uberfire.security.ResourceAction;|import org.uberfire.security.ResourceRef;|import org.uberfire.security.authz.AuthorizationManager;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.ActivityResourceType;|import org.uberfire.workbench.type.ResourceTypeDefinition;,import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.editor.ScenarioSimulationEditorPresenter;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.service.ScenarioSimulationService;|import org.guvnor.common.services.project.model.Package;|import org.jboss.errai.security.shared.api.identity.User;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.workbench.common.widgets.client.handlers.NewResourcePresenter;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.Mock;|import org.mockito.Mockito;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;|import org.uberfire.mocks.CallerMock;|import org.uberfire.mocks.EventSourceMock;|import org.uberfire.rpc.SessionInfo;|import org.uberfire.security.ResourceAction;|import org.uberfire.security.ResourceRef;|import org.uberfire.security.authz.AuthorizationManager;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.ActivityResourceType;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isNull;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void checkRightResourceType() throws Exception { doReturn(true).when(sourceTypeSelectorMock).validate(); when(sourceTypeSelectorMock.getSelectedType()).thenReturn(ScenarioSimulationModel.Type.RULE); handler.create(new Package(), ""newfile.scesim"", mock(NewResourcePresenter.class)); verify(busyIndicatorViewMock).showBusyIndicator(""Saving""); verify(busyIndicatorViewMock).hideBusyIndicator(); verify(notificationEventMock).fire(any(NotificationEvent.class)); verify(newResourceSuccessEventMock).fire(any()); verify(placeManagerMock).goTo(Mockito.<Path>any()); }","NewScenarioSimulationHandler extends DefaultNewResourceHandler { @Override public void create(final Package pkg, final String baseFileName, final NewResourcePresenter presenter) { if (!sourceTypeSelector.validate()) { return; } final ScenarioSimulationModel.Type selectedType = sourceTypeSelector.getSelectedType(); String value; switch (selectedType) { case DMN: value = uploadWidget.getSelectedPath(); break; case RULE: default: value = null; } busyIndicatorView.showBusyIndicator(CommonConstants.INSTANCE.Saving()); CustomBusyPopup.showMessage(CommonConstants.INSTANCE.Saving()); scenarioSimulationService.call(getSuccessCallback(presenter), new ScenarioSimulationHasBusyIndicatorDefaultErrorCallback(busyIndicatorView)).create(pkg.getPackageTestResourcesPath(), buildFileName(baseFileName, resourceType), new ScenarioSimulationModel(), """", selectedType, value); } @Inject public NewScenarioSimulationHandler(ScenarioSimulationResourceType, BusyIndicatorView, Event<NotificationEvent>, Event<NewResourceSuccessEvent>, PlaceManager, Caller<ScenarioSimulationService>, AuthorizationManager, SessionInfo, ScenarioSimulationDropdown); @Override public String getDescription(); @Override public IsWidget getIcon(); @Override public ResourceTypeDefinition getResourceType(); @Override public boolean canCreate(); @Override public Command getCommand(NewResourcePresenter); @Override public void create(Package, String, NewResourcePresenter); @PostConstruct public void setupExtensions(); protected void getCommandMethod(NewResourcePresenter); protected TitledAttachmentFileWidget uploadWidget; protected SourceTypeSelector sourceTypeSelector; }","<FCTX>NewScenarioSimulationHandler extends DefaultNewResourceHandler { @Override public void create(final Package pkg, final String baseFileName, final NewResourcePresenter presenter) { if (!sourceTypeSelector.validate()) { return; } final ScenarioSimulationModel.Type selectedType = sourceTypeSelector.getSelectedType(); String value; switch (selectedType) { case DMN: value = uploadWidget.getSelectedPath(); break; case RULE: default: value = null; } busyIndicatorView.showBusyIndicator(CommonConstants.INSTANCE.Saving()); CustomBusyPopup.showMessage(CommonConstants.INSTANCE.Saving()); scenarioSimulationService.call(getSuccessCallback(presenter), new ScenarioSimulationHasBusyIndicatorDefaultErrorCallback(busyIndicatorView)).create(pkg.getPackageTestResourcesPath(), buildFileName(baseFileName, resourceType), new ScenarioSimulationModel(), """", selectedType, value); } @Inject public NewScenarioSimulationHandler(ScenarioSimulationResourceType, BusyIndicatorView, Event<NotificationEvent>, Event<NewResourceSuccessEvent>, PlaceManager, Caller<ScenarioSimulationService>, AuthorizationManager, SessionInfo, ScenarioSimulationDropdown); private Caller<ScenarioSimulationService> scenarioSimulationService; private ScenarioSimulationResourceType resourceType; }</FCTX> <ECTX>public class CustomBusyPopup extends DecoratedPopupPanel { public static void showMessage(String); } public class SourceTypeSelector extends VerticalPanel implements ValueChangeHandler<Boolean> { public SourceTypeSelector(TitledAttachmentFileWidget); public boolean validate(); public ScenarioSimulationModel.Type getSelectedType(); } public class TitledAttachmentFileWidget extends Composite { public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); public String getSelectedPath(); }</ECTX>","<FCTX>NewScenarioSimulationHandler extends DefaultNewResourceHandler { @Override public void create(final Package pkg, final String baseFileName, final NewResourcePresenter presenter) { if (!sourceTypeSelector.validate()) { return; } final ScenarioSimulationModel.Type selectedType = sourceTypeSelector.getSelectedType(); String value; switch (selectedType) { case DMN: value = uploadWidget.getSelectedPath(); break; case RULE: default: value = null; } busyIndicatorView.showBusyIndicator(CommonConstants.INSTANCE.Saving()); CustomBusyPopup.showMessage(CommonConstants.INSTANCE.Saving()); scenarioSimulationService.call(getSuccessCallback(presenter), new ScenarioSimulationHasBusyIndicatorDefaultErrorCallback(busyIndicatorView)).create(pkg.getPackageTestResourcesPath(), buildFileName(baseFileName, resourceType), new ScenarioSimulationModel(), """", selectedType, value); } @Inject public NewScenarioSimulationHandler(ScenarioSimulationResourceType, BusyIndicatorView, Event<NotificationEvent>, Event<NewResourceSuccessEvent>, PlaceManager, Caller<ScenarioSimulationService>, AuthorizationManager, SessionInfo, ScenarioSimulationDropdown); <PRIVATE_FCTX>private Caller<ScenarioSimulationService> scenarioSimulationService; private ScenarioSimulationResourceType resourceType;</PRIVATE_FCTX> }</FCTX> <ECTX>public class CustomBusyPopup extends DecoratedPopupPanel { public static void showMessage(String); } public class SourceTypeSelector extends VerticalPanel implements ValueChangeHandler<Boolean> { public SourceTypeSelector(TitledAttachmentFileWidget); public boolean validate(); public ScenarioSimulationModel.Type getSelectedType(); } public class TitledAttachmentFileWidget extends Composite { public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); public String getSelectedPath(); }</ECTX>",import javax.annotation.PostConstruct;|import javax.enterprise.context.ApplicationScoped;|import javax.enterprise.event.Event;|import javax.inject.Inject;|import javax.inject.Named;|import com.google.gwt.user.client.ui.Image;|import com.google.gwt.user.client.ui.IsWidget;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.dropdown.ScenarioSimulationDropdown;|import org.drools.workbench.screens.scenariosimulation.client.editor.ScenarioSimulationEditorPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.resources.ScenarioSimulationEditorResources;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.service.ScenarioSimulationService;|import org.guvnor.common.services.project.model.Package;|import org.jboss.errai.common.client.api.Caller;|import org.kie.workbench.common.widgets.client.handlers.DefaultNewResourceHandler;|import org.kie.workbench.common.widgets.client.handlers.NewResourcePresenter;|import org.kie.workbench.common.widgets.client.handlers.NewResourceSuccessEvent;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.commons.data.Pair;|import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;|import org.uberfire.mvp.Command;|import org.uberfire.rpc.SessionInfo;|import org.uberfire.security.ResourceAction;|import org.uberfire.security.ResourceRef;|import org.uberfire.security.authz.AuthorizationManager;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.ActivityResourceType;|import org.uberfire.workbench.type.ResourceTypeDefinition;,import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.editor.ScenarioSimulationEditorPresenter;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.service.ScenarioSimulationService;|import org.guvnor.common.services.project.model.Package;|import org.jboss.errai.security.shared.api.identity.User;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.workbench.common.widgets.client.handlers.NewResourcePresenter;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.Mock;|import org.mockito.Mockito;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;|import org.uberfire.mocks.CallerMock;|import org.uberfire.mocks.EventSourceMock;|import org.uberfire.rpc.SessionInfo;|import org.uberfire.security.ResourceAction;|import org.uberfire.security.ResourceRef;|import org.uberfire.security.authz.AuthorizationManager;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.ActivityResourceType;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isNull;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void getCommandMethod() { NewResourcePresenter newResourcePresenterMock = mock(NewResourcePresenter.class); handler.getCommandMethod(newResourcePresenterMock); verify(uploadWidgetMock, times(1)).clearStatus(); verify(newResourcePresenterMock, times(1)).show(any()); }","NewScenarioSimulationHandler extends DefaultNewResourceHandler { protected void getCommandMethod(NewResourcePresenter newResourcePresenter) { uploadWidget.clearStatus(); newResourcePresenter.show(NewScenarioSimulationHandler.this); } @Inject public NewScenarioSimulationHandler(ScenarioSimulationResourceType, BusyIndicatorView, Event<NotificationEvent>, Event<NewResourceSuccessEvent>, PlaceManager, Caller<ScenarioSimulationService>, AuthorizationManager, SessionInfo, ScenarioSimulationDropdown); @Override public String getDescription(); @Override public IsWidget getIcon(); @Override public ResourceTypeDefinition getResourceType(); @Override public boolean canCreate(); @Override public Command getCommand(NewResourcePresenter); @Override public void create(Package, String, NewResourcePresenter); @PostConstruct public void setupExtensions(); protected void getCommandMethod(NewResourcePresenter); protected TitledAttachmentFileWidget uploadWidget; protected SourceTypeSelector sourceTypeSelector; }","<FCTX>NewScenarioSimulationHandler extends DefaultNewResourceHandler { protected void getCommandMethod(NewResourcePresenter newResourcePresenter) { uploadWidget.clearStatus(); newResourcePresenter.show(NewScenarioSimulationHandler.this); } @Inject public NewScenarioSimulationHandler(ScenarioSimulationResourceType, BusyIndicatorView, Event<NotificationEvent>, Event<NewResourceSuccessEvent>, PlaceManager, Caller<ScenarioSimulationService>, AuthorizationManager, SessionInfo, ScenarioSimulationDropdown); }</FCTX> <ECTX>public class TitledAttachmentFileWidget extends Composite { public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); public void clearStatus(); }</ECTX>","<FCTX>NewScenarioSimulationHandler extends DefaultNewResourceHandler { protected void getCommandMethod(NewResourcePresenter newResourcePresenter) { uploadWidget.clearStatus(); newResourcePresenter.show(NewScenarioSimulationHandler.this); } @Inject public NewScenarioSimulationHandler(ScenarioSimulationResourceType, BusyIndicatorView, Event<NotificationEvent>, Event<NewResourceSuccessEvent>, PlaceManager, Caller<ScenarioSimulationService>, AuthorizationManager, SessionInfo, ScenarioSimulationDropdown); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class TitledAttachmentFileWidget extends Composite { public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); public void clearStatus(); }</ECTX>",import javax.annotation.PostConstruct;|import javax.enterprise.context.ApplicationScoped;|import javax.enterprise.event.Event;|import javax.inject.Inject;|import javax.inject.Named;|import com.google.gwt.user.client.ui.Image;|import com.google.gwt.user.client.ui.IsWidget;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.dropdown.ScenarioSimulationDropdown;|import org.drools.workbench.screens.scenariosimulation.client.editor.ScenarioSimulationEditorPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.drools.workbench.screens.scenariosimulation.client.resources.ScenarioSimulationEditorResources;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.service.ScenarioSimulationService;|import org.guvnor.common.services.project.model.Package;|import org.jboss.errai.common.client.api.Caller;|import org.kie.workbench.common.widgets.client.handlers.DefaultNewResourceHandler;|import org.kie.workbench.common.widgets.client.handlers.NewResourcePresenter;|import org.kie.workbench.common.widgets.client.handlers.NewResourceSuccessEvent;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.commons.data.Pair;|import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;|import org.uberfire.mvp.Command;|import org.uberfire.rpc.SessionInfo;|import org.uberfire.security.ResourceAction;|import org.uberfire.security.ResourceRef;|import org.uberfire.security.authz.AuthorizationManager;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.ActivityResourceType;|import org.uberfire.workbench.type.ResourceTypeDefinition;,import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.editor.ScenarioSimulationEditorPresenter;|import org.drools.workbench.screens.scenariosimulation.client.type.ScenarioSimulationResourceType;|import org.drools.workbench.screens.scenariosimulation.service.ScenarioSimulationService;|import org.guvnor.common.services.project.model.Package;|import org.jboss.errai.security.shared.api.identity.User;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.kie.workbench.common.widgets.client.handlers.NewResourcePresenter;|import org.kie.workbench.common.widgets.client.resources.i18n.CommonConstants;|import org.mockito.ArgumentCaptor;|import org.mockito.Captor;|import org.mockito.Mock;|import org.mockito.Mockito;|import org.uberfire.backend.vfs.Path;|import org.uberfire.client.mvp.PlaceManager;|import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;|import org.uberfire.mocks.CallerMock;|import org.uberfire.mocks.EventSourceMock;|import org.uberfire.rpc.SessionInfo;|import org.uberfire.security.ResourceAction;|import org.uberfire.security.ResourceRef;|import org.uberfire.security.authz.AuthorizationManager;|import org.uberfire.workbench.events.NotificationEvent;|import org.uberfire.workbench.model.ActivityResourceType;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isNull;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
@Test public void isExecutable_NoSelection() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Collections.emptyList()); assertFalse(handler.isExecutable(scenarioGridMock)); },"ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); @Override public boolean isExecutable(GridWidget); @Override public boolean perform(GridWidget, boolean, boolean); protected Point2D getMiddleXYCell(GridWidget, GridColumn, boolean, int, GridLayer); }","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import com.ait.lienzo.client.core.types.Point2D;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.util.ColumnIndexUtilities;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.grid.impl.KeyboardOperationInvokeContextMenuForSelectedCell;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.models.ScenarioGridModel;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyBoolean;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void checkUnmarshallingEmptyString() { final GuidedDecisionTableEditorGraphModel model = GuidedDTGraphXMLPersistence.getInstance().unmarshal( """" ); assertEmptyModel( model ); }",GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); public static GuidedDTGraphXMLPersistence getInstance(); public String marshal(GuidedDecisionTableEditorGraphModel); public GuidedDecisionTableEditorGraphModel unmarshal(String); },<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); }</FCTX> <ECTX></ECTX>,<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } <PRIVATE_FCTX>private GuidedDTGraphXMLPersistence();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import com.thoughtworks.xstream.XStream;|import com.thoughtworks.xstream.io.xml.DomDriver;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.kie.soup.xstream.XStreamUtils;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;,import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.junit.Test;|import org.uberfire.backend.vfs.Path;|import org.uberfire.backend.vfs.PathFactory;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;
"@Test public void testSingleParameter_RHSFieldValue() { final String result = utilities.convertSingleParameterToTemplateKey( ""setField( $param )"", ParameterizedValueBuilder.Part.RHS ); assertEquals( ""setField( @{param1} )"", result ); }","ParameterUtilities { public String convertSingleParameterToTemplateKey( final String xlsTemplate, final ParameterizedValueBuilder.Part part ) { final StringBuffer result = new StringBuffer(); final Matcher matcherSingleParameter = patternSingleParameter.matcher( xlsTemplate ); while ( matcherSingleParameter.find() ) { matcherSingleParameter.appendReplacement( result, ""@{"" + PARAMETER_PREFIX + parameterCounter + ""}"" ); } parameterCounter++; matcherSingleParameter.appendTail( result ); return assertTemplateKeyConversion( result, part ); } public String convertIndexedParametersToTemplateKeys(String, ParameterizedValueBuilder.Part); public String convertSingleParameterToTemplateKey(String, ParameterizedValueBuilder.Part); public Set<String> extractTemplateKeys(String); }","<FCTX>ParameterUtilities { public String convertSingleParameterToTemplateKey( final String xlsTemplate, final ParameterizedValueBuilder.Part part ) { final StringBuffer result = new StringBuffer(); final Matcher matcherSingleParameter = patternSingleParameter.matcher( xlsTemplate ); while ( matcherSingleParameter.find() ) { matcherSingleParameter.appendReplacement( result, ""@{"" + PARAMETER_PREFIX + parameterCounter + ""}"" ); } parameterCounter++; matcherSingleParameter.appendTail( result ); return assertTemplateKeyConversion( result, part ); } private String assertTemplateKeyConversion(StringBuffer, ParameterizedValueBuilder.Part); private static final Pattern patternSingleParameter = Pattern.compile( ""\\$param"" ); private static final String PARAMETER_PREFIX = ""param""; private int parameterCounter = 1; }</FCTX> <ECTX></ECTX>","<FCTX>ParameterUtilities { public String convertSingleParameterToTemplateKey( final String xlsTemplate, final ParameterizedValueBuilder.Part part ) { final StringBuffer result = new StringBuffer(); final Matcher matcherSingleParameter = patternSingleParameter.matcher( xlsTemplate ); while ( matcherSingleParameter.find() ) { matcherSingleParameter.appendReplacement( result, ""@{"" + PARAMETER_PREFIX + parameterCounter + ""}"" ); } parameterCounter++; matcherSingleParameter.appendTail( result ); return assertTemplateKeyConversion( result, part ); } <PRIVATE_FCTX>private String assertTemplateKeyConversion(StringBuffer, ParameterizedValueBuilder.Part); private static final Pattern patternSingleParameter = Pattern.compile( ""\\$param"" ); private static final String PARAMETER_PREFIX = ""param""; private int parameterCounter = 1;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.LinkedHashSet;|import java.util.Set;|import java.util.regex.Matcher;|import java.util.regex.Pattern;|import org.drools.compiler.compiler.DrlExprParser;|import org.drools.compiler.compiler.DrlParser;|import org.drools.compiler.lang.descr.AtomicExprDescr;|import org.drools.compiler.lang.descr.BaseDescr;|import org.drools.compiler.lang.descr.ConstraintConnectiveDescr;|import org.drools.compiler.lang.descr.RelationalExprDescr;|import org.drools.workbench.models.commons.backend.rule.RuleModelDRLPersistenceImpl;,import org.junit.Test;|import static org.junit.Assert.assertEquals;
@Test public void isExecutable_CellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Arrays.asList(selectedCell)); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Collections.emptyList()); assertTrue(handler.isExecutable(scenarioGridMock)); },"ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); @Override public boolean isExecutable(GridWidget); @Override public boolean perform(GridWidget, boolean, boolean); protected Point2D getMiddleXYCell(GridWidget, GridColumn, boolean, int, GridLayer); }","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import com.ait.lienzo.client.core.types.Point2D;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.util.ColumnIndexUtilities;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.grid.impl.KeyboardOperationInvokeContextMenuForSelectedCell;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.models.ScenarioGridModel;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyBoolean;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void isExecutable_CellsSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Arrays.asList(selectedCell, selectedCell2)); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Collections.emptyList()); assertFalse(handler.isExecutable(scenarioGridMock)); }","ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); @Override public boolean isExecutable(GridWidget); @Override public boolean perform(GridWidget, boolean, boolean); protected Point2D getMiddleXYCell(GridWidget, GridColumn, boolean, int, GridLayer); }","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import com.ait.lienzo.client.core.types.Point2D;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.util.ColumnIndexUtilities;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.grid.impl.KeyboardOperationInvokeContextMenuForSelectedCell;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.models.ScenarioGridModel;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyBoolean;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
@Test public void isExecutable_HeaderCellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell)); assertTrue(handler.isExecutable(scenarioGridMock)); },"ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); @Override public boolean isExecutable(GridWidget); @Override public boolean perform(GridWidget, boolean, boolean); protected Point2D getMiddleXYCell(GridWidget, GridColumn, boolean, int, GridLayer); }","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import com.ait.lienzo.client.core.types.Point2D;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.util.ColumnIndexUtilities;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.grid.impl.KeyboardOperationInvokeContextMenuForSelectedCell;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.models.ScenarioGridModel;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyBoolean;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void isExecutable_HeaderCellsSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell, selectedCell2)); assertTrue(handler.isExecutable(scenarioGridMock)); }","ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); @Override public boolean isExecutable(GridWidget); @Override public boolean perform(GridWidget, boolean, boolean); protected Point2D getMiddleXYCell(GridWidget, GridColumn, boolean, int, GridLayer); }","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import com.ait.lienzo.client.core.types.Point2D;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.util.ColumnIndexUtilities;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.grid.impl.KeyboardOperationInvokeContextMenuForSelectedCell;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.models.ScenarioGridModel;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyBoolean;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
@Test public void isExecutable_CellsAndHeaderCellsSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Arrays.asList(selectedCell)); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell2)); assertFalse(handler.isExecutable(scenarioGridMock)); },"ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); @Override public boolean isExecutable(GridWidget); @Override public boolean perform(GridWidget, boolean, boolean); protected Point2D getMiddleXYCell(GridWidget, GridColumn, boolean, int, GridLayer); }","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean isExecutable(final GridWidget gridWidget) { final GridData model = gridWidget.getModel(); return ((!model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().isEmpty()) || (model.getSelectedHeaderCells().isEmpty() && model.getSelectedCells().size() == 1)); } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import com.ait.lienzo.client.core.types.Point2D;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.util.ColumnIndexUtilities;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.grid.impl.KeyboardOperationInvokeContextMenuForSelectedCell;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.models.ScenarioGridModel;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyBoolean;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void perform_NoSelection() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Collections.emptyList()); assertFalse(handler.perform(scenarioGridMock, false, false)); verify(scenarioContextMenuRegistry, never()).manageRightClick(any(), anyInt(), anyInt(), anyInt(), anyInt(), anyBoolean()); }","ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); @Override public boolean isExecutable(GridWidget); @Override public boolean perform(GridWidget, boolean, boolean); protected Point2D getMiddleXYCell(GridWidget, GridColumn, boolean, int, GridLayer); }","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); private ScenarioContextMenuRegistry scenarioContextMenuRegistry; }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); }</ECTX>","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); <PRIVATE_FCTX>private ScenarioContextMenuRegistry scenarioContextMenuRegistry;</PRIVATE_FCTX> }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); }</ECTX>",import com.ait.lienzo.client.core.types.Point2D;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.util.ColumnIndexUtilities;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.grid.impl.KeyboardOperationInvokeContextMenuForSelectedCell;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.models.ScenarioGridModel;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyBoolean;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void perform_CellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Arrays.asList(selectedCell)); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedCellsOrigin()).thenReturn(selectedCell); handler.perform(scenarioGridMock, false, false); verify(scenarioContextMenuRegistry, times(1)).manageRightClick(eq(scenarioGridMock), eq(0), eq(0), anyInt(), anyInt(), eq(false)); }","ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); @Override public boolean isExecutable(GridWidget); @Override public boolean perform(GridWidget, boolean, boolean); protected Point2D getMiddleXYCell(GridWidget, GridColumn, boolean, int, GridLayer); }","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); private ScenarioContextMenuRegistry scenarioContextMenuRegistry; }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); }</ECTX>","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); <PRIVATE_FCTX>private ScenarioContextMenuRegistry scenarioContextMenuRegistry;</PRIVATE_FCTX> }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); }</ECTX>",import com.ait.lienzo.client.core.types.Point2D;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.util.ColumnIndexUtilities;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.grid.impl.KeyboardOperationInvokeContextMenuForSelectedCell;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.models.ScenarioGridModel;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyBoolean;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void perform_CellsSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Arrays.asList(selectedCell, selectedCell2)); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedCellsOrigin()).thenReturn(selectedCell); assertFalse(handler.perform(scenarioGridMock, false, false)); verify(scenarioContextMenuRegistry, never()).manageRightClick(any(), anyInt(), anyInt(), anyInt(), anyInt(), anyBoolean()); }","ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); @Override public boolean isExecutable(GridWidget); @Override public boolean perform(GridWidget, boolean, boolean); protected Point2D getMiddleXYCell(GridWidget, GridColumn, boolean, int, GridLayer); }","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); private ScenarioContextMenuRegistry scenarioContextMenuRegistry; }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); }</ECTX>","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); <PRIVATE_FCTX>private ScenarioContextMenuRegistry scenarioContextMenuRegistry;</PRIVATE_FCTX> }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); }</ECTX>",import com.ait.lienzo.client.core.types.Point2D;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.util.ColumnIndexUtilities;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.grid.impl.KeyboardOperationInvokeContextMenuForSelectedCell;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.models.ScenarioGridModel;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyBoolean;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void perform_HeaderCellSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell)); handler.perform(scenarioGridMock, false, false); verify(scenarioContextMenuRegistry, times(1)).manageRightClick(eq(scenarioGridMock), eq(0), eq(0), anyInt(), anyInt(), eq(true)); }","ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); @Override public boolean isExecutable(GridWidget); @Override public boolean perform(GridWidget, boolean, boolean); protected Point2D getMiddleXYCell(GridWidget, GridColumn, boolean, int, GridLayer); }","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); private ScenarioContextMenuRegistry scenarioContextMenuRegistry; }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); }</ECTX>","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); <PRIVATE_FCTX>private ScenarioContextMenuRegistry scenarioContextMenuRegistry;</PRIVATE_FCTX> }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); }</ECTX>",import com.ait.lienzo.client.core.types.Point2D;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.util.ColumnIndexUtilities;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.grid.impl.KeyboardOperationInvokeContextMenuForSelectedCell;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.models.ScenarioGridModel;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyBoolean;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void perform_HeaderCellsSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Collections.emptyList()); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell, selectedCell2)); handler.perform(scenarioGridMock, false, false); verify(scenarioContextMenuRegistry, times(1)).manageRightClick(eq(scenarioGridMock), eq(0), eq(0), anyInt(), anyInt(), eq(true)); }","ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); @Override public boolean isExecutable(GridWidget); @Override public boolean perform(GridWidget, boolean, boolean); protected Point2D getMiddleXYCell(GridWidget, GridColumn, boolean, int, GridLayer); }","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); private ScenarioContextMenuRegistry scenarioContextMenuRegistry; }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); }</ECTX>","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); <PRIVATE_FCTX>private ScenarioContextMenuRegistry scenarioContextMenuRegistry;</PRIVATE_FCTX> }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); }</ECTX>",import com.ait.lienzo.client.core.types.Point2D;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.util.ColumnIndexUtilities;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.grid.impl.KeyboardOperationInvokeContextMenuForSelectedCell;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.models.ScenarioGridModel;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyBoolean;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void checkUnmarshallingCorruptString() { final GuidedDecisionTableEditorGraphModel model = GuidedDTGraphXMLPersistence.getInstance().unmarshal( ""cheese"" ); assertEmptyModel( model ); }",GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); public static GuidedDTGraphXMLPersistence getInstance(); public String marshal(GuidedDecisionTableEditorGraphModel); public GuidedDecisionTableEditorGraphModel unmarshal(String); },<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); }</FCTX> <ECTX></ECTX>,<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } <PRIVATE_FCTX>private GuidedDTGraphXMLPersistence();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import com.thoughtworks.xstream.XStream;|import com.thoughtworks.xstream.io.xml.DomDriver;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.kie.soup.xstream.XStreamUtils;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;,import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.junit.Test;|import org.uberfire.backend.vfs.Path;|import org.uberfire.backend.vfs.PathFactory;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;
"@Test public void perform_CellAndHeaderCellsSelected() { when(scenarioGridModelMock.getSelectedCells()).thenReturn(Arrays.asList(selectedCell)); when(scenarioGridModelMock.getSelectedHeaderCells()).thenReturn(Arrays.asList(selectedCell2)); assertFalse(handler.perform(scenarioGridMock, false, false)); verify(scenarioContextMenuRegistry, never()).manageRightClick(any(), anyInt(), anyInt(), anyInt(), anyInt(), anyBoolean()); }","ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); @Override public boolean isExecutable(GridWidget); @Override public boolean perform(GridWidget, boolean, boolean); protected Point2D getMiddleXYCell(GridWidget, GridColumn, boolean, int, GridLayer); }","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); private ScenarioContextMenuRegistry scenarioContextMenuRegistry; }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); }</ECTX>","<FCTX>ScenarioInvokeContextMenuForSelectedCell extends KeyboardOperationInvokeContextMenuForSelectedCell { @Override public boolean perform(final GridWidget gridWidget, final boolean isShiftKeyDown, final boolean isControlKeyDown) { final GridData model = gridWidget.getModel(); if (!model.getSelectedHeaderCells().isEmpty() && !model.getSelectedCells().isEmpty()) { return false; } GridData.SelectedCell origin = null; boolean isHeader = false; if (!model.getSelectedHeaderCells().isEmpty()) { origin = model.getSelectedHeaderCells().get(0); isHeader = true; } else if (model.getSelectedCells().size() == 1) { origin = model.getSelectedCellsOrigin(); } if (origin == null) { return false; } final int uiRowIndex = origin.getRowIndex(); final int uiColumnIndex = ColumnIndexUtilities.findUiColumnIndex(model.getColumns(), origin.getColumnIndex()); final GridColumn<?> column = model.getColumns().get(uiColumnIndex); if (column instanceof ScenarioGridColumn) { final Point2D middleXYCell = this.getMiddleXYCell(gridWidget, column, isHeader, uiRowIndex, gridLayer); return scenarioContextMenuRegistry.manageRightClick((ScenarioGrid) gridWidget, (int) middleXYCell.getX(), (int) middleXYCell.getY(), uiRowIndex, uiColumnIndex, isHeader); } return false; } public ScenarioInvokeContextMenuForSelectedCell(GridLayer, ScenarioContextMenuRegistry); <PRIVATE_FCTX>private ScenarioContextMenuRegistry scenarioContextMenuRegistry;</PRIVATE_FCTX> }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); }</ECTX>",import com.ait.lienzo.client.core.types.Point2D;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.util.ColumnIndexUtilities;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.grid.impl.KeyboardOperationInvokeContextMenuForSelectedCell;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.models.ScenarioGridModel;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridData;|import org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyBoolean;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void error() { Message messageMock = mock(Message.class); Throwable throwableMock = mock(Throwable.class); scenarioSimulationHasBusyIndicatorDefaultErrorCallback.error(messageMock, throwableMock); verify(scenarioSimulationHasBusyIndicatorDefaultErrorCallback, times(1)).errorLocal(eq(messageMock), eq(throwableMock)); }","ScenarioSimulationHasBusyIndicatorDefaultErrorCallback extends HasBusyIndicatorDefaultErrorCallback { @Override public boolean error(final Message message, final Throwable throwable) { CustomBusyPopup.close(); return errorLocal(message, throwable); } public ScenarioSimulationHasBusyIndicatorDefaultErrorCallback(HasBusyIndicator); @Override public boolean error(Message, Throwable); public void hideBusyIndicator(); protected boolean errorLocal(Message, Throwable); }","<FCTX>ScenarioSimulationHasBusyIndicatorDefaultErrorCallback extends HasBusyIndicatorDefaultErrorCallback { @Override public boolean error(final Message message, final Throwable throwable) { CustomBusyPopup.close(); return errorLocal(message, throwable); } public ScenarioSimulationHasBusyIndicatorDefaultErrorCallback(HasBusyIndicator); }</FCTX> <ECTX>public class CustomBusyPopup extends DecoratedPopupPanel { public static void close(); }</ECTX>","<FCTX>ScenarioSimulationHasBusyIndicatorDefaultErrorCallback extends HasBusyIndicatorDefaultErrorCallback { @Override public boolean error(final Message message, final Throwable throwable) { CustomBusyPopup.close(); return errorLocal(message, throwable); } public ScenarioSimulationHasBusyIndicatorDefaultErrorCallback(HasBusyIndicator); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class CustomBusyPopup extends DecoratedPopupPanel { public static void close(); }</ECTX>",import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.jboss.errai.bus.client.api.messaging.Message;|import org.uberfire.ext.widgets.common.client.callbacks.HasBusyIndicatorDefaultErrorCallback;|import org.uberfire.ext.widgets.common.client.common.HasBusyIndicator;,import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.jboss.errai.bus.client.api.messaging.Message;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void hideBusyIndicator() { scenarioSimulationHasBusyIndicatorDefaultErrorCallback.hideBusyIndicator(); verify(scenarioSimulationViewMock, times(1)).hideBusyIndicator(); }","ScenarioSimulationHasBusyIndicatorDefaultErrorCallback extends HasBusyIndicatorDefaultErrorCallback { public void hideBusyIndicator() { CustomBusyPopup.close(); super.hideBusyIndicator(); } public ScenarioSimulationHasBusyIndicatorDefaultErrorCallback(HasBusyIndicator); @Override public boolean error(Message, Throwable); public void hideBusyIndicator(); protected boolean errorLocal(Message, Throwable); }",<FCTX>ScenarioSimulationHasBusyIndicatorDefaultErrorCallback extends HasBusyIndicatorDefaultErrorCallback { public void hideBusyIndicator() { CustomBusyPopup.close(); super.hideBusyIndicator(); } public ScenarioSimulationHasBusyIndicatorDefaultErrorCallback(HasBusyIndicator); }</FCTX> <ECTX>public class CustomBusyPopup extends DecoratedPopupPanel { public static void close(); }</ECTX>,<FCTX>ScenarioSimulationHasBusyIndicatorDefaultErrorCallback extends HasBusyIndicatorDefaultErrorCallback { public void hideBusyIndicator() { CustomBusyPopup.close(); super.hideBusyIndicator(); } public ScenarioSimulationHasBusyIndicatorDefaultErrorCallback(HasBusyIndicator); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class CustomBusyPopup extends DecoratedPopupPanel { public static void close(); }</ECTX>,import org.drools.workbench.screens.scenariosimulation.client.popup.CustomBusyPopup;|import org.jboss.errai.bus.client.api.messaging.Message;|import org.uberfire.ext.widgets.common.client.callbacks.HasBusyIndicatorDefaultErrorCallback;|import org.uberfire.ext.widgets.common.client.common.HasBusyIndicator;,import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.editor.AbstractScenarioSimulationEditorTest;|import org.jboss.errai.bus.client.api.messaging.Message;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void setEventBus() { scenarioSimulationMainGridPanelClickHandler.setEventBus(eventBusMock); assertSame(scenarioSimulationMainGridPanelClickHandler.eventBus, eventBusMock); }","ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override public void setEventBus(EventBus eventBus) { this.eventBus = eventBus; } public void setScenarioContextMenuRegistry(ScenarioContextMenuRegistry); @Override public void setEventBus(EventBus); @Override public void onClick(ClickEvent); @Override @SuppressWarnings(""unchecked"") public void onContextMenu(ContextMenuEvent); @Override public void hideMenus(); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected ScenarioContextMenuRegistry scenarioContextMenuRegistry; protected EventBus eventBus; protected AtomicInteger clickReceived = new AtomicInteger(0); }",<FCTX>ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override public void setEventBus(EventBus eventBus) { this.eventBus = eventBus; } }</FCTX> <ECTX></ECTX>,<FCTX>ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override public void setEventBus(EventBus eventBus) { this.eventBus = eventBus; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import java.util.concurrent.atomic.AtomicInteger;|import javax.enterprise.context.Dependent;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.shared.EventBus;|import org.drools.workbench.screens.scenariosimulation.client.events.DisableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.EnableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridCell;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationGridHeaderUtilities.getEnableTestToolsEvent;|import static org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities.getRelativeXOfEvent;|import static org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities.getRelativeYOfEvent;,import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.event.shared.EventBus;|import com.google.gwt.event.shared.GwtEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.DisableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.EnableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLICK_POINT_X;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLICK_POINT_Y;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.HEADER_HEIGHT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.UI_COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.UI_ROW_INDEX;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyDouble;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onContextMenu() { doReturn(true).when(scenarioContextMenuRegistryMock).manageRightClick(scenarioGridMock, contextMenuEventMock); scenarioSimulationMainGridPanelClickHandler.onContextMenu(contextMenuEventMock); verify(contextMenuEventMock, times(1)).preventDefault(); verify(contextMenuEventMock, times(1)).stopPropagation(); verify(scenarioContextMenuRegistryMock, times(1)).hideMenus(); }","ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override @SuppressWarnings(""unchecked"") public void onContextMenu(final ContextMenuEvent event) { scenarioContextMenuRegistry.hideMenus(); if (scenarioContextMenuRegistry.manageRightClick(scenarioGrid, event)) { scenarioContextMenuRegistry.hideErrorReportPopover(); event.preventDefault(); event.stopPropagation(); } } public void setScenarioContextMenuRegistry(ScenarioContextMenuRegistry); @Override public void setEventBus(EventBus); @Override public void onClick(ClickEvent); @Override @SuppressWarnings(""unchecked"") public void onContextMenu(ContextMenuEvent); @Override public void hideMenus(); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected ScenarioContextMenuRegistry scenarioContextMenuRegistry; protected EventBus eventBus; protected AtomicInteger clickReceived = new AtomicInteger(0); }","<FCTX>ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override @SuppressWarnings(""unchecked"") public void onContextMenu(final ContextMenuEvent event) { scenarioContextMenuRegistry.hideMenus(); if (scenarioContextMenuRegistry.manageRightClick(scenarioGrid, event)) { scenarioContextMenuRegistry.hideErrorReportPopover(); event.preventDefault(); event.stopPropagation(); } } }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public void hideMenus(); public boolean manageRightClick(ScenarioGrid, ContextMenuEvent); public void hideErrorReportPopover(); }</ECTX>","<FCTX>ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override @SuppressWarnings(""unchecked"") public void onContextMenu(final ContextMenuEvent event) { scenarioContextMenuRegistry.hideMenus(); if (scenarioContextMenuRegistry.manageRightClick(scenarioGrid, event)) { scenarioContextMenuRegistry.hideErrorReportPopover(); event.preventDefault(); event.stopPropagation(); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public void hideMenus(); public boolean manageRightClick(ScenarioGrid, ContextMenuEvent); public void hideErrorReportPopover(); }</ECTX>",import java.util.concurrent.atomic.AtomicInteger;|import javax.enterprise.context.Dependent;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.shared.EventBus;|import org.drools.workbench.screens.scenariosimulation.client.events.DisableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.EnableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridCell;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationGridHeaderUtilities.getEnableTestToolsEvent;|import static org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities.getRelativeXOfEvent;|import static org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities.getRelativeYOfEvent;,import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.event.shared.EventBus;|import com.google.gwt.event.shared.GwtEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.DisableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.EnableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLICK_POINT_X;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLICK_POINT_Y;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.HEADER_HEIGHT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.UI_COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.UI_ROW_INDEX;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyDouble;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void hideMenus() { scenarioSimulationMainGridPanelClickHandler.hideMenus(); verify(scenarioContextMenuRegistryMock, times(1)).hideMenus(); }","ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override public void hideMenus() { scenarioContextMenuRegistry.hideMenus(); } public void setScenarioContextMenuRegistry(ScenarioContextMenuRegistry); @Override public void setEventBus(EventBus); @Override public void onClick(ClickEvent); @Override @SuppressWarnings(""unchecked"") public void onContextMenu(ContextMenuEvent); @Override public void hideMenus(); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected ScenarioContextMenuRegistry scenarioContextMenuRegistry; protected EventBus eventBus; protected AtomicInteger clickReceived = new AtomicInteger(0); }","<FCTX>ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override public void hideMenus() { scenarioContextMenuRegistry.hideMenus(); } }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public void hideMenus(); }</ECTX>","<FCTX>ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override public void hideMenus() { scenarioContextMenuRegistry.hideMenus(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@Dependent public class ScenarioContextMenuRegistry { @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public void hideMenus(); }</ECTX>",import java.util.concurrent.atomic.AtomicInteger;|import javax.enterprise.context.Dependent;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.shared.EventBus;|import org.drools.workbench.screens.scenariosimulation.client.events.DisableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.EnableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridCell;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationGridHeaderUtilities.getEnableTestToolsEvent;|import static org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities.getRelativeXOfEvent;|import static org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities.getRelativeYOfEvent;,import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.event.shared.EventBus;|import com.google.gwt.event.shared.GwtEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.DisableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.EnableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLICK_POINT_X;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLICK_POINT_Y;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.HEADER_HEIGHT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.UI_COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.UI_ROW_INDEX;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyDouble;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void manageBodyCoordinates_NullCell() { scenarioSimulationMainGridPanelClickHandler.manageBodyCoordinates(ROW_INDEX, COLUMN_INDEX); verify(scenarioGridMock.getModel(), times(1)).getCell(eq(ROW_INDEX), eq(COLUMN_INDEX)); verify(scenarioGridMock.getModel(), never()).selectCell(anyInt(), anyInt()); verify(eventBusMock, times(0)).fireEvent(isA(GwtEvent.class)); }","ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { final GridCell<?> cell = scenarioGrid.getModel().getCell(uiRowIndex, uiColumnIndex); if (cell == null) { return false; } else { scenarioGrid.getModel().selectCell(uiRowIndex, uiColumnIndex); eventBus.fireEvent(new DisableTestToolsEvent()); return true; } } public void setScenarioContextMenuRegistry(ScenarioContextMenuRegistry); @Override public void setEventBus(EventBus); @Override public void onClick(ClickEvent); @Override @SuppressWarnings(""unchecked"") public void onContextMenu(ContextMenuEvent); @Override public void hideMenus(); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected ScenarioContextMenuRegistry scenarioContextMenuRegistry; protected EventBus eventBus; protected AtomicInteger clickReceived = new AtomicInteger(0); }","<FCTX>ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { final GridCell<?> cell = scenarioGrid.getModel().getCell(uiRowIndex, uiColumnIndex); if (cell == null) { return false; } else { scenarioGrid.getModel().selectCell(uiRowIndex, uiColumnIndex); eventBus.fireEvent(new DisableTestToolsEvent()); return true; } } }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { final GridCell<?> cell = scenarioGrid.getModel().getCell(uiRowIndex, uiColumnIndex); if (cell == null) { return false; } else { scenarioGrid.getModel().selectCell(uiRowIndex, uiColumnIndex); eventBus.fireEvent(new DisableTestToolsEvent()); return true; } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.concurrent.atomic.AtomicInteger;|import javax.enterprise.context.Dependent;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.shared.EventBus;|import org.drools.workbench.screens.scenariosimulation.client.events.DisableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.EnableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridCell;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationGridHeaderUtilities.getEnableTestToolsEvent;|import static org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities.getRelativeXOfEvent;|import static org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities.getRelativeYOfEvent;,import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.event.shared.EventBus;|import com.google.gwt.event.shared.GwtEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.DisableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.EnableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLICK_POINT_X;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLICK_POINT_Y;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.HEADER_HEIGHT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.UI_COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.UI_ROW_INDEX;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyDouble;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void manageBodyCoordinates_WithCell() { doReturn(scenarioGridCellMock).when(scenarioGridModelMock).getCell(ROW_INDEX, COLUMN_INDEX); scenarioSimulationMainGridPanelClickHandler.manageBodyCoordinates(ROW_INDEX, COLUMN_INDEX); verify(scenarioGridMock.getModel(), times(1)).getCell(eq(ROW_INDEX), eq(COLUMN_INDEX)); verify(scenarioGridMock.getModel(), times(1)).selectCell(ROW_INDEX, COLUMN_INDEX); verify(eventBusMock, times(1)).fireEvent(isA(DisableTestToolsEvent.class)); }","ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { final GridCell<?> cell = scenarioGrid.getModel().getCell(uiRowIndex, uiColumnIndex); if (cell == null) { return false; } else { scenarioGrid.getModel().selectCell(uiRowIndex, uiColumnIndex); eventBus.fireEvent(new DisableTestToolsEvent()); return true; } } public void setScenarioContextMenuRegistry(ScenarioContextMenuRegistry); @Override public void setEventBus(EventBus); @Override public void onClick(ClickEvent); @Override @SuppressWarnings(""unchecked"") public void onContextMenu(ContextMenuEvent); @Override public void hideMenus(); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected ScenarioContextMenuRegistry scenarioContextMenuRegistry; protected EventBus eventBus; protected AtomicInteger clickReceived = new AtomicInteger(0); }","<FCTX>ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { final GridCell<?> cell = scenarioGrid.getModel().getCell(uiRowIndex, uiColumnIndex); if (cell == null) { return false; } else { scenarioGrid.getModel().selectCell(uiRowIndex, uiColumnIndex); eventBus.fireEvent(new DisableTestToolsEvent()); return true; } } }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationMainGridPanelClickHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelClickHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { final GridCell<?> cell = scenarioGrid.getModel().getCell(uiRowIndex, uiColumnIndex); if (cell == null) { return false; } else { scenarioGrid.getModel().selectCell(uiRowIndex, uiColumnIndex); eventBus.fireEvent(new DisableTestToolsEvent()); return true; } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.concurrent.atomic.AtomicInteger;|import javax.enterprise.context.Dependent;|import com.google.gwt.event.dom.client.ClickEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.shared.EventBus;|import org.drools.workbench.screens.scenariosimulation.client.events.DisableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.EnableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridCell;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationGridHeaderUtilities.getEnableTestToolsEvent;|import static org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities.getRelativeXOfEvent;|import static org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities.getRelativeYOfEvent;,import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.event.shared.EventBus;|import com.google.gwt.event.shared.GwtEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.DisableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.EnableTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.menu.ScenarioContextMenuRegistry;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLICK_POINT_X;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLICK_POINT_Y;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.HEADER_HEIGHT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.UI_COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.UI_ROW_INDEX;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.any;|import static org.mockito.Matchers.anyDouble;|import static org.mockito.Matchers.anyInt;|import static org.mockito.Matchers.eq;|import static org.mockito.Matchers.isA;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onNodeMouseMove() { mouseMoveHandler.onNodeMouseMove(mouseMoveEvent); verify(mouseMoveHandler, times(1)).manageCoordinates(eq(MX), eq(MY)); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override public void onNodeMouseMove(NodeMouseMoveEvent event) { manageCoordinates(event.getX(), event.getY()); } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override public void onNodeMouseMove(NodeMouseMoveEvent event) { manageCoordinates(event.getX(), event.getY()); } }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override public void onNodeMouseMove(NodeMouseMoveEvent event) { manageCoordinates(event.getX(), event.getY()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void hidePopover() { mouseMoveHandler.hidePopover(); verify(errorReportPopupPresenterMock, times(1)).hide(); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override public void hidePopover() { errorReportPopupPresenter.hide(); } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }",<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override public void hidePopover() { errorReportPopupPresenter.hide(); } }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public void hide(); }</ECTX>,<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override public void hidePopover() { errorReportPopupPresenter.hide(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public void hide(); }</ECTX>,import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
@Test public void checkUnmarshallingEmptyModel() { final GuidedDecisionTableEditorGraphModel model = GuidedDTGraphXMLPersistence.getInstance().unmarshal( emptyModelXml ); assertEmptyModel( model ); },GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); public static GuidedDTGraphXMLPersistence getInstance(); public String marshal(GuidedDecisionTableEditorGraphModel); public GuidedDecisionTableEditorGraphModel unmarshal(String); },<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); }</FCTX> <ECTX></ECTX>,<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } <PRIVATE_FCTX>private GuidedDTGraphXMLPersistence();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import com.thoughtworks.xstream.XStream;|import com.thoughtworks.xstream.io.xml.DomDriver;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.kie.soup.xstream.XStreamUtils;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;,import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.junit.Test;|import org.uberfire.backend.vfs.Path;|import org.uberfire.backend.vfs.PathFactory;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;
"@Test public void manageBodyCoordinatesNotInGrid() { boolean inGrid = mouseMoveHandler.manageBodyCoordinates(-1, -1); verify(simulationMock, never()).getDataByIndex(isA(Integer.class)); verify(simulationDescriptorMock, never()).getFactMappingByIndex(isA(Integer.class)); verify(scenarioMock, never()).getFactMappingValue(any()); verify(mouseMoveHandler, never()).retrieveCellMiddleXYPosition(any(), isA(Integer.class)); verify(errorReportPopupPresenterMock, never()).setup(any(), any(), any(), any(), any(), anyInt(), anyInt(), any()); assertFalse(inGrid); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public boolean isShown(); }</ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public boolean isShown(); }</ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void manageBodyCoordinatesSameCellIsShown() { mouseMoveHandler.currentlyShownBodyRowIndex = ROW_INDEX; mouseMoveHandler.currentlyShownBodyColumnIndex = COLUMN_INDEX; doReturn(true).when(errorReportPopupPresenterMock).isShown(); mouseMoveHandler.manageBodyCoordinates(ROW_INDEX, COLUMN_INDEX); verify(scenarioGridMock, never()).getModel(); verify(simulationMock, never()).getDataByIndex(eq(ROW_INDEX)); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public boolean isShown(); }</ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public boolean isShown(); }</ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void manageBodyCoordinatesSameCellNotShown() { mouseMoveHandler.currentlyShownBodyRowIndex = ROW_INDEX; mouseMoveHandler.currentlyShownBodyColumnIndex = COLUMN_INDEX; doReturn(false).when(errorReportPopupPresenterMock).isShown(); doNothing().when(mouseMoveHandler).manageFactMappingValue(eq(factMappingValueMock), eq(ROW_INDEX), eq(COLUMN_INDEX)); mouseMoveHandler.manageBodyCoordinates(ROW_INDEX, COLUMN_INDEX); verify(scenarioGridMock, times(1)).getModel(); verify(simulationMock, times(1)).getDataByIndex(eq(ROW_INDEX)); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public boolean isShown(); }</ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public boolean isShown(); }</ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void manageBodyCoordinatesNotShownWithoutFactMappingValue() { doReturn(false).when(errorReportPopupPresenterMock).isShown(); doReturn(Optional.empty()).when(scenarioMock).getFactMappingValue(eq(factMappingMock)); mouseMoveHandler.manageBodyCoordinates(ROW_INDEX, COLUMN_INDEX); verify(scenarioGridMock, times(1)).getModel(); verify(simulationMock, times(1)).getDataByIndex(eq(ROW_INDEX)); verify(simulationDescriptorMock, times(1)).getFactMappingByIndex(eq(COLUMN_INDEX)); verify(scenarioMock, times(1)).getFactMappingValue(eq(factMappingMock)); verify(mouseMoveHandler, never()).manageFactMappingValue( isA(FactMappingValue.class), anyInt(), anyInt()); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public boolean isShown(); }</ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public boolean isShown(); }</ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void manageBodyCoordinatesNotShownWithFactMappingValue() { doReturn(false).when(errorReportPopupPresenterMock).isShown(); doReturn(Optional.of(factMappingValueMock)).when(scenarioMock).getFactMappingValue(eq(factMappingMock)); doNothing().when(mouseMoveHandler).manageFactMappingValue(eq(factMappingValueMock), eq(ROW_INDEX), eq(COLUMN_INDEX)); mouseMoveHandler.manageBodyCoordinates(ROW_INDEX, COLUMN_INDEX); verify(scenarioGridMock, times(1)).getModel(); verify(simulationMock, times(1)).getDataByIndex(eq(ROW_INDEX)); verify(simulationDescriptorMock, times(1)).getFactMappingByIndex(eq(COLUMN_INDEX)); verify(scenarioMock, times(1)).getFactMappingValue(eq(factMappingMock)); verify(mouseMoveHandler, times(1)).manageFactMappingValue( eq(factMappingValueMock), eq(ROW_INDEX), eq(COLUMN_INDEX)); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public boolean isShown(); }</ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { @Override protected boolean manageBodyCoordinates(Integer uiRowIndex, Integer uiColumnIndex) { if (uiColumnIndex == -1 || uiRowIndex == -1) { return false; } if (uiRowIndex.equals(currentlyShownBodyRowIndex) && uiColumnIndex.equals(currentlyShownBodyColumnIndex) && errorReportPopupPresenter.isShown()) { return true; } currentlyShownBodyRowIndex = uiRowIndex; currentlyShownBodyColumnIndex = uiColumnIndex; final Optional<AbstractScesimModel<? extends AbstractScesimData>> optionalAbstractScesimModel = scenarioGrid.getModel().getAbstractScesimModel(); final AbstractScesimModel<? extends AbstractScesimData> scesimModel = optionalAbstractScesimModel.orElseThrow(IllegalStateException::new); final AbstractScesimData scenarioByIndex = scesimModel.getDataByIndex(uiRowIndex); final FactMapping factMapping = scesimModel.getScesimModelDescriptor().getFactMappingByIndex(uiColumnIndex); final Optional<FactMappingValue> factMappingValueOptional = scenarioByIndex.getFactMappingValue(factMapping); factMappingValueOptional.ifPresent(factMappingValue -> manageFactMappingValue(factMappingValue, uiRowIndex, uiColumnIndex)); return true; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public boolean isShown(); }</ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void manageFactMappingValueSuccess() { when(factMappingValueMock.getStatus()).thenReturn(FactMappingValueStatus.SUCCESS); mouseMoveHandler.manageFactMappingValue(factMappingValueMock, ROW_INDEX, COLUMN_INDEX); verify(mouseMoveHandler, never()).manageFailedFactMappingValue(eq(factMappingValueMock), eq(ROW_INDEX), eq(COLUMN_INDEX)); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { if (toManage.getStatus() != null && FactMappingValueStatus.SUCCESS != toManage.getStatus()) { manageFailedFactMappingValue(toManage, uiRowIndex, uiColumnIndex); } } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { if (toManage.getStatus() != null && FactMappingValueStatus.SUCCESS != toManage.getStatus()) { manageFailedFactMappingValue(toManage, uiRowIndex, uiColumnIndex); } } }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { if (toManage.getStatus() != null && FactMappingValueStatus.SUCCESS != toManage.getStatus()) { manageFailedFactMappingValue(toManage, uiRowIndex, uiColumnIndex); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void manageFactMappingValueNotSuccess() { when(factMappingValueMock.getStatus()).thenReturn(FactMappingValueStatus.FAILED_WITH_EXCEPTION); doNothing().when(mouseMoveHandler).manageFailedFactMappingValue(eq(factMappingValueMock), eq(ROW_INDEX), eq(COLUMN_INDEX)); mouseMoveHandler.manageFactMappingValue(factMappingValueMock, ROW_INDEX, COLUMN_INDEX); verify(mouseMoveHandler, times(1)).manageFailedFactMappingValue(eq(factMappingValueMock), eq(ROW_INDEX), eq(COLUMN_INDEX)); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { if (toManage.getStatus() != null && FactMappingValueStatus.SUCCESS != toManage.getStatus()) { manageFailedFactMappingValue(toManage, uiRowIndex, uiColumnIndex); } } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { if (toManage.getStatus() != null && FactMappingValueStatus.SUCCESS != toManage.getStatus()) { manageFailedFactMappingValue(toManage, uiRowIndex, uiColumnIndex); } } }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { if (toManage.getStatus() != null && FactMappingValueStatus.SUCCESS != toManage.getStatus()) { manageFailedFactMappingValue(toManage, uiRowIndex, uiColumnIndex); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void manageFailedFactMappingValueRight() { int expectedDx = (int) (CELL_WIDTH / 2) + DX; doNothing().when(mouseMoveHandler).setupPopupPresenter(eq(factMappingValueMock), eq(0), eq(COLUMN_INDEX), eq(expectedDx), eq(DY), eq(PopoverView.Position.RIGHT)); mouseMoveHandler.manageFailedFactMappingValue(factMappingValueMock, 0, COLUMN_INDEX); verify(mouseMoveHandler, times(1)).retrieveCellMiddleXYPosition(gridColumnMock, 0); verify(mouseMoveHandler, times(1)).setupPopupPresenter(eq(factMappingValueMock), eq(0), eq(COLUMN_INDEX), eq(expectedDx), eq(DY), eq(PopoverView.Position.RIGHT)); verify(errorReportPopupPresenterMock, times(1)).show(); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFailedFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { final GridColumn<?> column = scenarioGrid.getModel().getColumns().get(uiColumnIndex); final Point2D cellXYMiddleCoordinates = retrieveCellMiddleXYPosition(column, uiRowIndex); int cellHeight = getCellHeight(column, uiRowIndex); PopoverView.Position position = PopoverView.Position.RIGHT; int xMiddleWidth = (int) column.getWidth() / 2; int xPosition = (int) cellXYMiddleCoordinates.getX() + xMiddleWidth; int yPosition = (int) cellXYMiddleCoordinates.getY(); if (xPosition + POPOVER_WIDTH > scenarioGrid.getLayer().getWidth()) { xPosition = (int) cellXYMiddleCoordinates.getX() - xMiddleWidth; position = PopoverView.Position.LEFT; } if (xPosition <= scenarioGrid.getLayer().getElement().getAbsoluteLeft()) { xPosition = (int) cellXYMiddleCoordinates.getX(); yPosition = (int) cellXYMiddleCoordinates.getY() - cellHeight/2; position = PopoverView.Position.TOP; } int scrollX = scenarioGridPanel.getScrollPanel().getElement().getScrollLeft(); xPosition -= scrollX; int scrollY = scenarioGridPanel.getScrollPanel().getElement().getScrollTop(); yPosition -= scrollY; setupPopupPresenter(toManage, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); errorReportPopupPresenter.show(); } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFailedFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { final GridColumn<?> column = scenarioGrid.getModel().getColumns().get(uiColumnIndex); final Point2D cellXYMiddleCoordinates = retrieveCellMiddleXYPosition(column, uiRowIndex); int cellHeight = getCellHeight(column, uiRowIndex); PopoverView.Position position = PopoverView.Position.RIGHT; int xMiddleWidth = (int) column.getWidth() / 2; int xPosition = (int) cellXYMiddleCoordinates.getX() + xMiddleWidth; int yPosition = (int) cellXYMiddleCoordinates.getY(); if (xPosition + POPOVER_WIDTH > scenarioGrid.getLayer().getWidth()) { xPosition = (int) cellXYMiddleCoordinates.getX() - xMiddleWidth; position = PopoverView.Position.LEFT; } if (xPosition <= scenarioGrid.getLayer().getElement().getAbsoluteLeft()) { xPosition = (int) cellXYMiddleCoordinates.getX(); yPosition = (int) cellXYMiddleCoordinates.getY() - cellHeight/2; position = PopoverView.Position.TOP; } int scrollX = scenarioGridPanel.getScrollPanel().getElement().getScrollLeft(); xPosition -= scrollX; int scrollY = scenarioGridPanel.getScrollPanel().getElement().getScrollTop(); yPosition -= scrollY; setupPopupPresenter(toManage, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); errorReportPopupPresenter.show(); } private static final int POPOVER_WIDTH = 220; }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public void show(); } public interface PopoverView extends org.jboss.errai.ui.client.local.api.IsElement { }</ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFailedFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { final GridColumn<?> column = scenarioGrid.getModel().getColumns().get(uiColumnIndex); final Point2D cellXYMiddleCoordinates = retrieveCellMiddleXYPosition(column, uiRowIndex); int cellHeight = getCellHeight(column, uiRowIndex); PopoverView.Position position = PopoverView.Position.RIGHT; int xMiddleWidth = (int) column.getWidth() / 2; int xPosition = (int) cellXYMiddleCoordinates.getX() + xMiddleWidth; int yPosition = (int) cellXYMiddleCoordinates.getY(); if (xPosition + POPOVER_WIDTH > scenarioGrid.getLayer().getWidth()) { xPosition = (int) cellXYMiddleCoordinates.getX() - xMiddleWidth; position = PopoverView.Position.LEFT; } if (xPosition <= scenarioGrid.getLayer().getElement().getAbsoluteLeft()) { xPosition = (int) cellXYMiddleCoordinates.getX(); yPosition = (int) cellXYMiddleCoordinates.getY() - cellHeight/2; position = PopoverView.Position.TOP; } int scrollX = scenarioGridPanel.getScrollPanel().getElement().getScrollLeft(); xPosition -= scrollX; int scrollY = scenarioGridPanel.getScrollPanel().getElement().getScrollTop(); yPosition -= scrollY; setupPopupPresenter(toManage, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); errorReportPopupPresenter.show(); } <PRIVATE_FCTX>private static final int POPOVER_WIDTH = 220;</PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public void show(); } public interface PopoverView extends org.jboss.errai.ui.client.local.api.IsElement { }</ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void manageFailedFactMappingValueLeft() { when(scenarioGridLayerMock.getWidth()).thenReturn(TINY_LAYER); int expectedDx = (int) (DX - (CELL_WIDTH / 2)); doNothing().when(mouseMoveHandler).setupPopupPresenter(eq(factMappingValueMock), eq(0), eq(COLUMN_INDEX), eq(expectedDx), eq(DY), eq(PopoverView.Position.RIGHT)); mouseMoveHandler.manageFailedFactMappingValue(factMappingValueMock, 0, COLUMN_INDEX); verify(mouseMoveHandler, times(1)).retrieveCellMiddleXYPosition(gridColumnMock, 0); verify(mouseMoveHandler, times(1)).setupPopupPresenter(eq(factMappingValueMock), eq(0), eq(COLUMN_INDEX), eq(expectedDx), eq(DY), eq(PopoverView.Position.LEFT)); verify(errorReportPopupPresenterMock, times(1)).show(); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFailedFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { final GridColumn<?> column = scenarioGrid.getModel().getColumns().get(uiColumnIndex); final Point2D cellXYMiddleCoordinates = retrieveCellMiddleXYPosition(column, uiRowIndex); int cellHeight = getCellHeight(column, uiRowIndex); PopoverView.Position position = PopoverView.Position.RIGHT; int xMiddleWidth = (int) column.getWidth() / 2; int xPosition = (int) cellXYMiddleCoordinates.getX() + xMiddleWidth; int yPosition = (int) cellXYMiddleCoordinates.getY(); if (xPosition + POPOVER_WIDTH > scenarioGrid.getLayer().getWidth()) { xPosition = (int) cellXYMiddleCoordinates.getX() - xMiddleWidth; position = PopoverView.Position.LEFT; } if (xPosition <= scenarioGrid.getLayer().getElement().getAbsoluteLeft()) { xPosition = (int) cellXYMiddleCoordinates.getX(); yPosition = (int) cellXYMiddleCoordinates.getY() - cellHeight/2; position = PopoverView.Position.TOP; } int scrollX = scenarioGridPanel.getScrollPanel().getElement().getScrollLeft(); xPosition -= scrollX; int scrollY = scenarioGridPanel.getScrollPanel().getElement().getScrollTop(); yPosition -= scrollY; setupPopupPresenter(toManage, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); errorReportPopupPresenter.show(); } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFailedFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { final GridColumn<?> column = scenarioGrid.getModel().getColumns().get(uiColumnIndex); final Point2D cellXYMiddleCoordinates = retrieveCellMiddleXYPosition(column, uiRowIndex); int cellHeight = getCellHeight(column, uiRowIndex); PopoverView.Position position = PopoverView.Position.RIGHT; int xMiddleWidth = (int) column.getWidth() / 2; int xPosition = (int) cellXYMiddleCoordinates.getX() + xMiddleWidth; int yPosition = (int) cellXYMiddleCoordinates.getY(); if (xPosition + POPOVER_WIDTH > scenarioGrid.getLayer().getWidth()) { xPosition = (int) cellXYMiddleCoordinates.getX() - xMiddleWidth; position = PopoverView.Position.LEFT; } if (xPosition <= scenarioGrid.getLayer().getElement().getAbsoluteLeft()) { xPosition = (int) cellXYMiddleCoordinates.getX(); yPosition = (int) cellXYMiddleCoordinates.getY() - cellHeight/2; position = PopoverView.Position.TOP; } int scrollX = scenarioGridPanel.getScrollPanel().getElement().getScrollLeft(); xPosition -= scrollX; int scrollY = scenarioGridPanel.getScrollPanel().getElement().getScrollTop(); yPosition -= scrollY; setupPopupPresenter(toManage, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); errorReportPopupPresenter.show(); } private static final int POPOVER_WIDTH = 220; }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public void show(); } public interface PopoverView extends org.jboss.errai.ui.client.local.api.IsElement { }</ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFailedFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { final GridColumn<?> column = scenarioGrid.getModel().getColumns().get(uiColumnIndex); final Point2D cellXYMiddleCoordinates = retrieveCellMiddleXYPosition(column, uiRowIndex); int cellHeight = getCellHeight(column, uiRowIndex); PopoverView.Position position = PopoverView.Position.RIGHT; int xMiddleWidth = (int) column.getWidth() / 2; int xPosition = (int) cellXYMiddleCoordinates.getX() + xMiddleWidth; int yPosition = (int) cellXYMiddleCoordinates.getY(); if (xPosition + POPOVER_WIDTH > scenarioGrid.getLayer().getWidth()) { xPosition = (int) cellXYMiddleCoordinates.getX() - xMiddleWidth; position = PopoverView.Position.LEFT; } if (xPosition <= scenarioGrid.getLayer().getElement().getAbsoluteLeft()) { xPosition = (int) cellXYMiddleCoordinates.getX(); yPosition = (int) cellXYMiddleCoordinates.getY() - cellHeight/2; position = PopoverView.Position.TOP; } int scrollX = scenarioGridPanel.getScrollPanel().getElement().getScrollLeft(); xPosition -= scrollX; int scrollY = scenarioGridPanel.getScrollPanel().getElement().getScrollTop(); yPosition -= scrollY; setupPopupPresenter(toManage, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); errorReportPopupPresenter.show(); } <PRIVATE_FCTX>private static final int POPOVER_WIDTH = 220;</PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public void show(); } public interface PopoverView extends org.jboss.errai.ui.client.local.api.IsElement { }</ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void manageFailedFactMappingValueTop() { when(scenarioGridLayerMock.getWidth()).thenReturn(SMALLEST_LAYER); when(layerElementMock.getAbsoluteLeft()).thenReturn(4000); int expectedDy = DY - (CELL_HEIGHT / 2); doNothing().when(mouseMoveHandler).setupPopupPresenter(eq(factMappingValueMock), eq(0), eq(COLUMN_INDEX), eq(DX), eq(expectedDy), eq(PopoverView.Position.RIGHT)); mouseMoveHandler.manageFailedFactMappingValue(factMappingValueMock, 0, COLUMN_INDEX); verify(mouseMoveHandler, times(1)).retrieveCellMiddleXYPosition(gridColumnMock, 0); verify(mouseMoveHandler, times(1)).setupPopupPresenter(eq(factMappingValueMock), eq(0), eq(COLUMN_INDEX), eq(DX), eq(expectedDy), eq(PopoverView.Position.TOP)); verify(errorReportPopupPresenterMock, times(1)).show(); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFailedFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { final GridColumn<?> column = scenarioGrid.getModel().getColumns().get(uiColumnIndex); final Point2D cellXYMiddleCoordinates = retrieveCellMiddleXYPosition(column, uiRowIndex); int cellHeight = getCellHeight(column, uiRowIndex); PopoverView.Position position = PopoverView.Position.RIGHT; int xMiddleWidth = (int) column.getWidth() / 2; int xPosition = (int) cellXYMiddleCoordinates.getX() + xMiddleWidth; int yPosition = (int) cellXYMiddleCoordinates.getY(); if (xPosition + POPOVER_WIDTH > scenarioGrid.getLayer().getWidth()) { xPosition = (int) cellXYMiddleCoordinates.getX() - xMiddleWidth; position = PopoverView.Position.LEFT; } if (xPosition <= scenarioGrid.getLayer().getElement().getAbsoluteLeft()) { xPosition = (int) cellXYMiddleCoordinates.getX(); yPosition = (int) cellXYMiddleCoordinates.getY() - cellHeight/2; position = PopoverView.Position.TOP; } int scrollX = scenarioGridPanel.getScrollPanel().getElement().getScrollLeft(); xPosition -= scrollX; int scrollY = scenarioGridPanel.getScrollPanel().getElement().getScrollTop(); yPosition -= scrollY; setupPopupPresenter(toManage, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); errorReportPopupPresenter.show(); } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFailedFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { final GridColumn<?> column = scenarioGrid.getModel().getColumns().get(uiColumnIndex); final Point2D cellXYMiddleCoordinates = retrieveCellMiddleXYPosition(column, uiRowIndex); int cellHeight = getCellHeight(column, uiRowIndex); PopoverView.Position position = PopoverView.Position.RIGHT; int xMiddleWidth = (int) column.getWidth() / 2; int xPosition = (int) cellXYMiddleCoordinates.getX() + xMiddleWidth; int yPosition = (int) cellXYMiddleCoordinates.getY(); if (xPosition + POPOVER_WIDTH > scenarioGrid.getLayer().getWidth()) { xPosition = (int) cellXYMiddleCoordinates.getX() - xMiddleWidth; position = PopoverView.Position.LEFT; } if (xPosition <= scenarioGrid.getLayer().getElement().getAbsoluteLeft()) { xPosition = (int) cellXYMiddleCoordinates.getX(); yPosition = (int) cellXYMiddleCoordinates.getY() - cellHeight/2; position = PopoverView.Position.TOP; } int scrollX = scenarioGridPanel.getScrollPanel().getElement().getScrollLeft(); xPosition -= scrollX; int scrollY = scenarioGridPanel.getScrollPanel().getElement().getScrollTop(); yPosition -= scrollY; setupPopupPresenter(toManage, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); errorReportPopupPresenter.show(); } private static final int POPOVER_WIDTH = 220; }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public void show(); } public interface PopoverView extends org.jboss.errai.ui.client.local.api.IsElement { }</ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void manageFailedFactMappingValue(FactMappingValue toManage, Integer uiRowIndex, Integer uiColumnIndex) { final GridColumn<?> column = scenarioGrid.getModel().getColumns().get(uiColumnIndex); final Point2D cellXYMiddleCoordinates = retrieveCellMiddleXYPosition(column, uiRowIndex); int cellHeight = getCellHeight(column, uiRowIndex); PopoverView.Position position = PopoverView.Position.RIGHT; int xMiddleWidth = (int) column.getWidth() / 2; int xPosition = (int) cellXYMiddleCoordinates.getX() + xMiddleWidth; int yPosition = (int) cellXYMiddleCoordinates.getY(); if (xPosition + POPOVER_WIDTH > scenarioGrid.getLayer().getWidth()) { xPosition = (int) cellXYMiddleCoordinates.getX() - xMiddleWidth; position = PopoverView.Position.LEFT; } if (xPosition <= scenarioGrid.getLayer().getElement().getAbsoluteLeft()) { xPosition = (int) cellXYMiddleCoordinates.getX(); yPosition = (int) cellXYMiddleCoordinates.getY() - cellHeight/2; position = PopoverView.Position.TOP; } int scrollX = scenarioGridPanel.getScrollPanel().getElement().getScrollLeft(); xPosition -= scrollX; int scrollY = scenarioGridPanel.getScrollPanel().getElement().getScrollTop(); yPosition -= scrollY; setupPopupPresenter(toManage, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); errorReportPopupPresenter.show(); } <PRIVATE_FCTX>private static final int POPOVER_WIDTH = 220;</PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public void show(); } public interface PopoverView extends org.jboss.errai.ui.client.local.api.IsElement { }</ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
@Test public void checkUnmarshallingModel() { final GuidedDecisionTableEditorGraphModel model = GuidedDTGraphXMLPersistence.getInstance().unmarshal( emptyModelXml ); assertEmptyModel( model ); },GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); public static GuidedDTGraphXMLPersistence getInstance(); public String marshal(GuidedDecisionTableEditorGraphModel); public GuidedDecisionTableEditorGraphModel unmarshal(String); },<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); }</FCTX> <ECTX></ECTX>,<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } <PRIVATE_FCTX>private GuidedDTGraphXMLPersistence();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import com.thoughtworks.xstream.XStream;|import com.thoughtworks.xstream.io.xml.DomDriver;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.kie.soup.xstream.XStreamUtils;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;,import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.junit.Test;|import org.uberfire.backend.vfs.Path;|import org.uberfire.backend.vfs.PathFactory;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;
"@Test public void setupPopupPresenterWithScrollFailedWithError_NullPath() { when(elementMock.getScrollTop()).thenReturn(SCROLL_TOP); when(elementMock.getScrollLeft()).thenReturn(SCROLL_LEFT); when(factMappingValueMock.getStatus()).thenReturn(FactMappingValueStatus.FAILED_WITH_ERROR); when(factMappingValueMock.getCollectionPathToValue()).thenReturn(null); mouseMoveHandler.setupPopupPresenter(factMappingValueMock, ROW_INDEX, COLUMN_INDEX, DX, DY, PopoverView.Position.RIGHT); verify(mouseMoveHandler, times(1)).showErrorPopoverWithSuggestion(eq(RAW_VALUE), eq(ERROR_VALUE), eq(ROW_INDEX), eq(COLUMN_INDEX), eq(DX), eq(DY), eq(PopoverView.Position.RIGHT)); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void setupPopupPresenter(final FactMappingValue factMappingValue, final int uiRowIndex, final int uiColumnIndex, final int xPosition, final int yPosition, final PopoverView.Position position) { final Object expectedValue = factMappingValue.getRawValue(); final Object errorValue = factMappingValue.getErrorValue(); if (FactMappingValueStatus.FAILED_WITH_ERROR == factMappingValue.getStatus()) { if (Objects.isNull(factMappingValue.getCollectionPathToValue())) { showErrorPopoverWithSuggestion(expectedValue, errorValue, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); } else { showErrorPopoverWithoutSuggestion(getCollectionHTMLErrorMessage(errorValue, factMappingValue.getCollectionPathToValue()), xPosition, yPosition, position); } } else if (FactMappingValueStatus.FAILED_WITH_EXCEPTION == factMappingValue.getStatus()) { showErrorPopoverWithoutSuggestion(factMappingValue.getExceptionMessage(), xPosition, yPosition, position); } } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void setupPopupPresenter(final FactMappingValue factMappingValue, final int uiRowIndex, final int uiColumnIndex, final int xPosition, final int yPosition, final PopoverView.Position position) { final Object expectedValue = factMappingValue.getRawValue(); final Object errorValue = factMappingValue.getErrorValue(); if (FactMappingValueStatus.FAILED_WITH_ERROR == factMappingValue.getStatus()) { if (Objects.isNull(factMappingValue.getCollectionPathToValue())) { showErrorPopoverWithSuggestion(expectedValue, errorValue, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); } else { showErrorPopoverWithoutSuggestion(getCollectionHTMLErrorMessage(errorValue, factMappingValue.getCollectionPathToValue()), xPosition, yPosition, position); } } else if (FactMappingValueStatus.FAILED_WITH_EXCEPTION == factMappingValue.getStatus()) { showErrorPopoverWithoutSuggestion(factMappingValue.getExceptionMessage(), xPosition, yPosition, position); } } }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void setupPopupPresenter(final FactMappingValue factMappingValue, final int uiRowIndex, final int uiColumnIndex, final int xPosition, final int yPosition, final PopoverView.Position position) { final Object expectedValue = factMappingValue.getRawValue(); final Object errorValue = factMappingValue.getErrorValue(); if (FactMappingValueStatus.FAILED_WITH_ERROR == factMappingValue.getStatus()) { if (Objects.isNull(factMappingValue.getCollectionPathToValue())) { showErrorPopoverWithSuggestion(expectedValue, errorValue, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); } else { showErrorPopoverWithoutSuggestion(getCollectionHTMLErrorMessage(errorValue, factMappingValue.getCollectionPathToValue()), xPosition, yPosition, position); } } else if (FactMappingValueStatus.FAILED_WITH_EXCEPTION == factMappingValue.getStatus()) { showErrorPopoverWithoutSuggestion(factMappingValue.getExceptionMessage(), xPosition, yPosition, position); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void setupPopupPresenterWithScrollFailedWithException() { when(elementMock.getScrollTop()).thenReturn(SCROLL_TOP); when(elementMock.getScrollLeft()).thenReturn(SCROLL_LEFT); when(factMappingValueMock.getStatus()).thenReturn(FactMappingValueStatus.FAILED_WITH_EXCEPTION); when(factMappingValueMock.getExceptionMessage()).thenReturn(EXCEPTION); mouseMoveHandler.setupPopupPresenter(factMappingValueMock, ROW_INDEX, COLUMN_INDEX, DX, DY, PopoverView.Position.RIGHT); verify(mouseMoveHandler, times(1)).showErrorPopoverWithoutSuggestion(eq(EXCEPTION), eq(DX), eq(DY), eq(PopoverView.Position.RIGHT)); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void setupPopupPresenter(final FactMappingValue factMappingValue, final int uiRowIndex, final int uiColumnIndex, final int xPosition, final int yPosition, final PopoverView.Position position) { final Object expectedValue = factMappingValue.getRawValue(); final Object errorValue = factMappingValue.getErrorValue(); if (FactMappingValueStatus.FAILED_WITH_ERROR == factMappingValue.getStatus()) { if (Objects.isNull(factMappingValue.getCollectionPathToValue())) { showErrorPopoverWithSuggestion(expectedValue, errorValue, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); } else { showErrorPopoverWithoutSuggestion(getCollectionHTMLErrorMessage(errorValue, factMappingValue.getCollectionPathToValue()), xPosition, yPosition, position); } } else if (FactMappingValueStatus.FAILED_WITH_EXCEPTION == factMappingValue.getStatus()) { showErrorPopoverWithoutSuggestion(factMappingValue.getExceptionMessage(), xPosition, yPosition, position); } } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void setupPopupPresenter(final FactMappingValue factMappingValue, final int uiRowIndex, final int uiColumnIndex, final int xPosition, final int yPosition, final PopoverView.Position position) { final Object expectedValue = factMappingValue.getRawValue(); final Object errorValue = factMappingValue.getErrorValue(); if (FactMappingValueStatus.FAILED_WITH_ERROR == factMappingValue.getStatus()) { if (Objects.isNull(factMappingValue.getCollectionPathToValue())) { showErrorPopoverWithSuggestion(expectedValue, errorValue, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); } else { showErrorPopoverWithoutSuggestion(getCollectionHTMLErrorMessage(errorValue, factMappingValue.getCollectionPathToValue()), xPosition, yPosition, position); } } else if (FactMappingValueStatus.FAILED_WITH_EXCEPTION == factMappingValue.getStatus()) { showErrorPopoverWithoutSuggestion(factMappingValue.getExceptionMessage(), xPosition, yPosition, position); } } }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void setupPopupPresenter(final FactMappingValue factMappingValue, final int uiRowIndex, final int uiColumnIndex, final int xPosition, final int yPosition, final PopoverView.Position position) { final Object expectedValue = factMappingValue.getRawValue(); final Object errorValue = factMappingValue.getErrorValue(); if (FactMappingValueStatus.FAILED_WITH_ERROR == factMappingValue.getStatus()) { if (Objects.isNull(factMappingValue.getCollectionPathToValue())) { showErrorPopoverWithSuggestion(expectedValue, errorValue, uiRowIndex, uiColumnIndex, xPosition, yPosition, position); } else { showErrorPopoverWithoutSuggestion(getCollectionHTMLErrorMessage(errorValue, factMappingValue.getCollectionPathToValue()), xPosition, yPosition, position); } } else if (FactMappingValueStatus.FAILED_WITH_EXCEPTION == factMappingValue.getStatus()) { showErrorPopoverWithoutSuggestion(factMappingValue.getExceptionMessage(), xPosition, yPosition, position); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void showErrorPopoverWithoutSuggestion() { mouseMoveHandler.showErrorPopoverWithoutSuggestion(ERROR_VALUE, DX, DY, PopoverView.Position.RIGHT); verify(errorReportPopupPresenterMock, times(1)).setup( eq(ScenarioSimulationEditorConstants.INSTANCE.errorReason()), eq(ERROR_VALUE), eq(ScenarioSimulationEditorConstants.INSTANCE.close()), eq(DX), eq(DY), eq(PopoverView.Position.RIGHT)); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void showErrorPopoverWithoutSuggestion(final String errorMessage, final int xPosition, final int yPosition, final PopoverView.Position position) { errorReportPopupPresenter.setup(ScenarioSimulationEditorConstants.INSTANCE.errorReason(), errorMessage, ScenarioSimulationEditorConstants.INSTANCE.close(), xPosition, yPosition, position); } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void showErrorPopoverWithoutSuggestion(final String errorMessage, final int xPosition, final int yPosition, final PopoverView.Position position) { errorReportPopupPresenter.setup(ScenarioSimulationEditorConstants.INSTANCE.errorReason(), errorMessage, ScenarioSimulationEditorConstants.INSTANCE.close(), xPosition, yPosition, position); } }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public void setup(String, String, String, int, int, PopoverView.Position); } public interface ScenarioSimulationEditorConstants extends Messages { }</ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void showErrorPopoverWithoutSuggestion(final String errorMessage, final int xPosition, final int yPosition, final PopoverView.Position position) { errorReportPopupPresenter.setup(ScenarioSimulationEditorConstants.INSTANCE.errorReason(), errorMessage, ScenarioSimulationEditorConstants.INSTANCE.close(), xPosition, yPosition, position); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public void setup(String, String, String, int, int, PopoverView.Position); } public interface ScenarioSimulationEditorConstants extends Messages { }</ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void showErrorPopoverWithSuggestion() { when(elementMock.getScrollTop()).thenReturn(SCROLL_TOP); when(elementMock.getScrollLeft()).thenReturn(SCROLL_LEFT); when(factMappingValueMock.getStatus()).thenReturn(FactMappingValueStatus.FAILED_WITH_ERROR); mouseMoveHandler.showErrorPopoverWithSuggestion(RAW_VALUE, ERROR_VALUE, ROW_INDEX, COLUMN_INDEX, DX, DY, PopoverView.Position.RIGHT); String expectedValue = mouseMoveHandler.decorateWithStrongHTMLTag(RAW_VALUE); String wrongValue = mouseMoveHandler.decorateWithStrongHTMLTag(ERROR_VALUE); verify(errorReportPopupPresenterMock, times(1)).setup( eq(ScenarioSimulationEditorConstants.INSTANCE.errorReason()), eq(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverMessageFailedWithError(expectedValue, wrongValue)), eq(ScenarioSimulationEditorConstants.INSTANCE.keep()), eq(ScenarioSimulationEditorConstants.INSTANCE.apply()), isA(Command.class), eq(DX), eq(DY), eq(PopoverView.Position.RIGHT)); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void showErrorPopoverWithSuggestion(final Object expectedValue, final Object errorValue, final int uiRowIndex, final int uiColumnIndex, final int xPosition, final int yPosition, final PopoverView.Position position) { errorReportPopupPresenter.setup(ScenarioSimulationEditorConstants.INSTANCE.errorReason(), ScenarioSimulationEditorConstants.INSTANCE.errorPopoverMessageFailedWithError( decorateWithStrongHTMLTag(expectedValue != null ? expectedValue.toString() : NULL), decorateWithStrongHTMLTag(errorValue != null ? errorValue.toString() : NULL)), ScenarioSimulationEditorConstants.INSTANCE.keep(), ScenarioSimulationEditorConstants.INSTANCE.apply(), () -> scenarioGrid.getEventBus().fireEvent( new SetGridCellValueEvent(scenarioGrid.getGridWidget(), uiRowIndex, uiColumnIndex, errorValue != null ? errorValue.toString() : NULL)), xPosition, yPosition, position); } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void showErrorPopoverWithSuggestion(final Object expectedValue, final Object errorValue, final int uiRowIndex, final int uiColumnIndex, final int xPosition, final int yPosition, final PopoverView.Position position) { errorReportPopupPresenter.setup(ScenarioSimulationEditorConstants.INSTANCE.errorReason(), ScenarioSimulationEditorConstants.INSTANCE.errorPopoverMessageFailedWithError( decorateWithStrongHTMLTag(expectedValue != null ? expectedValue.toString() : NULL), decorateWithStrongHTMLTag(errorValue != null ? errorValue.toString() : NULL)), ScenarioSimulationEditorConstants.INSTANCE.keep(), ScenarioSimulationEditorConstants.INSTANCE.apply(), () -> scenarioGrid.getEventBus().fireEvent( new SetGridCellValueEvent(scenarioGrid.getGridWidget(), uiRowIndex, uiColumnIndex, errorValue != null ? errorValue.toString() : NULL)), xPosition, yPosition, position); } private static final String NULL = ""null""; }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public void setup(String, String, String, String, Command, int, int, PopoverView.Position); } public interface ScenarioSimulationEditorConstants extends Messages { }</ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected void showErrorPopoverWithSuggestion(final Object expectedValue, final Object errorValue, final int uiRowIndex, final int uiColumnIndex, final int xPosition, final int yPosition, final PopoverView.Position position) { errorReportPopupPresenter.setup(ScenarioSimulationEditorConstants.INSTANCE.errorReason(), ScenarioSimulationEditorConstants.INSTANCE.errorPopoverMessageFailedWithError( decorateWithStrongHTMLTag(expectedValue != null ? expectedValue.toString() : NULL), decorateWithStrongHTMLTag(errorValue != null ? errorValue.toString() : NULL)), ScenarioSimulationEditorConstants.INSTANCE.keep(), ScenarioSimulationEditorConstants.INSTANCE.apply(), () -> scenarioGrid.getEventBus().fireEvent( new SetGridCellValueEvent(scenarioGrid.getGridWidget(), uiRowIndex, uiColumnIndex, errorValue != null ? errorValue.toString() : NULL)), xPosition, yPosition, position); } <PRIVATE_FCTX>private static final String NULL = ""null"";</PRIVATE_FCTX> }</FCTX> <ECTX>@ApplicationScoped public class ErrorReportPopoverPresenter implements ErrorReportPopover.Presenter { @Override public void setup(String, String, String, String, Command, int, int, PopoverView.Position); } public interface ScenarioSimulationEditorConstants extends Messages { }</ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void getCollectionHTMLErrorMessage_EmptyPath() { assertEquals(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverGenericCollectionErrorMessage(), mouseMoveHandler.getCollectionHTMLErrorMessage(ERROR_VALUE, Collections.emptyList())); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected String getCollectionHTMLErrorMessage(Object wrongValue, List<String> pathToWrongValue) { if (pathToWrongValue.isEmpty()) { return ScenarioSimulationEditorConstants.INSTANCE.errorPopoverGenericCollectionErrorMessage(); } if (pathToWrongValue.size() == 1) { StringBuilder builder = new StringBuilder(); builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLFailureMessage(decorateWithEMHTMLTag(pathToWrongValue.get(0)))); if (wrongValue != null) { builder.append(BR); builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLValue(decorateWithStrongHTMLTag(wrongValue.toString()))); } return builder.toString(); } StringBuilder builder = new StringBuilder(); builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLFailureMessage(decorateWithEMHTMLTag(pathToWrongValue.get(0)))); builder.append(BR); builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLField(decorateWithEMHTMLTag(generateFieldsHierarchy(pathToWrongValue.subList(1, pathToWrongValue.size()))))); if (wrongValue != null) { builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLValue(decorateWithStrongHTMLTag(wrongValue.toString()))); } return builder.toString(); } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected String getCollectionHTMLErrorMessage(Object wrongValue, List<String> pathToWrongValue) { if (pathToWrongValue.isEmpty()) { return ScenarioSimulationEditorConstants.INSTANCE.errorPopoverGenericCollectionErrorMessage(); } if (pathToWrongValue.size() == 1) { StringBuilder builder = new StringBuilder(); builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLFailureMessage(decorateWithEMHTMLTag(pathToWrongValue.get(0)))); if (wrongValue != null) { builder.append(BR); builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLValue(decorateWithStrongHTMLTag(wrongValue.toString()))); } return builder.toString(); } StringBuilder builder = new StringBuilder(); builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLFailureMessage(decorateWithEMHTMLTag(pathToWrongValue.get(0)))); builder.append(BR); builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLField(decorateWithEMHTMLTag(generateFieldsHierarchy(pathToWrongValue.subList(1, pathToWrongValue.size()))))); if (wrongValue != null) { builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLValue(decorateWithStrongHTMLTag(wrongValue.toString()))); } return builder.toString(); } private static final String BR = ""<br>""; }</FCTX> <ECTX>public interface ScenarioSimulationEditorConstants extends Messages { }</ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected String getCollectionHTMLErrorMessage(Object wrongValue, List<String> pathToWrongValue) { if (pathToWrongValue.isEmpty()) { return ScenarioSimulationEditorConstants.INSTANCE.errorPopoverGenericCollectionErrorMessage(); } if (pathToWrongValue.size() == 1) { StringBuilder builder = new StringBuilder(); builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLFailureMessage(decorateWithEMHTMLTag(pathToWrongValue.get(0)))); if (wrongValue != null) { builder.append(BR); builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLValue(decorateWithStrongHTMLTag(wrongValue.toString()))); } return builder.toString(); } StringBuilder builder = new StringBuilder(); builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLFailureMessage(decorateWithEMHTMLTag(pathToWrongValue.get(0)))); builder.append(BR); builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLField(decorateWithEMHTMLTag(generateFieldsHierarchy(pathToWrongValue.subList(1, pathToWrongValue.size()))))); if (wrongValue != null) { builder.append(ScenarioSimulationEditorConstants.INSTANCE.errorPopoverCollectionHTMLValue(decorateWithStrongHTMLTag(wrongValue.toString()))); } return builder.toString(); } <PRIVATE_FCTX>private static final String BR = ""<br>"";</PRIVATE_FCTX> }</FCTX> <ECTX>public interface ScenarioSimulationEditorConstants extends Messages { }</ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void decorateWithStrongHTMLTag() { assertEquals(""<strong>\"""" + RAW_VALUE + ""\""</strong>"", mouseMoveHandler.decorateWithStrongHTMLTag(RAW_VALUE)); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected String decorateWithStrongHTMLTag(String value) { return ""<strong>\"""" + value + ""\""</strong>""; } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected String decorateWithStrongHTMLTag(String value) { return ""<strong>\"""" + value + ""\""</strong>""; } }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected String decorateWithStrongHTMLTag(String value) { return ""<strong>\"""" + value + ""\""</strong>""; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void decorateWithEMHTMLTag() { assertEquals(""<em>"" + RAW_VALUE + ""</em>"", mouseMoveHandler.decorateWithEMHTMLTag(RAW_VALUE)); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected String decorateWithEMHTMLTag(String value) { return ""<em>"" + value + ""</em>""; } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected String decorateWithEMHTMLTag(String value) { return ""<em>"" + value + ""</em>""; } }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected String decorateWithEMHTMLTag(String value) { return ""<em>"" + value + ""</em>""; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void generateFieldsHierarchy() { assertEquals(""Field1<br>"", mouseMoveHandler.generateFieldsHierarchy(Arrays.asList(""Field1""))); assertEquals(""<ul><li>Field1<ul><li>Field2<ul><li>Field3</li></ul></li></ul></li></ul>"", mouseMoveHandler.generateFieldsHierarchy(Arrays.asList(""Field1"", ""Field2"", ""Field3""))); }","ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected String generateFieldsHierarchy(List<String> hierarchy) { if (hierarchy.size() == 1) { return hierarchy.get(0) + BR; } StringBuilder builder = new StringBuilder(); hierarchy.forEach(step -> builder.append(""<ul><li>"" + step)); IntStream.range(0, hierarchy.size()).forEach(i -> builder.append(""</li></ul>"")); return builder.toString(); } @Override public void onNodeMouseMove(NodeMouseMoveEvent); @Override public void hidePopover(); @Override public void setErrorReportPopupPresenter(ErrorReportPopoverPresenter); @Override protected boolean manageGivenExpectHeaderCoordinates(ScenarioHeaderMetaData, ScenarioGridColumn, String, Integer); @Override protected boolean manageBodyCoordinates(Integer, Integer); protected void manageFactMappingValue(FactMappingValue, Integer, Integer); protected void manageFailedFactMappingValue(FactMappingValue, Integer, Integer); protected void setupPopupPresenter(FactMappingValue, int, int, int, int, PopoverView.Position); protected void showErrorPopoverWithoutSuggestion(String, int, int, PopoverView.Position); protected void showErrorPopoverWithSuggestion(Object, Object, int, int, int, int, PopoverView.Position); protected String getCollectionHTMLErrorMessage(Object, List<String>); protected String decorateWithStrongHTMLTag(String); protected String decorateWithEMHTMLTag(String); protected String generateFieldsHierarchy(List<String>); protected Point2D retrieveCellMiddleXYPosition(GridColumn<?>, int); protected int getCellHeight(GridColumn<?>, int); protected ErrorReportPopoverPresenter errorReportPopupPresenter; protected Integer currentlyShownBodyRowIndex = -1; protected Integer currentlyShownBodyColumnIndex = -1; }","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected String generateFieldsHierarchy(List<String> hierarchy) { if (hierarchy.size() == 1) { return hierarchy.get(0) + BR; } StringBuilder builder = new StringBuilder(); hierarchy.forEach(step -> builder.append(""<ul><li>"" + step)); IntStream.range(0, hierarchy.size()).forEach(i -> builder.append(""</li></ul>"")); return builder.toString(); } private static final String BR = ""<br>""; }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioSimulationMainGridPanelMouseMoveHandler extends AbstractScenarioSimulationGridPanelHandler implements ScenarioSimulationGridPanelMouseMoveHandler { protected String generateFieldsHierarchy(List<String> hierarchy) { if (hierarchy.size() == 1) { return hierarchy.get(0) + BR; } StringBuilder builder = new StringBuilder(); hierarchy.forEach(step -> builder.append(""<ul><li>"" + step)); IntStream.range(0, hierarchy.size()).forEach(i -> builder.append(""</li></ul>"")); return builder.toString(); } <PRIVATE_FCTX>private static final String BR = ""<br>"";</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.List;|import java.util.Objects;|import java.util.Optional;|import java.util.stream.IntStream;|import javax.enterprise.context.Dependent;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.workbench.screens.scenariosimulation.client.events.SetGridCellValueEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.widget.layer.GridLayer;,import java.util.Arrays;|import java.util.Collections;|import java.util.Optional;|import com.ait.lienzo.client.core.event.NodeMouseMoveEvent;|import com.ait.lienzo.client.core.types.Point2D;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.DivElement;|import com.google.gwt.user.client.Element;|import com.google.gwt.user.client.ui.AbsolutePanel;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.popover.PopoverView;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.mvp.Command;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CELL_WIDTH;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.DY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ERROR_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.EXCEPTION;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.LARGE_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MY;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.NULL;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.RAW_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_LEFT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SCROLL_TOP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.SMALLEST_LAYER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.TINY_LAYER;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void onValueChange() { reset(uploadWidgetMock); ValueChangeEvent eventMock = mock(ValueChangeEvent.class); doReturn(false).when(sourceTypeSelector).isDMNSelected(); sourceTypeSelector.onValueChange(eventMock); verify(uploadWidgetMock, never()).updateAssetList(); doReturn(true).when(sourceTypeSelector).isDMNSelected(); sourceTypeSelector.onValueChange(eventMock); verify(uploadWidgetMock, times(1)).updateAssetList(); }","SourceTypeSelector extends VerticalPanel implements ValueChangeHandler<Boolean> { @Override public void onValueChange(ValueChangeEvent<Boolean> event) { final boolean dmnSelected = isDMNSelected(); uploadWidget.setVisible(dmnSelected); if (dmnSelected) { uploadWidget.updateAssetList(); } } public SourceTypeSelector(TitledAttachmentFileWidget); @Override public void onValueChange(ValueChangeEvent<Boolean>); public boolean validate(); public boolean isDMNSelected(); public ScenarioSimulationModel.Type getSelectedType(); protected void addRadioButtons(); protected static final String SOURCE_TYPE = ""SOURCE_TYPE""; protected final TitledAttachmentFileWidget uploadWidget; protected final List<Radio> radioButtonList = new ArrayList<Radio>(); }","<FCTX>SourceTypeSelector extends VerticalPanel implements ValueChangeHandler<Boolean> { @Override public void onValueChange(ValueChangeEvent<Boolean> event) { final boolean dmnSelected = isDMNSelected(); uploadWidget.setVisible(dmnSelected); if (dmnSelected) { uploadWidget.updateAssetList(); } } public SourceTypeSelector(TitledAttachmentFileWidget); }</FCTX> <ECTX>public class TitledAttachmentFileWidget extends Composite { public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); public void updateAssetList(); setVisible(boolean); }</ECTX>","<FCTX>SourceTypeSelector extends VerticalPanel implements ValueChangeHandler<Boolean> { @Override public void onValueChange(ValueChangeEvent<Boolean> event) { final boolean dmnSelected = isDMNSelected(); uploadWidget.setVisible(dmnSelected); if (dmnSelected) { uploadWidget.updateAssetList(); } } public SourceTypeSelector(TitledAttachmentFileWidget); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class TitledAttachmentFileWidget extends Composite { public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); public void updateAssetList(); setVisible(boolean); }</ECTX>",import java.util.ArrayList;|import java.util.List;|import com.google.gwt.event.logical.shared.ValueChangeEvent;|import com.google.gwt.event.logical.shared.ValueChangeHandler;|import com.google.gwt.user.client.ui.VerticalPanel;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.gwtbootstrap3.client.ui.CheckBox;|import org.gwtbootstrap3.client.ui.Radio;,import com.google.gwt.event.logical.shared.ValueChangeEvent;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void addRadioButtons() { reset(uploadWidgetMock); sourceTypeSelector.addRadioButtons(); assertEquals(2, sourceTypeSelector.radioButtonList.size()); verify(uploadWidgetMock, times(1)).setVisible(false); }","SourceTypeSelector extends VerticalPanel implements ValueChangeHandler<Boolean> { protected void addRadioButtons() { boolean first = true; radioButtonList.clear(); for (ScenarioSimulationModel.Type sourceType : ScenarioSimulationModel.Type.values()) { Radio radioButton = new Radio(SOURCE_TYPE); radioButton.setText(sourceType.name()); radioButton.setValue(first); radioButton.addValueChangeHandler(this); first = false; radioButtonList.add(radioButton); add(radioButton); } uploadWidget.setVisible(isDMNSelected()); } public SourceTypeSelector(TitledAttachmentFileWidget); @Override public void onValueChange(ValueChangeEvent<Boolean>); public boolean validate(); public boolean isDMNSelected(); public ScenarioSimulationModel.Type getSelectedType(); protected void addRadioButtons(); protected static final String SOURCE_TYPE = ""SOURCE_TYPE""; protected final TitledAttachmentFileWidget uploadWidget; protected final List<Radio> radioButtonList = new ArrayList<Radio>(); }","<FCTX>SourceTypeSelector extends VerticalPanel implements ValueChangeHandler<Boolean> { protected void addRadioButtons() { boolean first = true; radioButtonList.clear(); for (ScenarioSimulationModel.Type sourceType : ScenarioSimulationModel.Type.values()) { Radio radioButton = new Radio(SOURCE_TYPE); radioButton.setText(sourceType.name()); radioButton.setValue(first); radioButton.addValueChangeHandler(this); first = false; radioButtonList.add(radioButton); add(radioButton); } uploadWidget.setVisible(isDMNSelected()); } public SourceTypeSelector(TitledAttachmentFileWidget); }</FCTX> <ECTX>public class TitledAttachmentFileWidget extends Composite { public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); setVisible(unknownType); }</ECTX>","<FCTX>SourceTypeSelector extends VerticalPanel implements ValueChangeHandler<Boolean> { protected void addRadioButtons() { boolean first = true; radioButtonList.clear(); for (ScenarioSimulationModel.Type sourceType : ScenarioSimulationModel.Type.values()) { Radio radioButton = new Radio(SOURCE_TYPE); radioButton.setText(sourceType.name()); radioButton.setValue(first); radioButton.addValueChangeHandler(this); first = false; radioButtonList.add(radioButton); add(radioButton); } uploadWidget.setVisible(isDMNSelected()); } public SourceTypeSelector(TitledAttachmentFileWidget); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class TitledAttachmentFileWidget extends Composite { public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); setVisible(unknownType); }</ECTX>",import java.util.ArrayList;|import java.util.List;|import com.google.gwt.event.logical.shared.ValueChangeEvent;|import com.google.gwt.event.logical.shared.ValueChangeHandler;|import com.google.gwt.user.client.ui.VerticalPanel;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.gwtbootstrap3.client.ui.CheckBox;|import org.gwtbootstrap3.client.ui.Radio;,import com.google.gwt.event.logical.shared.ValueChangeEvent;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertTrue;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void checkMarshallingNull() { final String xml = GuidedDTGraphXMLPersistence.getInstance().marshal( null ); assertNotNull( xml ); assertEqualsIgnoreWhitespace( emptyModelXml, xml ); }",GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); public static GuidedDTGraphXMLPersistence getInstance(); public String marshal(GuidedDecisionTableEditorGraphModel); public GuidedDecisionTableEditorGraphModel unmarshal(String); },<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } private GuidedDTGraphXMLPersistence(); }</FCTX> <ECTX></ECTX>,<FCTX>GuidedDTGraphXMLPersistence { public static GuidedDTGraphXMLPersistence getInstance() { return INSTANCE; } <PRIVATE_FCTX>private GuidedDTGraphXMLPersistence();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import com.thoughtworks.xstream.XStream;|import com.thoughtworks.xstream.io.xml.DomDriver;|import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.kie.soup.xstream.XStreamUtils;|import org.slf4j.Logger;|import org.slf4j.LoggerFactory;,import org.drools.workbench.screens.guided.dtable.model.GuidedDecisionTableEditorGraphModel;|import org.junit.Test;|import org.uberfire.backend.vfs.Path;|import org.uberfire.backend.vfs.PathFactory;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertNotNull;
"@Test public void clearStatus() { titledAttachmentFileWidget.selectedPath = ""SELECTED_PATH""; assertNotNull(titledAttachmentFileWidget.selectedPath); titledAttachmentFileWidget.clearStatus(); verify(titledAttachmentFileWidget, times(1)).updateAssetList(); verify(errorLabelMock, times(1)).setText(eq(null)); assertNull(titledAttachmentFileWidget.selectedPath); }","TitledAttachmentFileWidget extends Composite { public void clearStatus() { updateAssetList(); errorLabel.setText(null); selectedPath = null; } public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); public void clearStatus(); public void updateAssetList(); public String getSelectedPath(); public boolean validate(); protected Element createIconElement(); protected FlowPanel fields = GWT.create(FlowPanel.class); protected Div divElement = GWT.create(Div.class); protected FormLabel titleLabel = GWT.create(FormLabel.class); protected Span errorLabel = GWT.create(Span.class); protected ScenarioSimulationDropdown scenarioSimulationDropdown; protected Caller<ScenarioSimulationService> scenarioSimulationService; protected String selectedPath; }","<FCTX>TitledAttachmentFileWidget extends Composite { public void clearStatus() { updateAssetList(); errorLabel.setText(null); selectedPath = null; } public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); }</FCTX> <ECTX></ECTX>","<FCTX>TitledAttachmentFileWidget extends Composite { public void clearStatus() { updateAssetList(); errorLabel.setText(null); selectedPath = null; } public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Optional;|import com.google.gwt.core.client.GWT;|import com.google.gwt.dom.client.Document;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.Style;|import com.google.gwt.user.client.ui.Composite;|import com.google.gwt.user.client.ui.FlowPanel;|import org.drools.workbench.screens.scenariosimulation.client.dropdown.ScenarioSimulationDropdown;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.service.ScenarioSimulationService;|import org.gwtbootstrap3.client.ui.FormLabel;|import org.gwtbootstrap3.client.ui.constants.ElementTags;|import org.gwtbootstrap3.client.ui.constants.IconType;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.gwtbootstrap3.client.ui.html.Div;|import org.gwtbootstrap3.client.ui.html.Span;|import org.jboss.errai.common.client.api.Caller;|import org.kie.workbench.common.widgets.client.assets.dropdown.KieAssetsDropdownItem;,import com.google.gwt.user.client.ui.FlowPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.gwtbootstrap3.client.ui.FormLabel;|import org.gwtbootstrap3.client.ui.html.Span;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void updateAssetList() { titledAttachmentFileWidget.updateAssetList(); verify(scenarioSimulationDropdownMock, times(1)).loadAssets(); }","TitledAttachmentFileWidget extends Composite { public void updateAssetList() { scenarioSimulationDropdown.loadAssets(); } public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); public void clearStatus(); public void updateAssetList(); public String getSelectedPath(); public boolean validate(); protected Element createIconElement(); protected FlowPanel fields = GWT.create(FlowPanel.class); protected Div divElement = GWT.create(Div.class); protected FormLabel titleLabel = GWT.create(FormLabel.class); protected Span errorLabel = GWT.create(Span.class); protected ScenarioSimulationDropdown scenarioSimulationDropdown; protected Caller<ScenarioSimulationService> scenarioSimulationService; protected String selectedPath; }","<FCTX>TitledAttachmentFileWidget extends Composite { public void updateAssetList() { scenarioSimulationDropdown.loadAssets(); } public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); }</FCTX> <ECTX>@Dependent @Named(ScenarioSimulationDropdown.BEAN_NAME) public class ScenarioSimulationDropdown extends AbstractKieAssetsDropdown { @Inject public ScenarioSimulationDropdown(ScenarioSimulationDropdownView, ScenarioSimulationAssetsDropdownProvider); loadAssets(); }</ECTX>","<FCTX>TitledAttachmentFileWidget extends Composite { public void updateAssetList() { scenarioSimulationDropdown.loadAssets(); } public TitledAttachmentFileWidget(String, Caller<ScenarioSimulationService>, ScenarioSimulationDropdown); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@Dependent @Named(ScenarioSimulationDropdown.BEAN_NAME) public class ScenarioSimulationDropdown extends AbstractKieAssetsDropdown { @Inject public ScenarioSimulationDropdown(ScenarioSimulationDropdownView, ScenarioSimulationAssetsDropdownProvider); loadAssets(); }</ECTX>",import java.util.Optional;|import com.google.gwt.core.client.GWT;|import com.google.gwt.dom.client.Document;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.Style;|import com.google.gwt.user.client.ui.Composite;|import com.google.gwt.user.client.ui.FlowPanel;|import org.drools.workbench.screens.scenariosimulation.client.dropdown.ScenarioSimulationDropdown;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.service.ScenarioSimulationService;|import org.gwtbootstrap3.client.ui.FormLabel;|import org.gwtbootstrap3.client.ui.constants.ElementTags;|import org.gwtbootstrap3.client.ui.constants.IconType;|import org.gwtbootstrap3.client.ui.constants.Styles;|import org.gwtbootstrap3.client.ui.html.Div;|import org.gwtbootstrap3.client.ui.html.Span;|import org.jboss.errai.common.client.api.Caller;|import org.kie.workbench.common.widgets.client.assets.dropdown.KieAssetsDropdownItem;,import com.google.gwt.user.client.ui.FlowPanel;|import com.google.gwtmockito.GwtMockitoTestRunner;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.gwtbootstrap3.client.ui.FormLabel;|import org.gwtbootstrap3.client.ui.html.Span;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertNull;|import static org.junit.Assert.assertTrue;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
"@Test public void testManageHeaderRightClick() { final int clickPointX = 5; final int clickPointy = 6; doReturn(clickPointX).when(contextNativeEventMock).getClientX(); doReturn(clickPointy).when(contextNativeEventMock).getClientY(); assertThat(scenarioContextMenuRegistry.manageRightClick(scenarioGridMock, contextMenuEventMock)).as(""Click to [0,0] header cell"").isTrue(); verify(scenarioGridMock, times(1)).clearSelections(); verify(expectedContextMenuMock).show(GridWidget.SIMULATION, clickPointX, clickPointy, 0, COLUMN_GROUP, false, settingsLocal.getType().equals(ScenarioSimulationModel.Type.RULE)); verify(scenarioGridMock, times(1)).setSelectedColumnAndHeader(eq(0), eq(0)); verifyZeroInteractions(headerExpectedContextMenuMock); }","ScenarioContextMenuRegistry { private boolean manageHeaderRightClick(final ScenarioGrid scenarioGrid, final int left, final int top, final Integer uiHeaderRowIndex, final Integer uiColumnIndex) { final ScenarioGridColumn column = (ScenarioGridColumn) scenarioGrid.getModel().getColumns().get(uiColumnIndex); if (column == null) { return false; } ScenarioHeaderMetaData columnMetadata = ScenarioSimulationGridHeaderUtilities.getColumnScenarioHeaderMetaData(column, uiHeaderRowIndex); if (columnMetadata == null) { return false; } if (uiHeaderRowIndex == null) { return false; } boolean showDuplicateInstance = scenarioGrid.getType().equals(ScenarioSimulationModel.Type.RULE); String group = ScenarioSimulationUtils.getOriginalColumnGroup(columnMetadata.getColumnGroup()); switch (group) { case """": switch (columnMetadata.getTitle()) { case ""GIVEN"": headerGivenContextMenu.show(scenarioGrid.getGridWidget(), left, top); break; case ""EXPECT"": headerExpectedContextMenu.show(scenarioGrid.getGridWidget(), left, top); break; default: otherContextMenu.show(left, top); } break; case ""GIVEN"": givenContextMenu.show(scenarioGrid.getGridWidget(), left, top, uiColumnIndex, group, Objects.equals(columnMetadata.getMetadataType(), ScenarioHeaderMetaData.MetadataType.PROPERTY), showDuplicateInstance); break; case ""EXPECT"": expectedContextMenu.show(scenarioGrid.getGridWidget(),left, top, uiColumnIndex, group, Objects.equals(columnMetadata.getMetadataType(), ScenarioHeaderMetaData.MetadataType.PROPERTY), showDuplicateInstance); break; default: otherContextMenu.show(left, top); } scenarioGrid.setSelectedColumnAndHeader(uiHeaderRowIndex, uiColumnIndex); return true; } @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public void setEventBus(EventBus); public void hideMenus(); public boolean manageRightClick(ScenarioGrid, ContextMenuEvent); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); public void setErrorReportPopoverPresenter(ErrorReportPopoverPresenter); public void hideErrorReportPopover(); protected OtherContextMenu otherContextMenu; protected HeaderGivenContextMenu headerGivenContextMenu; protected HeaderExpectedContextMenu headerExpectedContextMenu; protected GivenContextMenu givenContextMenu; protected ExpectedContextMenu expectedContextMenu; protected GridContextMenu gridContextMenu; protected ErrorReportPopoverPresenter errorReportPopoverPresenter; }","<FCTX>ScenarioContextMenuRegistry { private boolean manageHeaderRightClick(final ScenarioGrid scenarioGrid, final int left, final int top, final Integer uiHeaderRowIndex, final Integer uiColumnIndex) { final ScenarioGridColumn column = (ScenarioGridColumn) scenarioGrid.getModel().getColumns().get(uiColumnIndex); if (column == null) { return false; } ScenarioHeaderMetaData columnMetadata = ScenarioSimulationGridHeaderUtilities.getColumnScenarioHeaderMetaData(column, uiHeaderRowIndex); if (columnMetadata == null) { return false; } if (uiHeaderRowIndex == null) { return false; } boolean showDuplicateInstance = scenarioGrid.getType().equals(ScenarioSimulationModel.Type.RULE); String group = ScenarioSimulationUtils.getOriginalColumnGroup(columnMetadata.getColumnGroup()); switch (group) { case """": switch (columnMetadata.getTitle()) { case ""GIVEN"": headerGivenContextMenu.show(scenarioGrid.getGridWidget(), left, top); break; case ""EXPECT"": headerExpectedContextMenu.show(scenarioGrid.getGridWidget(), left, top); break; default: otherContextMenu.show(left, top); } break; case ""GIVEN"": givenContextMenu.show(scenarioGrid.getGridWidget(), left, top, uiColumnIndex, group, Objects.equals(columnMetadata.getMetadataType(), ScenarioHeaderMetaData.MetadataType.PROPERTY), showDuplicateInstance); break; case ""EXPECT"": expectedContextMenu.show(scenarioGrid.getGridWidget(),left, top, uiColumnIndex, group, Objects.equals(columnMetadata.getMetadataType(), ScenarioHeaderMetaData.MetadataType.PROPERTY), showDuplicateInstance); break; default: otherContextMenu.show(left, top); } scenarioGrid.setSelectedColumnAndHeader(uiHeaderRowIndex, uiColumnIndex); return true; } @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); }</FCTX> <ECTX>@Dependent public class ExpectedContextMenu extends AbstractColumnMenuPresenter { show(unknownType, int, int, Integer, String, unknownType, boolean); } @Dependent public class GivenContextMenu extends AbstractColumnMenuPresenter { show(unknownType, int, int, Integer, String, unknownType, boolean); } @Dependent public class HeaderExpectedContextMenu extends AbstractHeaderGroupMenuPresenter { @Override public void show(GridWidget, int, int); } @Dependent public class HeaderGivenContextMenu extends AbstractHeaderGroupMenuPresenter { @Override public void show(GridWidget, int, int); } @Dependent public class OtherContextMenu extends AbstractHeaderMenuPresenter { show(int, int); } public class ScenarioGrid extends BaseGridWidget { public ScenarioGrid(AbstractScesimGridModel, ScenarioGridLayer, ScenarioGridRenderer, ScenarioContextMenuRegistry); @Override public AbstractScesimGridModel getModel(); public ScenarioSimulationModel.Type getType(); public GridWidget getGridWidget(); public void setSelectedColumnAndHeader(int, int); } public class ScenarioHeaderMetaData extends BaseHeaderMetaData { public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); public MetadataType getMetadataType(); getColumnGroup(); getTitle(); } public class ScenarioSimulationGridHeaderUtilities { public static ScenarioHeaderMetaData getColumnScenarioHeaderMetaData(ScenarioGridColumn, int); } public class ScenarioSimulationUtils { public static String getOriginalColumnGroup(String); }</ECTX>","<FCTX>ScenarioContextMenuRegistry { private boolean manageHeaderRightClick(final ScenarioGrid scenarioGrid, final int left, final int top, final Integer uiHeaderRowIndex, final Integer uiColumnIndex) { final ScenarioGridColumn column = (ScenarioGridColumn) scenarioGrid.getModel().getColumns().get(uiColumnIndex); if (column == null) { return false; } ScenarioHeaderMetaData columnMetadata = ScenarioSimulationGridHeaderUtilities.getColumnScenarioHeaderMetaData(column, uiHeaderRowIndex); if (columnMetadata == null) { return false; } if (uiHeaderRowIndex == null) { return false; } boolean showDuplicateInstance = scenarioGrid.getType().equals(ScenarioSimulationModel.Type.RULE); String group = ScenarioSimulationUtils.getOriginalColumnGroup(columnMetadata.getColumnGroup()); switch (group) { case """": switch (columnMetadata.getTitle()) { case ""GIVEN"": headerGivenContextMenu.show(scenarioGrid.getGridWidget(), left, top); break; case ""EXPECT"": headerExpectedContextMenu.show(scenarioGrid.getGridWidget(), left, top); break; default: otherContextMenu.show(left, top); } break; case ""GIVEN"": givenContextMenu.show(scenarioGrid.getGridWidget(), left, top, uiColumnIndex, group, Objects.equals(columnMetadata.getMetadataType(), ScenarioHeaderMetaData.MetadataType.PROPERTY), showDuplicateInstance); break; case ""EXPECT"": expectedContextMenu.show(scenarioGrid.getGridWidget(),left, top, uiColumnIndex, group, Objects.equals(columnMetadata.getMetadataType(), ScenarioHeaderMetaData.MetadataType.PROPERTY), showDuplicateInstance); break; default: otherContextMenu.show(left, top); } scenarioGrid.setSelectedColumnAndHeader(uiHeaderRowIndex, uiColumnIndex); return true; } @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>@Dependent public class ExpectedContextMenu extends AbstractColumnMenuPresenter { show(unknownType, int, int, Integer, String, unknownType, boolean); } @Dependent public class GivenContextMenu extends AbstractColumnMenuPresenter { show(unknownType, int, int, Integer, String, unknownType, boolean); } @Dependent public class HeaderExpectedContextMenu extends AbstractHeaderGroupMenuPresenter { @Override public void show(GridWidget, int, int); } @Dependent public class HeaderGivenContextMenu extends AbstractHeaderGroupMenuPresenter { @Override public void show(GridWidget, int, int); } @Dependent public class OtherContextMenu extends AbstractHeaderMenuPresenter { show(int, int); } public class ScenarioGrid extends BaseGridWidget { public ScenarioGrid(AbstractScesimGridModel, ScenarioGridLayer, ScenarioGridRenderer, ScenarioContextMenuRegistry); @Override public AbstractScesimGridModel getModel(); public ScenarioSimulationModel.Type getType(); public GridWidget getGridWidget(); public void setSelectedColumnAndHeader(int, int); } public class ScenarioHeaderMetaData extends BaseHeaderMetaData { public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); public MetadataType getMetadataType(); getColumnGroup(); getTitle(); } public class ScenarioSimulationGridHeaderUtilities { public static ScenarioHeaderMetaData getColumnScenarioHeaderMetaData(ScenarioGridColumn, int); } public class ScenarioSimulationUtils { public static String getOriginalColumnGroup(String); }</ECTX>",import java.util.Objects;|import javax.enterprise.context.Dependent;|import javax.inject.Inject;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.shared.EventBus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.ExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GridContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderGivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.OtherContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationGridHeaderUtilities;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities;,import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.Document;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.NativeEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.ExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GridContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderGivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.OtherContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationGridHandlerTest;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridRow;|import static org.assertj.core.api.Assertions.assertThat;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_GROUP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.HEADER_HEIGHT;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.verifyZeroInteractions;
"@Test public void testManageHeaderRightClick_ClickOutsideHeader() { final int clickPointX = 5; final int clickPointY = 11; doReturn(clickPointX).when(contextNativeEventMock).getClientX(); doReturn(clickPointY).when(contextNativeEventMock).getClientY(); assertThat(scenarioContextMenuRegistry.manageRightClick(scenarioGridMock, contextMenuEventMock)).as(""Click point y more then header max y"").isFalse(); verifyZeroInteractions(expectedContextMenuMock); verifyZeroInteractions(headerExpectedContextMenuMock); }","ScenarioContextMenuRegistry { public boolean manageRightClick(final ScenarioGrid scenarioGrid, final ContextMenuEvent event) { final int canvasX = CoordinateUtilities.getRelativeXOfEvent(event); final int canvasY = CoordinateUtilities.getRelativeYOfEvent(event); final Point2D gridClickPoint = CoordinateUtilities.convertDOMToGridCoordinate(scenarioGrid, new Point2D(canvasX, canvasY)); boolean isHeader = true; Integer uiRowIndex = CoordinateUtilities.getUiHeaderRowIndex(scenarioGrid, gridClickPoint); if (uiRowIndex == null) { uiRowIndex = CoordinateUtilities.getUiRowIndex(scenarioGrid, gridClickPoint.getY()); isHeader = false; } if (uiRowIndex == null) { return false; } final Integer uiColumnIndex = CoordinateUtilities.getUiColumnIndex(scenarioGrid, gridClickPoint.getX()); if (uiColumnIndex == null) { return false; } return manageRightClick(scenarioGrid, event.getNativeEvent().getClientX(), event.getNativeEvent().getClientY(), uiRowIndex, uiColumnIndex, isHeader); } @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public void setEventBus(EventBus); public void hideMenus(); public boolean manageRightClick(ScenarioGrid, ContextMenuEvent); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); public void setErrorReportPopoverPresenter(ErrorReportPopoverPresenter); public void hideErrorReportPopover(); protected OtherContextMenu otherContextMenu; protected HeaderGivenContextMenu headerGivenContextMenu; protected HeaderExpectedContextMenu headerExpectedContextMenu; protected GivenContextMenu givenContextMenu; protected ExpectedContextMenu expectedContextMenu; protected GridContextMenu gridContextMenu; protected ErrorReportPopoverPresenter errorReportPopoverPresenter; }","<FCTX>ScenarioContextMenuRegistry { public boolean manageRightClick(final ScenarioGrid scenarioGrid, final ContextMenuEvent event) { final int canvasX = CoordinateUtilities.getRelativeXOfEvent(event); final int canvasY = CoordinateUtilities.getRelativeYOfEvent(event); final Point2D gridClickPoint = CoordinateUtilities.convertDOMToGridCoordinate(scenarioGrid, new Point2D(canvasX, canvasY)); boolean isHeader = true; Integer uiRowIndex = CoordinateUtilities.getUiHeaderRowIndex(scenarioGrid, gridClickPoint); if (uiRowIndex == null) { uiRowIndex = CoordinateUtilities.getUiRowIndex(scenarioGrid, gridClickPoint.getY()); isHeader = false; } if (uiRowIndex == null) { return false; } final Integer uiColumnIndex = CoordinateUtilities.getUiColumnIndex(scenarioGrid, gridClickPoint.getX()); if (uiColumnIndex == null) { return false; } return manageRightClick(scenarioGrid, event.getNativeEvent().getClientX(), event.getNativeEvent().getClientY(), uiRowIndex, uiColumnIndex, isHeader); } @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioContextMenuRegistry { public boolean manageRightClick(final ScenarioGrid scenarioGrid, final ContextMenuEvent event) { final int canvasX = CoordinateUtilities.getRelativeXOfEvent(event); final int canvasY = CoordinateUtilities.getRelativeYOfEvent(event); final Point2D gridClickPoint = CoordinateUtilities.convertDOMToGridCoordinate(scenarioGrid, new Point2D(canvasX, canvasY)); boolean isHeader = true; Integer uiRowIndex = CoordinateUtilities.getUiHeaderRowIndex(scenarioGrid, gridClickPoint); if (uiRowIndex == null) { uiRowIndex = CoordinateUtilities.getUiRowIndex(scenarioGrid, gridClickPoint.getY()); isHeader = false; } if (uiRowIndex == null) { return false; } final Integer uiColumnIndex = CoordinateUtilities.getUiColumnIndex(scenarioGrid, gridClickPoint.getX()); if (uiColumnIndex == null) { return false; } return manageRightClick(scenarioGrid, event.getNativeEvent().getClientX(), event.getNativeEvent().getClientY(), uiRowIndex, uiColumnIndex, isHeader); } @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Objects;|import javax.enterprise.context.Dependent;|import javax.inject.Inject;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.shared.EventBus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.ExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GridContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderGivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.OtherContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationGridHeaderUtilities;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities;,import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.Document;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.NativeEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.ExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GridContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderGivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.OtherContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationGridHandlerTest;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridRow;|import static org.assertj.core.api.Assertions.assertThat;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_GROUP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.HEADER_HEIGHT;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.verifyZeroInteractions;
"@Test public void testManageHeaderRightClick_NoColumnGroup() { final int clickPointX = 5; final int clickPointY = 6; doReturn(clickPointX).when(contextNativeEventMock).getClientX(); doReturn(clickPointY).when(contextNativeEventMock).getClientY(); doReturn("""").when(informationHeaderMetaDataMock).getColumnGroup(); doReturn(""EXPECT"").when(informationHeaderMetaDataMock).getTitle(); assertThat(scenarioContextMenuRegistry.manageRightClick(scenarioGridMock, contextMenuEventMock)).as(""Context menu according to column title"").isTrue(); verify(headerExpectedContextMenuMock).show(eq(GridWidget.SIMULATION), eq(clickPointX), eq(clickPointY)); verifyZeroInteractions(expectedContextMenuMock); }","ScenarioContextMenuRegistry { public boolean manageRightClick(final ScenarioGrid scenarioGrid, final ContextMenuEvent event) { final int canvasX = CoordinateUtilities.getRelativeXOfEvent(event); final int canvasY = CoordinateUtilities.getRelativeYOfEvent(event); final Point2D gridClickPoint = CoordinateUtilities.convertDOMToGridCoordinate(scenarioGrid, new Point2D(canvasX, canvasY)); boolean isHeader = true; Integer uiRowIndex = CoordinateUtilities.getUiHeaderRowIndex(scenarioGrid, gridClickPoint); if (uiRowIndex == null) { uiRowIndex = CoordinateUtilities.getUiRowIndex(scenarioGrid, gridClickPoint.getY()); isHeader = false; } if (uiRowIndex == null) { return false; } final Integer uiColumnIndex = CoordinateUtilities.getUiColumnIndex(scenarioGrid, gridClickPoint.getX()); if (uiColumnIndex == null) { return false; } return manageRightClick(scenarioGrid, event.getNativeEvent().getClientX(), event.getNativeEvent().getClientY(), uiRowIndex, uiColumnIndex, isHeader); } @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public void setEventBus(EventBus); public void hideMenus(); public boolean manageRightClick(ScenarioGrid, ContextMenuEvent); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); public void setErrorReportPopoverPresenter(ErrorReportPopoverPresenter); public void hideErrorReportPopover(); protected OtherContextMenu otherContextMenu; protected HeaderGivenContextMenu headerGivenContextMenu; protected HeaderExpectedContextMenu headerExpectedContextMenu; protected GivenContextMenu givenContextMenu; protected ExpectedContextMenu expectedContextMenu; protected GridContextMenu gridContextMenu; protected ErrorReportPopoverPresenter errorReportPopoverPresenter; }","<FCTX>ScenarioContextMenuRegistry { public boolean manageRightClick(final ScenarioGrid scenarioGrid, final ContextMenuEvent event) { final int canvasX = CoordinateUtilities.getRelativeXOfEvent(event); final int canvasY = CoordinateUtilities.getRelativeYOfEvent(event); final Point2D gridClickPoint = CoordinateUtilities.convertDOMToGridCoordinate(scenarioGrid, new Point2D(canvasX, canvasY)); boolean isHeader = true; Integer uiRowIndex = CoordinateUtilities.getUiHeaderRowIndex(scenarioGrid, gridClickPoint); if (uiRowIndex == null) { uiRowIndex = CoordinateUtilities.getUiRowIndex(scenarioGrid, gridClickPoint.getY()); isHeader = false; } if (uiRowIndex == null) { return false; } final Integer uiColumnIndex = CoordinateUtilities.getUiColumnIndex(scenarioGrid, gridClickPoint.getX()); if (uiColumnIndex == null) { return false; } return manageRightClick(scenarioGrid, event.getNativeEvent().getClientX(), event.getNativeEvent().getClientY(), uiRowIndex, uiColumnIndex, isHeader); } @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioContextMenuRegistry { public boolean manageRightClick(final ScenarioGrid scenarioGrid, final ContextMenuEvent event) { final int canvasX = CoordinateUtilities.getRelativeXOfEvent(event); final int canvasY = CoordinateUtilities.getRelativeYOfEvent(event); final Point2D gridClickPoint = CoordinateUtilities.convertDOMToGridCoordinate(scenarioGrid, new Point2D(canvasX, canvasY)); boolean isHeader = true; Integer uiRowIndex = CoordinateUtilities.getUiHeaderRowIndex(scenarioGrid, gridClickPoint); if (uiRowIndex == null) { uiRowIndex = CoordinateUtilities.getUiRowIndex(scenarioGrid, gridClickPoint.getY()); isHeader = false; } if (uiRowIndex == null) { return false; } final Integer uiColumnIndex = CoordinateUtilities.getUiColumnIndex(scenarioGrid, gridClickPoint.getX()); if (uiColumnIndex == null) { return false; } return manageRightClick(scenarioGrid, event.getNativeEvent().getClientX(), event.getNativeEvent().getClientY(), uiRowIndex, uiColumnIndex, isHeader); } @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Objects;|import javax.enterprise.context.Dependent;|import javax.inject.Inject;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.shared.EventBus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.ExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GridContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderGivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.OtherContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationGridHeaderUtilities;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities;,import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.Document;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.NativeEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.ExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GridContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderGivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.OtherContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationGridHandlerTest;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridRow;|import static org.assertj.core.api.Assertions.assertThat;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_GROUP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.HEADER_HEIGHT;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.verifyZeroInteractions;
"@Test public void testManageBodyRightClick() { final int clickPointX = 5; final int clickPointY = 11; final double widgetHeight = 50.0; final double rowHeight = widgetHeight - HEADER_HEIGHT; doReturn(clickPointX).when(contextNativeEventMock).getClientX(); doReturn(clickPointY).when(contextNativeEventMock).getClientY(); doReturn(widgetHeight).when(scenarioGridMock).getHeight(); doReturn(1).when(scenarioGridModelMock).getRowCount(); final GridRow gridRowMock = mock(GridRow.class); doReturn(gridRowMock).when(scenarioGridModelMock).getRow(0); doReturn(rowHeight).when(gridRowMock).getHeight(); assertThat(scenarioContextMenuRegistry.manageRightClick(scenarioGridMock, contextMenuEventMock)).as(""Click to expect/given body cell"").isTrue(); verify(scenarioGridMock, times(1)).clearSelections(); verify(gridContextMenuMock).show(GridWidget.SIMULATION, clickPointX, clickPointY, 0); verify(scenarioGridMock, times(1)).setSelectedCell(eq(0), eq(0)); }","ScenarioContextMenuRegistry { public boolean manageRightClick(final ScenarioGrid scenarioGrid, final ContextMenuEvent event) { final int canvasX = CoordinateUtilities.getRelativeXOfEvent(event); final int canvasY = CoordinateUtilities.getRelativeYOfEvent(event); final Point2D gridClickPoint = CoordinateUtilities.convertDOMToGridCoordinate(scenarioGrid, new Point2D(canvasX, canvasY)); boolean isHeader = true; Integer uiRowIndex = CoordinateUtilities.getUiHeaderRowIndex(scenarioGrid, gridClickPoint); if (uiRowIndex == null) { uiRowIndex = CoordinateUtilities.getUiRowIndex(scenarioGrid, gridClickPoint.getY()); isHeader = false; } if (uiRowIndex == null) { return false; } final Integer uiColumnIndex = CoordinateUtilities.getUiColumnIndex(scenarioGrid, gridClickPoint.getX()); if (uiColumnIndex == null) { return false; } return manageRightClick(scenarioGrid, event.getNativeEvent().getClientX(), event.getNativeEvent().getClientY(), uiRowIndex, uiColumnIndex, isHeader); } @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); public void setEventBus(EventBus); public void hideMenus(); public boolean manageRightClick(ScenarioGrid, ContextMenuEvent); public boolean manageRightClick(ScenarioGrid, int, int, Integer, Integer, boolean); public void setErrorReportPopoverPresenter(ErrorReportPopoverPresenter); public void hideErrorReportPopover(); protected OtherContextMenu otherContextMenu; protected HeaderGivenContextMenu headerGivenContextMenu; protected HeaderExpectedContextMenu headerExpectedContextMenu; protected GivenContextMenu givenContextMenu; protected ExpectedContextMenu expectedContextMenu; protected GridContextMenu gridContextMenu; protected ErrorReportPopoverPresenter errorReportPopoverPresenter; }","<FCTX>ScenarioContextMenuRegistry { public boolean manageRightClick(final ScenarioGrid scenarioGrid, final ContextMenuEvent event) { final int canvasX = CoordinateUtilities.getRelativeXOfEvent(event); final int canvasY = CoordinateUtilities.getRelativeYOfEvent(event); final Point2D gridClickPoint = CoordinateUtilities.convertDOMToGridCoordinate(scenarioGrid, new Point2D(canvasX, canvasY)); boolean isHeader = true; Integer uiRowIndex = CoordinateUtilities.getUiHeaderRowIndex(scenarioGrid, gridClickPoint); if (uiRowIndex == null) { uiRowIndex = CoordinateUtilities.getUiRowIndex(scenarioGrid, gridClickPoint.getY()); isHeader = false; } if (uiRowIndex == null) { return false; } final Integer uiColumnIndex = CoordinateUtilities.getUiColumnIndex(scenarioGrid, gridClickPoint.getX()); if (uiColumnIndex == null) { return false; } return manageRightClick(scenarioGrid, event.getNativeEvent().getClientX(), event.getNativeEvent().getClientY(), uiRowIndex, uiColumnIndex, isHeader); } @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioContextMenuRegistry { public boolean manageRightClick(final ScenarioGrid scenarioGrid, final ContextMenuEvent event) { final int canvasX = CoordinateUtilities.getRelativeXOfEvent(event); final int canvasY = CoordinateUtilities.getRelativeYOfEvent(event); final Point2D gridClickPoint = CoordinateUtilities.convertDOMToGridCoordinate(scenarioGrid, new Point2D(canvasX, canvasY)); boolean isHeader = true; Integer uiRowIndex = CoordinateUtilities.getUiHeaderRowIndex(scenarioGrid, gridClickPoint); if (uiRowIndex == null) { uiRowIndex = CoordinateUtilities.getUiRowIndex(scenarioGrid, gridClickPoint.getY()); isHeader = false; } if (uiRowIndex == null) { return false; } final Integer uiColumnIndex = CoordinateUtilities.getUiColumnIndex(scenarioGrid, gridClickPoint.getX()); if (uiColumnIndex == null) { return false; } return manageRightClick(scenarioGrid, event.getNativeEvent().getClientX(), event.getNativeEvent().getClientY(), uiRowIndex, uiColumnIndex, isHeader); } @Inject public ScenarioContextMenuRegistry(OtherContextMenu, HeaderGivenContextMenu, HeaderExpectedContextMenu, GivenContextMenu, ExpectedContextMenu, GridContextMenu); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import java.util.Objects;|import javax.enterprise.context.Dependent;|import javax.inject.Inject;|import com.ait.lienzo.client.core.types.Point2D;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import com.google.gwt.event.shared.EventBus;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.ExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GridContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderGivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.OtherContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.popover.ErrorReportPopoverPresenter;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationGridHeaderUtilities;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGrid;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.util.CoordinateUtilities;,import com.ait.lienzo.test.LienzoMockitoTestRunner;|import com.google.gwt.dom.client.Document;|import com.google.gwt.dom.client.Element;|import com.google.gwt.dom.client.NativeEvent;|import com.google.gwt.event.dom.client.ContextMenuEvent;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.ExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.GridContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderExpectedContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.HeaderGivenContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.editor.menu.OtherContextMenu;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.handlers.AbstractScenarioSimulationGridHandlerTest;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridRow;|import static org.assertj.core.api.Assertions.assertThat;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_GROUP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.HEADER_HEIGHT;|import static org.mockito.Matchers.eq;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.verifyZeroInteractions;
"@Test public void testSupportedEditAction() { ScenarioHeaderMetaData scenarioHeaderMetaData = new ScenarioHeaderMetaData("""", """", """", factoryMock, false, false); assertEquals(GridCellEditAction.DOUBLE_CLICK, scenarioHeaderMetaData.getSupportedEditAction()); }","ScenarioHeaderMetaData extends BaseHeaderMetaData { public GridCellEditAction getSupportedEditAction() { return GridCellEditAction.DOUBLE_CLICK; } public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); public void edit(GridBodyCellEditContext); public String getColumnId(); public boolean isReadOnly(); public void setReadOnly(boolean); public boolean isInstanceHeader(); public boolean isPropertyHeader(); public boolean isEditingMode(); public void setEditingMode(boolean); public GridCellEditAction getSupportedEditAction(); public MetadataType getMetadataType(); @Override public String toString(); final ScenarioHeaderTextBoxSingletonDOMElementFactory factory; final String columnId; final boolean instanceHeader; final boolean propertyHeader; }","<FCTX>ScenarioHeaderMetaData extends BaseHeaderMetaData { public GridCellEditAction getSupportedEditAction() { return GridCellEditAction.DOUBLE_CLICK; } public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>ScenarioHeaderMetaData extends BaseHeaderMetaData { public GridCellEditAction getSupportedEditAction() { return GridCellEditAction.DOUBLE_CLICK; } public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean, boolean); public ScenarioHeaderMetaData(String, String, String, ScenarioHeaderTextBoxSingletonDOMElementFactory, boolean, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>",import org.drools.workbench.screens.scenariosimulation.client.domelements.ScenarioHeaderTextAreaDOMElement;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioHeaderTextBoxSingletonDOMElementFactory;|import org.uberfire.ext.wires.core.grids.client.model.GridCellEditAction;|import org.uberfire.ext.wires.core.grids.client.model.impl.BaseHeaderMetaData;|import org.uberfire.ext.wires.core.grids.client.widget.context.GridBodyCellEditContext;,import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioHeaderTextBoxSingletonDOMElementFactory;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.mockito.runners.MockitoJUnitRunner;|import org.uberfire.ext.wires.core.grids.client.model.GridCellEditAction;|import static org.assertj.core.api.Assertions.assertThatThrownBy;|import static org.junit.Assert.assertEquals;|import static org.mockito.Matchers.any;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;
@Test public void bindContent() { assertTrue(abstractScesimGridModelSpy.getAbstractScesimModel().isPresent()); },"AbstractScesimGridModel extends BaseGridData { public void bindContent(T abstractScesimModel) { this.abstractScesimModel = abstractScesimModel; checkSimulation(); columnCounter.set(abstractScesimModel.getScesimModelDescriptor().getUnmodifiableFactMappings().size()); } public AbstractScesimGridModel(); public AbstractScesimGridModel(boolean); public abstract GridWidget getGridWidget(); public void bindContent(T); public void setEventBus(EventBus); public int nextColumnCount(); public Map.Entry<String, String> getValidPlaceholders(); public CollectionEditorSingletonDOMElementFactory getCollectionEditorSingletonDOMElementFactory(); public void setCollectionEditorSingletonDOMElementFactory(CollectionEditorSingletonDOMElementFactory); public ScenarioCellTextAreaSingletonDOMElementFactory getScenarioCellTextAreaSingletonDOMElementFactory(); public void setScenarioCellTextAreaSingletonDOMElementFactory(ScenarioCellTextAreaSingletonDOMElementFactory); public ScenarioHeaderTextBoxSingletonDOMElementFactory getScenarioHeaderTextBoxSingletonDOMElementFactory(); public void setScenarioHeaderTextBoxSingletonDOMElementFactory(ScenarioHeaderTextBoxSingletonDOMElementFactory); public ScenarioExpressionCellTextAreaSingletonDOMElementFactory getScenarioExpressionCellTextAreaSingletonDOMElementFactory(); public void setScenarioExpressionCellTextAreaSingletonDOMElementFactory(ScenarioExpressionCellTextAreaSingletonDOMElementFactory); public void destroyAllTextAreaDOMElementFactoryResources(); @Override public void appendRow(GridRow); public abstract void insertRowGridOnly(int, GridRow, E); public void insertRowGridOnly(int, GridRow); @Override public void insertRow(int, GridRow); @Override public Range deleteRow(int); public void duplicateRow(int, GridRow); public void duplicateColumnValues(int, int); public void insertColumnGridOnly(int, GridColumn<?>); @Override public void insertColumn(int, GridColumn<?>); public void deleteColumn(int); public void deleteInstance(int); public void updateColumnInstance(int, GridColumn<?>); public void updateColumnProperty(int, GridColumn<?>, List<String>, String, boolean, FactMappingValueType, ScenarioSimulationModel.Type); protected void replaceColumn(int, GridColumn<?>); public Range setCellGridOnly(int, int, Supplier<GridCell<?>>); @Override public Range setCell(int, int, Supplier<GridCell<?>>); @Override public Range setCellValue(int, int, GridCellValue<?>); @Override public Range deleteCell(int, int); public abstract Range getInstanceLimits(int); public List<ScenarioGridColumn> getInstanceScenarioGridColumns(int); public List<ScenarioGridColumn> getInstanceScenarioGridColumns(ScenarioGridColumn); public int getFirstIndexLeftOfGroup(String); public int getFirstIndexRightOfGroup(String); public long getGroupSize(String); public int getInstancesCount(String); public void updateHeader(int, int, String); public void clear(); @Override public void clearSelections(); public boolean forceRefreshWidth(); public void synchronizeFactMappingsWidths(); public void synchronizeFactMappingWidth(GridColumn<?>); public void loadFactMappingsWidth(); public void selectColumn(int); public void selectRow(int); public GridColumn<?> getSelectedColumn(); public Optional<T> getAbstractScesimModel(); public boolean isSelectedColumnEmpty(); public boolean isColumnEmpty(int); public boolean isAlreadyAssignedProperty(List<String>); public void checkAlreadyAssignedProperty(int, List<String>); public boolean isSameSelectedColumnProperty(List<String>, FactMappingValueType); public boolean isSameSelectedColumnProperty(int, List<String>, FactMappingValueType); public boolean isSameSelectedColumnType(String); public boolean isSameSelectedColumnType(int, String); public boolean isSameInstanceType(String); public void checkSameInstanceHeader(int, String); public boolean isSameInstanceType(int, String); public void checkSamePropertyHeader(int, List<String>); public void resetErrors(); public void resetErrors(int); public void resetError(int, int); public void refreshErrors(); public void setSimpleJavaTypeInstancesName(Set<String>); public void validateInstanceHeaderUpdate(String, int, boolean); public void validatePropertyHeaderUpdate(String, int, boolean); public boolean isSimpleType(String); protected Range getInstanceLimits(int, int); protected void updateFactMapping(ScesimModelDescriptor, FactMapping, int, String, ScenarioHeaderMetaData.MetadataType); protected void commonAddColumn(int, GridColumn<?>); protected void commonAddColumn(int, GridColumn<?>, ExpressionIdentifier); protected abstract void commonAddRow(int); protected void commonAddRow(int, int); protected void updateIndexColumn(); protected void checkSimulation(); protected void checkValidAndUniqueInstanceHeaderTitle(String, int); protected void checkValidAndUniquePropertyHeaderTitle(String, int); protected void checkUniquePropertyHeaderTitle(String, int); protected boolean isNewInstanceName(String); protected boolean isNewPropertyName(String); protected void refreshErrorsRow(int); public BaseSingletonDOMElementFactory getDOMElementFactory(String, ScenarioSimulationModel.Type, FactMappingValueType); public static final int HEADER_ROW_COUNT = 3; protected T abstractScesimModel; protected EventBus eventBus; protected AtomicInteger columnCounter = new AtomicInteger(0); protected GridColumn<?> selectedColumn = null; protected Set<String> simpleJavaTypeInstancesName; protected CollectionEditorSingletonDOMElementFactory collectionEditorSingletonDOMElementFactory; protected ScenarioCellTextAreaSingletonDOMElementFactory scenarioCellTextAreaSingletonDOMElementFactory; protected ScenarioHeaderTextBoxSingletonDOMElementFactory scenarioHeaderTextBoxSingletonDOMElementFactory; protected ScenarioExpressionCellTextAreaSingletonDOMElementFactory scenarioExpressionCellTextAreaSingletonDOMElementFactory; }",<FCTX>AbstractScesimGridModel extends BaseGridData { public void bindContent(T abstractScesimModel) { this.abstractScesimModel = abstractScesimModel; checkSimulation(); columnCounter.set(abstractScesimModel.getScesimModelDescriptor().getUnmodifiableFactMappings().size()); } public AbstractScesimGridModel(); public AbstractScesimGridModel(boolean); }</FCTX> <ECTX></ECTX>,<FCTX>AbstractScesimGridModel extends BaseGridData { public void bindContent(T abstractScesimModel) { this.abstractScesimModel = abstractScesimModel; checkSimulation(); columnCounter.set(abstractScesimModel.getScesimModelDescriptor().getUnmodifiableFactMappings().size()); } public AbstractScesimGridModel(); public AbstractScesimGridModel(boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import java.util.AbstractMap;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collections;|import java.util.List;|import java.util.Map;|import java.util.Objects;|import java.util.Optional;|import java.util.OptionalDouble;|import java.util.Set;|import java.util.concurrent.atomic.AtomicInteger;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import com.google.gwt.event.shared.EventBus;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.ExpressionElement;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.FactMappingValueType;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioGridReloadEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.CollectionEditorSingletonDOMElementFactory;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioCellTextAreaSingletonDOMElementFactory;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioExpressionCellTextAreaSingletonDOMElementFactory;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioHeaderTextBoxSingletonDOMElementFactory;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.values.ScenarioGridCellValue;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridCell;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridCell;|import org.uberfire.ext.wires.core.grids.client.model.GridCellValue;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridRow;|import org.uberfire.ext.wires.core.grids.client.model.impl.BaseGridData;|import org.uberfire.ext.wires.core.grids.client.widget.dom.single.impl.BaseSingletonDOMElementFactory;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.getPropertyNameElementsWithoutAlias;,import java.util.Arrays;|import java.util.List;|import java.util.Map;|import java.util.Optional;|import java.util.function.Supplier;|import java.util.stream.IntStream;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.ExpressionElement;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.FactMappingValueType;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.AbstractScenarioSimulationTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.values.ScenarioGridCellValue;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridCell;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridCell;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridRow;|import org.uberfire.ext.wires.core.grids.client.model.impl.BaseGridRow;|import org.uberfire.ext.wires.core.grids.client.widget.dom.single.impl.BaseSingletonDOMElementFactory;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_NUMBER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_CELL_TEXT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_COLUMN_GROUP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_COLUMN_ID;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_COLUMN_TITLE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_PROPERTY_TITLE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_ROWS;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.HEADER_META_DATA;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MULTIPART_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MULTIPART_VALUE_ELEMENTS;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_COUNT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.VALUE_CLASS_NAME;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.junit.Assert.fail;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyDouble;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.atLeast;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.doThrow;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
"@Test public void setEventBus() { abstractScesimGridModelSpy.setEventBus(eventBusMock); assertEquals(eventBusMock, abstractScesimGridModelSpy.eventBus); }","AbstractScesimGridModel extends BaseGridData { public void setEventBus(EventBus eventBus) { this.eventBus = eventBus; } public AbstractScesimGridModel(); public AbstractScesimGridModel(boolean); public abstract GridWidget getGridWidget(); public void bindContent(T); public void setEventBus(EventBus); public int nextColumnCount(); public Map.Entry<String, String> getValidPlaceholders(); public CollectionEditorSingletonDOMElementFactory getCollectionEditorSingletonDOMElementFactory(); public void setCollectionEditorSingletonDOMElementFactory(CollectionEditorSingletonDOMElementFactory); public ScenarioCellTextAreaSingletonDOMElementFactory getScenarioCellTextAreaSingletonDOMElementFactory(); public void setScenarioCellTextAreaSingletonDOMElementFactory(ScenarioCellTextAreaSingletonDOMElementFactory); public ScenarioHeaderTextBoxSingletonDOMElementFactory getScenarioHeaderTextBoxSingletonDOMElementFactory(); public void setScenarioHeaderTextBoxSingletonDOMElementFactory(ScenarioHeaderTextBoxSingletonDOMElementFactory); public ScenarioExpressionCellTextAreaSingletonDOMElementFactory getScenarioExpressionCellTextAreaSingletonDOMElementFactory(); public void setScenarioExpressionCellTextAreaSingletonDOMElementFactory(ScenarioExpressionCellTextAreaSingletonDOMElementFactory); public void destroyAllTextAreaDOMElementFactoryResources(); @Override public void appendRow(GridRow); public abstract void insertRowGridOnly(int, GridRow, E); public void insertRowGridOnly(int, GridRow); @Override public void insertRow(int, GridRow); @Override public Range deleteRow(int); public void duplicateRow(int, GridRow); public void duplicateColumnValues(int, int); public void insertColumnGridOnly(int, GridColumn<?>); @Override public void insertColumn(int, GridColumn<?>); public void deleteColumn(int); public void deleteInstance(int); public void updateColumnInstance(int, GridColumn<?>); public void updateColumnProperty(int, GridColumn<?>, List<String>, String, boolean, FactMappingValueType, ScenarioSimulationModel.Type); protected void replaceColumn(int, GridColumn<?>); public Range setCellGridOnly(int, int, Supplier<GridCell<?>>); @Override public Range setCell(int, int, Supplier<GridCell<?>>); @Override public Range setCellValue(int, int, GridCellValue<?>); @Override public Range deleteCell(int, int); public abstract Range getInstanceLimits(int); public List<ScenarioGridColumn> getInstanceScenarioGridColumns(int); public List<ScenarioGridColumn> getInstanceScenarioGridColumns(ScenarioGridColumn); public int getFirstIndexLeftOfGroup(String); public int getFirstIndexRightOfGroup(String); public long getGroupSize(String); public int getInstancesCount(String); public void updateHeader(int, int, String); public void clear(); @Override public void clearSelections(); public boolean forceRefreshWidth(); public void synchronizeFactMappingsWidths(); public void synchronizeFactMappingWidth(GridColumn<?>); public void loadFactMappingsWidth(); public void selectColumn(int); public void selectRow(int); public GridColumn<?> getSelectedColumn(); public Optional<T> getAbstractScesimModel(); public boolean isSelectedColumnEmpty(); public boolean isColumnEmpty(int); public boolean isAlreadyAssignedProperty(List<String>); public void checkAlreadyAssignedProperty(int, List<String>); public boolean isSameSelectedColumnProperty(List<String>, FactMappingValueType); public boolean isSameSelectedColumnProperty(int, List<String>, FactMappingValueType); public boolean isSameSelectedColumnType(String); public boolean isSameSelectedColumnType(int, String); public boolean isSameInstanceType(String); public void checkSameInstanceHeader(int, String); public boolean isSameInstanceType(int, String); public void checkSamePropertyHeader(int, List<String>); public void resetErrors(); public void resetErrors(int); public void resetError(int, int); public void refreshErrors(); public void setSimpleJavaTypeInstancesName(Set<String>); public void validateInstanceHeaderUpdate(String, int, boolean); public void validatePropertyHeaderUpdate(String, int, boolean); public boolean isSimpleType(String); protected Range getInstanceLimits(int, int); protected void updateFactMapping(ScesimModelDescriptor, FactMapping, int, String, ScenarioHeaderMetaData.MetadataType); protected void commonAddColumn(int, GridColumn<?>); protected void commonAddColumn(int, GridColumn<?>, ExpressionIdentifier); protected abstract void commonAddRow(int); protected void commonAddRow(int, int); protected void updateIndexColumn(); protected void checkSimulation(); protected void checkValidAndUniqueInstanceHeaderTitle(String, int); protected void checkValidAndUniquePropertyHeaderTitle(String, int); protected void checkUniquePropertyHeaderTitle(String, int); protected boolean isNewInstanceName(String); protected boolean isNewPropertyName(String); protected void refreshErrorsRow(int); public BaseSingletonDOMElementFactory getDOMElementFactory(String, ScenarioSimulationModel.Type, FactMappingValueType); public static final int HEADER_ROW_COUNT = 3; protected T abstractScesimModel; protected EventBus eventBus; protected AtomicInteger columnCounter = new AtomicInteger(0); protected GridColumn<?> selectedColumn = null; protected Set<String> simpleJavaTypeInstancesName; protected CollectionEditorSingletonDOMElementFactory collectionEditorSingletonDOMElementFactory; protected ScenarioCellTextAreaSingletonDOMElementFactory scenarioCellTextAreaSingletonDOMElementFactory; protected ScenarioHeaderTextBoxSingletonDOMElementFactory scenarioHeaderTextBoxSingletonDOMElementFactory; protected ScenarioExpressionCellTextAreaSingletonDOMElementFactory scenarioExpressionCellTextAreaSingletonDOMElementFactory; }",<FCTX>AbstractScesimGridModel extends BaseGridData { public void setEventBus(EventBus eventBus) { this.eventBus = eventBus; } public AbstractScesimGridModel(); public AbstractScesimGridModel(boolean); }</FCTX> <ECTX></ECTX>,<FCTX>AbstractScesimGridModel extends BaseGridData { public void setEventBus(EventBus eventBus) { this.eventBus = eventBus; } public AbstractScesimGridModel(); public AbstractScesimGridModel(boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>,import java.util.AbstractMap;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collections;|import java.util.List;|import java.util.Map;|import java.util.Objects;|import java.util.Optional;|import java.util.OptionalDouble;|import java.util.Set;|import java.util.concurrent.atomic.AtomicInteger;|import java.util.function.Supplier;|import java.util.stream.Collectors;|import java.util.stream.IntStream;|import com.google.gwt.event.shared.EventBus;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.AbstractScesimModel;|import org.drools.scenariosimulation.api.model.ExpressionElement;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingType;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.FactMappingValueType;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.scenariosimulation.api.model.ScesimModelDescriptor;|import org.drools.scenariosimulation.api.utils.ScenarioSimulationSharedUtils;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioGridReloadEvent;|import org.drools.workbench.screens.scenariosimulation.client.events.ScenarioNotificationEvent;|import org.drools.workbench.screens.scenariosimulation.client.factories.CollectionEditorSingletonDOMElementFactory;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioCellTextAreaSingletonDOMElementFactory;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioExpressionCellTextAreaSingletonDOMElementFactory;|import org.drools.workbench.screens.scenariosimulation.client.factories.ScenarioHeaderTextBoxSingletonDOMElementFactory;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.resources.i18n.ScenarioSimulationEditorConstants;|import org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils;|import org.drools.workbench.screens.scenariosimulation.client.values.ScenarioGridCellValue;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridCell;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridCell;|import org.uberfire.ext.wires.core.grids.client.model.GridCellValue;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridRow;|import org.uberfire.ext.wires.core.grids.client.model.impl.BaseGridData;|import org.uberfire.ext.wires.core.grids.client.widget.dom.single.impl.BaseSingletonDOMElementFactory;|import org.uberfire.workbench.events.NotificationEvent;|import static org.drools.workbench.screens.scenariosimulation.client.utils.ScenarioSimulationUtils.getPropertyNameElementsWithoutAlias;,import java.util.Arrays;|import java.util.List;|import java.util.Map;|import java.util.Optional;|import java.util.function.Supplier;|import java.util.stream.IntStream;|import com.ait.lienzo.test.LienzoMockitoTestRunner;|import org.drools.scenariosimulation.api.model.AbstractScesimData;|import org.drools.scenariosimulation.api.model.ExpressionElement;|import org.drools.scenariosimulation.api.model.ExpressionIdentifier;|import org.drools.scenariosimulation.api.model.FactIdentifier;|import org.drools.scenariosimulation.api.model.FactMapping;|import org.drools.scenariosimulation.api.model.FactMappingValue;|import org.drools.scenariosimulation.api.model.FactMappingValueStatus;|import org.drools.scenariosimulation.api.model.FactMappingValueType;|import org.drools.scenariosimulation.api.model.Scenario;|import org.drools.scenariosimulation.api.model.ScenarioSimulationModel;|import org.drools.workbench.screens.scenariosimulation.client.AbstractScenarioSimulationTest;|import org.drools.workbench.screens.scenariosimulation.client.enums.GridWidget;|import org.drools.workbench.screens.scenariosimulation.client.events.ReloadTestToolsEvent;|import org.drools.workbench.screens.scenariosimulation.client.metadata.ScenarioHeaderMetaData;|import org.drools.workbench.screens.scenariosimulation.client.values.ScenarioGridCellValue;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridCell;|import org.drools.workbench.screens.scenariosimulation.client.widgets.ScenarioGridColumn;|import org.junit.Before;|import org.junit.Test;|import org.junit.runner.RunWith;|import org.mockito.Mock;|import org.uberfire.ext.wires.core.grids.client.model.GridCell;|import org.uberfire.ext.wires.core.grids.client.model.GridColumn;|import org.uberfire.ext.wires.core.grids.client.model.GridRow;|import org.uberfire.ext.wires.core.grids.client.model.impl.BaseGridRow;|import org.uberfire.ext.wires.core.grids.client.widget.dom.single.impl.BaseSingletonDOMElementFactory;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.COLUMN_NUMBER;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.FULL_CLASS_NAME;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_CELL_TEXT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_COLUMN_GROUP;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_COLUMN_ID;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_COLUMN_TITLE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_PROPERTY_TITLE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.GRID_ROWS;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.HEADER_META_DATA;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MULTIPART_VALUE;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.MULTIPART_VALUE_ELEMENTS;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_COUNT;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.ROW_INDEX;|import static org.drools.workbench.screens.scenariosimulation.client.TestProperties.VALUE_CLASS_NAME;|import static org.junit.Assert.assertEquals;|import static org.junit.Assert.assertFalse;|import static org.junit.Assert.assertNotNull;|import static org.junit.Assert.assertSame;|import static org.junit.Assert.assertTrue;|import static org.junit.Assert.fail;|import static org.mockito.ArgumentMatchers.any;|import static org.mockito.ArgumentMatchers.anyDouble;|import static org.mockito.ArgumentMatchers.anyInt;|import static org.mockito.ArgumentMatchers.eq;|import static org.mockito.ArgumentMatchers.isA;|import static org.mockito.Mockito.atLeast;|import static org.mockito.Mockito.doNothing;|import static org.mockito.Mockito.doReturn;|import static org.mockito.Mockito.doThrow;|import static org.mockito.Mockito.mock;|import static org.mockito.Mockito.never;|import static org.mockito.Mockito.reset;|import static org.mockito.Mockito.spy;|import static org.mockito.Mockito.times;|import static org.mockito.Mockito.verify;|import static org.mockito.Mockito.when;
