id,project,version,number_method_by_version,modified_class,focal_class,path_focal_class_in_project,test_class,path_test_class_scaffolding,package_focal_class,imports_focal_class,src_fm_fc_ms_ff,src_fm_fc_dctx,src_fm_fc_dctx_priv
Cli_1_0_CommandLine,Cli,1,0,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public boolean hasOption(String opt) { return options.contains( resolveOption(opt)); } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public boolean hasOption(String opt) { return options.contains( resolveOption(opt)); } CommandLine(); private Option resolveOption(String); private Set options = new HashSet(); }</FCTX> <ECTX></ECTX>","<FCTX>CommandLine { public boolean hasOption(String opt) { return options.contains( resolveOption(opt)); } CommandLine(); <PRIVATE_FCTX>private Option resolveOption(String); private Set options = new HashSet();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_1_1_CommandLine,Cli,1,1,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public boolean hasOption(char opt) { return hasOption(String.valueOf(opt)); } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public boolean hasOption(char opt) { return hasOption(String.valueOf(opt)); } CommandLine(); }</FCTX> <ECTX></ECTX>","<FCTX>CommandLine { public boolean hasOption(char opt) { return hasOption(String.valueOf(opt)); } CommandLine(); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_1_2_CommandLine,Cli,1,2,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public String[] getArgs() { String[] answer = new String[args.size()]; args.toArray(answer); return answer; } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public String[] getArgs() { String[] answer = new String[args.size()]; args.toArray(answer); return answer; } CommandLine(); private List args = new LinkedList(); }</FCTX> <ECTX></ECTX>","<FCTX>CommandLine { public String[] getArgs() { String[] answer = new String[args.size()]; args.toArray(answer); return answer; } CommandLine(); <PRIVATE_FCTX>private List args = new LinkedList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_1_3_CommandLine,Cli,1,3,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public List getArgList() { return args; } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public List getArgList() { return args; } CommandLine(); }</FCTX> <ECTX></ECTX>","<FCTX>CommandLine { public List getArgList() { return args; } CommandLine(); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_1_4_CommandLine,Cli,1,4,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public Iterator iterator() { return options.iterator(); } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public Iterator iterator() { return options.iterator(); } CommandLine(); private Set options = new HashSet(); }</FCTX> <ECTX></ECTX>","<FCTX>CommandLine { public Iterator iterator() { return options.iterator(); } CommandLine(); <PRIVATE_FCTX>private Set options = new HashSet();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_1_5_CommandLine,Cli,1,5,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public Option[] getOptions() { Collection processed = options; Option[] optionsArray = new Option[processed.size()]; return (Option[]) processed.toArray(optionsArray); } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public Option[] getOptions() { Collection processed = options; Option[] optionsArray = new Option[processed.size()]; return (Option[]) processed.toArray(optionsArray); } CommandLine(); private Set options = new HashSet(); }</FCTX> <ECTX></ECTX>","<FCTX>CommandLine { public Option[] getOptions() { Collection processed = options; Option[] optionsArray = new Option[processed.size()]; return (Option[]) processed.toArray(optionsArray); } CommandLine(); <PRIVATE_FCTX>private Set options = new HashSet();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_1_6_CommandLine,Cli,1,6,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public Object getOptionObject(String opt) { String res = getOptionValue(opt); Option option = resolveOption(opt); if (option == null) { return null; } Object type = option.getType(); return (res == null) ? null : TypeHandler.createValue(res, type); } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public Object getOptionObject(String opt) { String res = getOptionValue(opt); Option option = resolveOption(opt); if (option == null) { return null; } Object type = option.getType(); return (res == null) ? null : TypeHandler.createValue(res, type); } CommandLine(); private Option resolveOption(String); }</FCTX> <ECTX>public class Option { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public Object getType(); } public class TypeHandler { public static Object createValue(String, Object); }</ECTX>","<FCTX>CommandLine { public Object getOptionObject(String opt) { String res = getOptionValue(opt); Option option = resolveOption(opt); if (option == null) { return null; } Object type = option.getType(); return (res == null) ? null : TypeHandler.createValue(res, type); } CommandLine(); <PRIVATE_FCTX>private Option resolveOption(String);</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public Object getType(); } public class TypeHandler { public static Object createValue(String, Object); }</ECTX>"
Cli_1_7_CommandLine,Cli,1,7,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public Object getOptionObject(char opt) { return getOptionObject(String.valueOf(opt)); } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public Object getOptionObject(char opt) { return getOptionObject(String.valueOf(opt)); } CommandLine(); }</FCTX> <ECTX></ECTX>","<FCTX>CommandLine { public Object getOptionObject(char opt) { return getOptionObject(String.valueOf(opt)); } CommandLine(); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_1_8_CommandLine,Cli,1,8,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public String getOptionValue(String opt) { String[] values = getOptionValues(opt); return (values == null) ? null : values[0]; } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public String getOptionValue(String opt) { String[] values = getOptionValues(opt); return (values == null) ? null : values[0]; } CommandLine(); }</FCTX> <ECTX></ECTX>","<FCTX>CommandLine { public String getOptionValue(String opt) { String[] values = getOptionValues(opt); return (values == null) ? null : values[0]; } CommandLine(); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_1_9_CommandLine,Cli,1,9,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public String getOptionValue(char opt) { return getOptionValue(String.valueOf(opt)); } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public String getOptionValue(char opt) { return getOptionValue(String.valueOf(opt)); } CommandLine(); }</FCTX> <ECTX></ECTX>","<FCTX>CommandLine { public String getOptionValue(char opt) { return getOptionValue(String.valueOf(opt)); } CommandLine(); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_1_10_CommandLine,Cli,1,10,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public String[] getOptionValues(String opt) { Option key = resolveOption( opt ); if (options.contains(key)) { return key.getValues(); } return null; } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public String[] getOptionValues(String opt) { Option key = resolveOption( opt ); if (options.contains(key)) { return key.getValues(); } return null; } CommandLine(); private Option resolveOption(String); private Set options = new HashSet(); }</FCTX> <ECTX>public class Option { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public String[] getValues(); }</ECTX>","<FCTX>CommandLine { public String[] getOptionValues(String opt) { Option key = resolveOption( opt ); if (options.contains(key)) { return key.getValues(); } return null; } CommandLine(); <PRIVATE_FCTX>private Option resolveOption(String); private Set options = new HashSet();</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public String[] getValues(); }</ECTX>"
Cli_1_11_CommandLine,Cli,1,11,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public String[] getOptionValues(char opt) { return getOptionValues(String.valueOf(opt)); } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public String[] getOptionValues(char opt) { return getOptionValues(String.valueOf(opt)); } CommandLine(); }</FCTX> <ECTX></ECTX>","<FCTX>CommandLine { public String[] getOptionValues(char opt) { return getOptionValues(String.valueOf(opt)); } CommandLine(); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_1_12_CommandLine,Cli,1,12,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public String getOptionValue(String opt, String defaultValue) { String answer = getOptionValue(opt); return (answer != null) ? answer : defaultValue; } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public String getOptionValue(String opt, String defaultValue) { String answer = getOptionValue(opt); return (answer != null) ? answer : defaultValue; } CommandLine(); }</FCTX> <ECTX></ECTX>","<FCTX>CommandLine { public String getOptionValue(String opt, String defaultValue) { String answer = getOptionValue(opt); return (answer != null) ? answer : defaultValue; } CommandLine(); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_1_13_CommandLine,Cli,1,13,org.apache.commons.cli.CommandLine,CommandLine,src/java/org/apache/commons/cli/CommandLine.java,CommandLine_ESTest,org/apache/commons/cli/CommandLine_ESTest.java,"package org.apache.commons.cli;","import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedList;|import java.util.List;|import java.util.Set;|import java.util.HashSet;","CommandLine { public String getOptionValue(char opt, String defaultValue) { return getOptionValue(String.valueOf(opt), defaultValue); } CommandLine(); public boolean hasOption(String); public boolean hasOption(char); public Object getOptionObject(String); public Object getOptionObject(char); public String getOptionValue(String); public String getOptionValue(char); public String[] getOptionValues(String); public String[] getOptionValues(char); public String getOptionValue(String, String); public String getOptionValue(char, String); public String[] getArgs(); public List getArgList(); void addArg(String); void addOption(Option); public Iterator iterator(); public Option[] getOptions(); }","<FCTX>CommandLine { public String getOptionValue(char opt, String defaultValue) { return getOptionValue(String.valueOf(opt), defaultValue); } CommandLine(); }</FCTX> <ECTX></ECTX>","<FCTX>CommandLine { public String getOptionValue(char opt, String defaultValue) { return getOptionValue(String.valueOf(opt), defaultValue); } CommandLine(); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_3_0_TypeHandler,Cli,3,0,org.apache.commons.cli.TypeHandler,TypeHandler,src/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Object createValue(String str, Object obj) { return createValue(str, (Class) obj); } public static Object createValue(String, Object); public static Object createValue(String, Class); public static Object createObject(String); public static Number createNumber(String); public static Class createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Object createValue(String str, Object obj) { return createValue(str, (Class) obj); } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Object createValue(String str, Object obj) { return createValue(str, (Class) obj); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_3_1_TypeHandler,Cli,3,1,org.apache.commons.cli.TypeHandler,TypeHandler,src/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Object createValue(String str, Class clazz) { if (PatternOptionBuilder.STRING_VALUE == clazz) { return str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return createFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return createURL(str); } else { return null; } } public static Object createValue(String, Object); public static Object createValue(String, Class); public static Object createObject(String); public static Number createNumber(String); public static Class createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Object createValue(String str, Class clazz) { if (PatternOptionBuilder.STRING_VALUE == clazz) { return str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return createFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return createURL(str); } else { return null; } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Object createValue(String str, Class clazz) { if (PatternOptionBuilder.STRING_VALUE == clazz) { return str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return createFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return createURL(str); } else { return null; } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_3_2_TypeHandler,Cli,3,2,org.apache.commons.cli.TypeHandler,TypeHandler,src/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Object createObject(String str) { Class cl = null; try { cl = Class.forName(str); } catch (ClassNotFoundException cnfe) { System.err.println(""Unable to find: "" + str); return null; } Object instance = null; try { instance = cl.newInstance(); } catch (InstantiationException cnfe) { System.err.println(""InstantiationException; Unable to create: "" + str); return null; } catch (IllegalAccessException cnfe) { System.err.println(""IllegalAccessException; Unable to create: "" + str); return null; } return instance; } public static Object createValue(String, Object); public static Object createValue(String, Class); public static Object createObject(String); public static Number createNumber(String); public static Class createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Object createObject(String str) { Class cl = null; try { cl = Class.forName(str); } catch (ClassNotFoundException cnfe) { System.err.println(""Unable to find: "" + str); return null; } Object instance = null; try { instance = cl.newInstance(); } catch (InstantiationException cnfe) { System.err.println(""InstantiationException; Unable to create: "" + str); return null; } catch (IllegalAccessException cnfe) { System.err.println(""IllegalAccessException; Unable to create: "" + str); return null; } return instance; } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Object createObject(String str) { Class cl = null; try { cl = Class.forName(str); } catch (ClassNotFoundException cnfe) { System.err.println(""Unable to find: "" + str); return null; } Object instance = null; try { instance = cl.newInstance(); } catch (InstantiationException cnfe) { System.err.println(""InstantiationException; Unable to create: "" + str); return null; } catch (IllegalAccessException cnfe) { System.err.println(""IllegalAccessException; Unable to create: "" + str); return null; } return instance; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_3_3_TypeHandler,Cli,3,3,org.apache.commons.cli.TypeHandler,TypeHandler,src/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Number createNumber(String str) { try { if( str != null ) { if( str.indexOf('.') != -1 ) { return Double.valueOf(str); } else { return Long.valueOf(str); } } } catch (NumberFormatException nfe) { System.err.println(nfe.getMessage()); } return null; } public static Object createValue(String, Object); public static Object createValue(String, Class); public static Object createObject(String); public static Number createNumber(String); public static Class createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Number createNumber(String str) { try { if( str != null ) { if( str.indexOf('.') != -1 ) { return Double.valueOf(str); } else { return Long.valueOf(str); } } } catch (NumberFormatException nfe) { System.err.println(nfe.getMessage()); } return null; } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Number createNumber(String str) { try { if( str != null ) { if( str.indexOf('.') != -1 ) { return Double.valueOf(str); } else { return Long.valueOf(str); } } } catch (NumberFormatException nfe) { System.err.println(nfe.getMessage()); } return null; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_3_4_TypeHandler,Cli,3,4,org.apache.commons.cli.TypeHandler,TypeHandler,src/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Class createClass(String str) { try { return Class.forName(str); } catch (ClassNotFoundException cnfe) { System.err.println(""Unable to find: "" + str); return null; } } public static Object createValue(String, Object); public static Object createValue(String, Class); public static Object createObject(String); public static Number createNumber(String); public static Class createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Class createClass(String str) { try { return Class.forName(str); } catch (ClassNotFoundException cnfe) { System.err.println(""Unable to find: "" + str); return null; } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Class createClass(String str) { try { return Class.forName(str); } catch (ClassNotFoundException cnfe) { System.err.println(""Unable to find: "" + str); return null; } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_3_5_TypeHandler,Cli,3,5,org.apache.commons.cli.TypeHandler,TypeHandler,src/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Date createDate(String str) { Date date = null; if (date == null) { System.err.println(""Unable to parse: "" + str); } return date; } public static Object createValue(String, Object); public static Object createValue(String, Class); public static Object createObject(String); public static Number createNumber(String); public static Class createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Date createDate(String str) { Date date = null; if (date == null) { System.err.println(""Unable to parse: "" + str); } return date; } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Date createDate(String str) { Date date = null; if (date == null) { System.err.println(""Unable to parse: "" + str); } return date; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_3_6_TypeHandler,Cli,3,6,org.apache.commons.cli.TypeHandler,TypeHandler,src/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static URL createURL(String str) { try { return new URL(str); } catch (MalformedURLException mue) { System.err.println(""Unable to parse: "" + str); return null; } } public static Object createValue(String, Object); public static Object createValue(String, Class); public static Object createObject(String); public static Number createNumber(String); public static Class createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static URL createURL(String str) { try { return new URL(str); } catch (MalformedURLException mue) { System.err.println(""Unable to parse: "" + str); return null; } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static URL createURL(String str) { try { return new URL(str); } catch (MalformedURLException mue) { System.err.println(""Unable to parse: "" + str); return null; } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_3_7_TypeHandler,Cli,3,7,org.apache.commons.cli.TypeHandler,TypeHandler,src/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static File createFile(String str) { return new File(str); } public static Object createValue(String, Object); public static Object createValue(String, Class); public static Object createObject(String); public static Number createNumber(String); public static Class createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static File createFile(String str) { return new File(str); } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static File createFile(String str) { return new File(str); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_3_8_TypeHandler,Cli,3,8,org.apache.commons.cli.TypeHandler,TypeHandler,src/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static File[] createFiles(String str) { return null; } public static Object createValue(String, Object); public static Object createValue(String, Class); public static Object createObject(String); public static Number createNumber(String); public static Class createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static File[] createFiles(String str) { return null; } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static File[] createFiles(String str) { return null; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_4_0_Parser,Cli,4,0,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); public void processArgs(Option, ListIterator); }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_4_1_Parser,Cli,4,1,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); public void processArgs(Option, ListIterator); }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_4_2_Parser,Cli,4,2,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); public void processArgs(Option, ListIterator); }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_4_3_Parser,Cli,4,3,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !options.hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); public void processArgs(Option, ListIterator); }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !options.hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } private void processOption(String, ListIterator); private void processProperties(Properties); private void checkRequiredOptions(); private CommandLine cmd; private Options options; private List requiredOptions; }</FCTX> <ECTX>public class CommandLine { CommandLine(); void addArg(String); } public class Option { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void clearValues(); } public class Options { public Options(); List helpOptions(); public List getRequiredOptions(); public boolean hasOption(String); }</ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions(); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !options.hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } <PRIVATE_FCTX>private void processOption(String, ListIterator); private void processProperties(Properties); private void checkRequiredOptions(); private CommandLine cmd; private Options options; private List requiredOptions;</PRIVATE_FCTX> }</FCTX> <ECTX>public class CommandLine { CommandLine(); void addArg(String); } public class Option { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void clearValues(); } public class Options { public Options(); List helpOptions(); public List getRequiredOptions(); public boolean hasOption(String); }</ECTX>"
Cli_4_4_Parser,Cli,4,4,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (options.hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValue( Util.stripLeadingAndTrailingQuotes(str) ); } catch (RuntimeException exp) { iter.previous(); break; } } if ((opt.getValues() == null) && !opt.hasOptionalArg()) { throw new MissingArgumentException(""Missing argument for option:"" + opt.getKey()); } } protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); public void processArgs(Option, ListIterator); }","<FCTX>Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (options.hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValue( Util.stripLeadingAndTrailingQuotes(str) ); } catch (RuntimeException exp) { iter.previous(); break; } } if ((opt.getValues() == null) && !opt.hasOptionalArg()) { throw new MissingArgumentException(""Missing argument for option:"" + opt.getKey()); } } private Options options; }</FCTX> <ECTX>public class Option { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void addValue(String); public String[] getValues(); public boolean hasOptionalArg(); String getKey(); } public class Options { public Options(); public boolean hasOption(String); } class Util { static String stripLeadingAndTrailingQuotes(String); }</ECTX>","<FCTX>Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (options.hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValue( Util.stripLeadingAndTrailingQuotes(str) ); } catch (RuntimeException exp) { iter.previous(); break; } } if ((opt.getValues() == null) && !opt.hasOptionalArg()) { throw new MissingArgumentException(""Missing argument for option:"" + opt.getKey()); } } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void addValue(String); public String[] getValues(); public boolean hasOptionalArg(); String getKey(); } public class Options { public Options(); public boolean hasOption(String); } class Util { static String stripLeadingAndTrailingQuotes(String); }</ECTX>"
Cli_7_0_PatternBuilder,Cli,7,0,org.apache.commons.cli2.builder.PatternBuilder,PatternBuilder,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,PatternBuilder_ESTest,org/apache/commons/cli2/builder/PatternBuilder_ESTest.java,"package org.apache.commons.cli2.builder;","import java.util.Iterator;|import java.util.LinkedHashSet;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.validation.ClassValidator;|import org.apache.commons.cli2.validation.DateValidator;|import org.apache.commons.cli2.validation.FileValidator;|import org.apache.commons.cli2.validation.NumberValidator;|import org.apache.commons.cli2.validation.UrlValidator;|import org.apache.commons.cli2.validation.Validator;","PatternBuilder { public Option create() { final Option option; if (options.size() == 1) { option = (Option)options.iterator().next(); } else { gbuilder.reset(); for (final Iterator i = options.iterator(); i.hasNext();) { gbuilder.withOption((Option)i.next()); } option = gbuilder.create(); } reset(); return option; } public PatternBuilder(); public PatternBuilder(GroupBuilder, DefaultOptionBuilder, ArgumentBuilder); public Option create(); public PatternBuilder reset(); public void withPattern(String); }","<FCTX>PatternBuilder { public Option create() { final Option option; if (options.size() == 1) { option = (Option)options.iterator().next(); } else { gbuilder.reset(); for (final Iterator i = options.iterator(); i.hasNext();) { gbuilder.withOption((Option)i.next()); } option = gbuilder.create(); } reset(); return option; } public PatternBuilder(); public PatternBuilder(GroupBuilder, DefaultOptionBuilder, ArgumentBuilder); private final GroupBuilder gbuilder; private final Set options = new LinkedHashSet(); }</FCTX> <ECTX>public class GroupBuilder { public GroupBuilder(); public GroupBuilder reset(); public GroupBuilder withOption(Option); public Group create(); }</ECTX>","<FCTX>PatternBuilder { public Option create() { final Option option; if (options.size() == 1) { option = (Option)options.iterator().next(); } else { gbuilder.reset(); for (final Iterator i = options.iterator(); i.hasNext();) { gbuilder.withOption((Option)i.next()); } option = gbuilder.create(); } reset(); return option; } public PatternBuilder(); public PatternBuilder(GroupBuilder, DefaultOptionBuilder, ArgumentBuilder); <PRIVATE_FCTX>private final GroupBuilder gbuilder; private final Set options = new LinkedHashSet();</PRIVATE_FCTX> }</FCTX> <ECTX>public class GroupBuilder { public GroupBuilder(); public GroupBuilder reset(); public GroupBuilder withOption(Option); public Group create(); }</ECTX>"
Cli_7_1_PatternBuilder,Cli,7,1,org.apache.commons.cli2.builder.PatternBuilder,PatternBuilder,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,PatternBuilder_ESTest,org/apache/commons/cli2/builder/PatternBuilder_ESTest.java,"package org.apache.commons.cli2.builder;","import java.util.Iterator;|import java.util.LinkedHashSet;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.validation.ClassValidator;|import org.apache.commons.cli2.validation.DateValidator;|import org.apache.commons.cli2.validation.FileValidator;|import org.apache.commons.cli2.validation.NumberValidator;|import org.apache.commons.cli2.validation.UrlValidator;|import org.apache.commons.cli2.validation.Validator;","PatternBuilder { public PatternBuilder reset() { options.clear(); return this; } public PatternBuilder(); public PatternBuilder(GroupBuilder, DefaultOptionBuilder, ArgumentBuilder); public Option create(); public PatternBuilder reset(); public void withPattern(String); }","<FCTX>PatternBuilder { public PatternBuilder reset() { options.clear(); return this; } public PatternBuilder(); public PatternBuilder(GroupBuilder, DefaultOptionBuilder, ArgumentBuilder); private final Set options = new LinkedHashSet(); }</FCTX> <ECTX></ECTX>","<FCTX>PatternBuilder { public PatternBuilder reset() { options.clear(); return this; } public PatternBuilder(); public PatternBuilder(GroupBuilder, DefaultOptionBuilder, ArgumentBuilder); <PRIVATE_FCTX>private final Set options = new LinkedHashSet();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_7_2_PatternBuilder,Cli,7,2,org.apache.commons.cli2.builder.PatternBuilder,PatternBuilder,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,PatternBuilder_ESTest,org/apache/commons/cli2/builder/PatternBuilder_ESTest.java,"package org.apache.commons.cli2.builder;","import java.util.Iterator;|import java.util.LinkedHashSet;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.validation.ClassValidator;|import org.apache.commons.cli2.validation.DateValidator;|import org.apache.commons.cli2.validation.FileValidator;|import org.apache.commons.cli2.validation.NumberValidator;|import org.apache.commons.cli2.validation.UrlValidator;|import org.apache.commons.cli2.validation.Validator;","PatternBuilder { public void withPattern(final String pattern) { int sz = pattern.length(); char opt = ' '; char ch = ' '; char type = ' '; boolean required = false; for (int i = 0; i < sz; i++) { ch = pattern.charAt(i); switch (ch) { case '!' : required = true; break; case '@' : case ':' : case '%' : case '+' : case '#' : case '<' : case '>' : case '*' : case '/' : type = ch; break; default : if (opt != ' ') { createOption(type, required, opt); required = false; type = ' '; } opt = ch; } } if (opt != ' ') { createOption(type, required, opt); } } public PatternBuilder(); public PatternBuilder(GroupBuilder, DefaultOptionBuilder, ArgumentBuilder); public Option create(); public PatternBuilder reset(); public void withPattern(String); }","<FCTX>PatternBuilder { public void withPattern(final String pattern) { int sz = pattern.length(); char opt = ' '; char ch = ' '; char type = ' '; boolean required = false; for (int i = 0; i < sz; i++) { ch = pattern.charAt(i); switch (ch) { case '!' : required = true; break; case '@' : case ':' : case '%' : case '+' : case '#' : case '<' : case '>' : case '*' : case '/' : type = ch; break; default : if (opt != ' ') { createOption(type, required, opt); required = false; type = ' '; } opt = ch; } } if (opt != ' ') { createOption(type, required, opt); } } public PatternBuilder(); public PatternBuilder(GroupBuilder, DefaultOptionBuilder, ArgumentBuilder); private void createOption(char, boolean, char); }</FCTX> <ECTX></ECTX>","<FCTX>PatternBuilder { public void withPattern(final String pattern) { int sz = pattern.length(); char opt = ' '; char ch = ' '; char type = ' '; boolean required = false; for (int i = 0; i < sz; i++) { ch = pattern.charAt(i); switch (ch) { case '!' : required = true; break; case '@' : case ':' : case '%' : case '+' : case '#' : case '<' : case '>' : case '*' : case '/' : type = ch; break; default : if (opt != ' ') { createOption(type, required, opt); required = false; type = ' '; } opt = ch; } } if (opt != ' ') { createOption(type, required, opt); } } public PatternBuilder(); public PatternBuilder(GroupBuilder, DefaultOptionBuilder, ArgumentBuilder); <PRIVATE_FCTX>private void createOption(char, boolean, char);</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_0_HelpFormatter,Cli,8,0,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_1_HelpFormatter,Cli,8,1,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getWidth() { return this.defaultWidth; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public int getWidth() { return this.defaultWidth; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getWidth() { return this.defaultWidth; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_2_HelpFormatter,Cli,8,2,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_3_HelpFormatter,Cli,8,3,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getOptPrefix() { return this.defaultOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public String getOptPrefix() { return this.defaultOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getOptPrefix() { return this.defaultOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_4_HelpFormatter,Cli,8,4,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_5_HelpFormatter,Cli,8,5,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getLongOptPrefix() { return this.defaultLongOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public String getLongOptPrefix() { return this.defaultLongOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getLongOptPrefix() { return this.defaultLongOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_6_HelpFormatter,Cli,8,6,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_7_HelpFormatter,Cli,8,7,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getArgName() { return this.defaultArgName; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public String getArgName() { return this.defaultArgName; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getArgName() { return this.defaultArgName; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_8_HelpFormatter,Cli,8,8,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_9_HelpFormatter,Cli,8,9,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_10_HelpFormatter,Cli,8,10,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_11_HelpFormatter,Cli,8,11,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_12_HelpFormatter,Cli,8,12,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_13_HelpFormatter,Cli,8,13,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_14_HelpFormatter,Cli,8,14,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_15_HelpFormatter,Cli,8,15,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_16_HelpFormatter,Cli,8,16,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_17_HelpFormatter,Cli,8,17,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, new OptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, new OptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } private static void appendOptionGroup(StringBuffer, OptionGroup); private static void appendOption(StringBuffer, Option, boolean); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Options(); public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, new OptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } <PRIVATE_FCTX>private static void appendOptionGroup(StringBuffer, OptionGroup); private static void appendOption(StringBuffer, Option, boolean);</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Options(); public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>"
Cli_8_18_HelpFormatter,Cli,8,18,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_19_HelpFormatter,Cli,8,19,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_20_HelpFormatter,Cli,8,20,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_21_HelpFormatter,Cli,8,21,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_22_HelpFormatter,Cli,8,22,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getLeftPadding() { return this.defaultLeftPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public int getLeftPadding() { return this.defaultLeftPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getLeftPadding() { return this.defaultLeftPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_23_HelpFormatter,Cli,8,23,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_24_HelpFormatter,Cli,8,24,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getDescPadding() { return this.defaultDescPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public int getDescPadding() { return this.defaultDescPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getDescPadding() { return this.defaultDescPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_25_HelpFormatter,Cli,8,25,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_26_HelpFormatter,Cli,8,26,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getSyntaxPrefix() { return this.defaultSyntaxPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return this.defaultSyntaxPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return this.defaultSyntaxPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_27_HelpFormatter,Cli,8,27,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_8_28_HelpFormatter,Cli,8,28,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getNewLine() { return this.defaultNewLine; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; }","<FCTX>HelpFormatter { public String getNewLine() { return this.defaultNewLine; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getNewLine() { return this.defaultNewLine; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_9_0_Parser,Cli,9,0,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_9_1_Parser,Cli,9,1,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_9_2_Parser,Cli,9,2,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_9_3_Parser,Cli,9,3,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } private Options options; }</FCTX> <ECTX>public class CommandLine implements Serializable { CommandLine(); void addArg(String); } public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void clearValues(); } public class Options implements Serializable { public Options(); List helpOptions(); }</ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX>public class CommandLine implements Serializable { CommandLine(); void addArg(String); } public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void clearValues(); } public class Options implements Serializable { public Options(); List helpOptions(); }</ECTX>"
Cli_9_4_Parser,Cli,9,4,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValueForProcessing( Util.stripLeadingAndTrailingQuotes(str) ); } catch (RuntimeException exp) { iter.previous(); break; } } if ((opt.getValues() == null) && !opt.hasOptionalArg()) { throw new MissingArgumentException(""Missing argument for option:"" + opt.getKey()); } } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValueForProcessing( Util.stripLeadingAndTrailingQuotes(str) ); } catch (RuntimeException exp) { iter.previous(); break; } } if ((opt.getValues() == null) && !opt.hasOptionalArg()) { throw new MissingArgumentException(""Missing argument for option:"" + opt.getKey()); } } }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void addValueForProcessing(String); public String[] getValues(); public boolean hasOptionalArg(); String getKey(); } class Util { static String stripLeadingAndTrailingQuotes(String); }</ECTX>","<FCTX>Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValueForProcessing( Util.stripLeadingAndTrailingQuotes(str) ); } catch (RuntimeException exp) { iter.previous(); break; } } if ((opt.getValues() == null) && !opt.hasOptionalArg()) { throw new MissingArgumentException(""Missing argument for option:"" + opt.getKey()); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void addValueForProcessing(String); public String[] getValues(); public boolean hasOptionalArg(); String getKey(); } class Util { static String stripLeadingAndTrailingQuotes(String); }</ECTX>"
Cli_10_0_Parser,Cli,10,0,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_10_1_Parser,Cli,10,1,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_10_2_Parser,Cli,10,2,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_10_3_Parser,Cli,10,3,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } private Options options; }</FCTX> <ECTX>public class CommandLine implements Serializable { CommandLine(); void addArg(String); } public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void clearValues(); } public class Options implements Serializable { public Options(); List helpOptions(); }</ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX>public class CommandLine implements Serializable { CommandLine(); void addArg(String); } public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void clearValues(); } public class Options implements Serializable { public Options(); List helpOptions(); }</ECTX>"
Cli_10_4_Parser,Cli,10,4,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValueForProcessing( Util.stripLeadingAndTrailingQuotes(str) ); } catch (RuntimeException exp) { iter.previous(); break; } } if ((opt.getValues() == null) && !opt.hasOptionalArg()) { throw new MissingArgumentException(""Missing argument for option:"" + opt.getKey()); } } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValueForProcessing( Util.stripLeadingAndTrailingQuotes(str) ); } catch (RuntimeException exp) { iter.previous(); break; } } if ((opt.getValues() == null) && !opt.hasOptionalArg()) { throw new MissingArgumentException(""Missing argument for option:"" + opt.getKey()); } } }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void addValueForProcessing(String); public String[] getValues(); public boolean hasOptionalArg(); String getKey(); } class Util { static String stripLeadingAndTrailingQuotes(String); }</ECTX>","<FCTX>Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValueForProcessing( Util.stripLeadingAndTrailingQuotes(str) ); } catch (RuntimeException exp) { iter.previous(); break; } } if ((opt.getValues() == null) && !opt.hasOptionalArg()) { throw new MissingArgumentException(""Missing argument for option:"" + opt.getKey()); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void addValueForProcessing(String); public String[] getValues(); public boolean hasOptionalArg(); String getKey(); } class Util { static String stripLeadingAndTrailingQuotes(String); }</ECTX>"
Cli_11_0_HelpFormatter,Cli,11,0,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_1_HelpFormatter,Cli,11,1,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getWidth() { return this.defaultWidth; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getWidth() { return this.defaultWidth; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getWidth() { return this.defaultWidth; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_2_HelpFormatter,Cli,11,2,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_3_HelpFormatter,Cli,11,3,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getOptPrefix() { return this.defaultOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getOptPrefix() { return this.defaultOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getOptPrefix() { return this.defaultOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_4_HelpFormatter,Cli,11,4,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_5_HelpFormatter,Cli,11,5,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getLongOptPrefix() { return this.defaultLongOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getLongOptPrefix() { return this.defaultLongOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getLongOptPrefix() { return this.defaultLongOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_6_HelpFormatter,Cli,11,6,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_7_HelpFormatter,Cli,11,7,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getArgName() { return this.defaultArgName; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getArgName() { return this.defaultArgName; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getArgName() { return this.defaultArgName; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_8_HelpFormatter,Cli,11,8,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public Comparator getOptionComparator() { return this.optionComparator; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return this.optionComparator; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return this.optionComparator; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_9_HelpFormatter,Cli,11,9,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptionComparator(Comparator comparator) { if ( comparator == null ) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if ( comparator == null ) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if ( comparator == null ) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_10_HelpFormatter,Cli,11,10,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_11_HelpFormatter,Cli,11,11,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_12_HelpFormatter,Cli,11,12,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_13_HelpFormatter,Cli,11,13,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_14_HelpFormatter,Cli,11,14,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_15_HelpFormatter,Cli,11,15,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_16_HelpFormatter,Cli,11,16,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_17_HelpFormatter,Cli,11,17,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_18_HelpFormatter,Cli,11,18,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_19_HelpFormatter,Cli,11,19,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator() ); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator() ); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } private void appendOptionGroup(StringBuffer, OptionGroup); private static void appendOption(StringBuffer, Option, boolean); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Options(); public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator() ); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } <PRIVATE_FCTX>private void appendOptionGroup(StringBuffer, OptionGroup); private static void appendOption(StringBuffer, Option, boolean);</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Options(); public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>"
Cli_11_20_HelpFormatter,Cli,11,20,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_21_HelpFormatter,Cli,11,21,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_22_HelpFormatter,Cli,11,22,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_23_HelpFormatter,Cli,11,23,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getLeftPadding() { return this.defaultLeftPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getLeftPadding() { return this.defaultLeftPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getLeftPadding() { return this.defaultLeftPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_24_HelpFormatter,Cli,11,24,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_25_HelpFormatter,Cli,11,25,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_26_HelpFormatter,Cli,11,26,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getDescPadding() { return this.defaultDescPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getDescPadding() { return this.defaultDescPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getDescPadding() { return this.defaultDescPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_27_HelpFormatter,Cli,11,27,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_28_HelpFormatter,Cli,11,28,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getSyntaxPrefix() { return this.defaultSyntaxPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return this.defaultSyntaxPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return this.defaultSyntaxPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_29_HelpFormatter,Cli,11,29,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_11_30_HelpFormatter,Cli,11,30,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getNewLine() { return this.defaultNewLine; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getNewLine() { return this.defaultNewLine; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getNewLine() { return this.defaultNewLine; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_0_ArgumentImpl,Cli,13,0,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public String getPreferredName() { return name; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public String getPreferredName() { return name; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public String getPreferredName() { return name; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_1_ArgumentImpl,Cli,13,1,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option) throws OptionException { int argumentCount = commandLine.getUndefaultedValues(option).size(); while (arguments.hasNext() && (argumentCount < maximum)) { final String allValuesQuoted = (String) arguments.next(); final String allValues = stripBoundaryQuotes(allValuesQuoted); if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } } else if (commandLine.looksLikeOption(allValuesQuoted)) { arguments.previous(); break; } else if (subsequentSplit) { final StringTokenizer values = new StringTokenizer(allValues, String.valueOf(subsequentSeparator)); arguments.remove(); while (values.hasMoreTokens() && (argumentCount < maximum)) { ++argumentCount; final String token = values.nextToken(); commandLine.addValue(option, token); arguments.add(token); } if (values.hasMoreTokens()) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, values.nextToken()); } } else { ++argumentCount; commandLine.addValue(option, allValues); } } } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option) throws OptionException { int argumentCount = commandLine.getUndefaultedValues(option).size(); while (arguments.hasNext() && (argumentCount < maximum)) { final String allValuesQuoted = (String) arguments.next(); final String allValues = stripBoundaryQuotes(allValuesQuoted); if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } } else if (commandLine.looksLikeOption(allValuesQuoted)) { arguments.previous(); break; } else if (subsequentSplit) { final StringTokenizer values = new StringTokenizer(allValues, String.valueOf(subsequentSeparator)); arguments.remove(); while (values.hasMoreTokens() && (argumentCount < maximum)) { ++argumentCount; final String token = values.nextToken(); commandLine.addValue(option, token); arguments.add(token); } if (values.hasMoreTokens()) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, values.nextToken()); } } else { ++argumentCount; commandLine.addValue(option, allValues); } } } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); private final int maximum; private final char subsequentSeparator; private final boolean subsequentSplit; private final String consumeRemaining; }</FCTX> <ECTX>public abstract class ResourceConstants { public static final String ARGUMENT_UNEXPECTED_VALUE = ""Argument.unexpected.value""; } public interface WriteableCommandLine extends CommandLine { List getUndefaultedValues(Option); void addValue(Option, Object); boolean looksLikeOption(String); }</ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option) throws OptionException { int argumentCount = commandLine.getUndefaultedValues(option).size(); while (arguments.hasNext() && (argumentCount < maximum)) { final String allValuesQuoted = (String) arguments.next(); final String allValues = stripBoundaryQuotes(allValuesQuoted); if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } } else if (commandLine.looksLikeOption(allValuesQuoted)) { arguments.previous(); break; } else if (subsequentSplit) { final StringTokenizer values = new StringTokenizer(allValues, String.valueOf(subsequentSeparator)); arguments.remove(); while (values.hasMoreTokens() && (argumentCount < maximum)) { ++argumentCount; final String token = values.nextToken(); commandLine.addValue(option, token); arguments.add(token); } if (values.hasMoreTokens()) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, values.nextToken()); } } else { ++argumentCount; commandLine.addValue(option, allValues); } } } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX>private final int maximum; private final char subsequentSeparator; private final boolean subsequentSplit; private final String consumeRemaining;</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class ResourceConstants { public static final String ARGUMENT_UNEXPECTED_VALUE = ""Argument.unexpected.value""; } public interface WriteableCommandLine extends CommandLine { List getUndefaultedValues(Option); void addValue(Option, Object); boolean looksLikeOption(String); }</ECTX>"
Cli_13_2_ArgumentImpl,Cli,13,2,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public Validator getValidator() { return this.validator; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public Validator getValidator() { return this.validator; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); private final Validator validator; }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public Validator getValidator() { return this.validator; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX>private final Validator validator;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_3_ArgumentImpl,Cli,13,3,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public void validate(final WriteableCommandLine commandLine) throws OptionException { validate(commandLine, this); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void validate(final WriteableCommandLine commandLine) throws OptionException { validate(commandLine, this); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void validate(final WriteableCommandLine commandLine) throws OptionException { validate(commandLine, this); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_4_ArgumentImpl,Cli,13,4,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public void validate(final WriteableCommandLine commandLine, final Option option) throws OptionException { final List values = commandLine.getValues(option); if (values.size() < minimum) { throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES); } if (values.size() > maximum) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, (String) values.get(maximum)); } if (validator != null) { try { validator.validate(values); } catch (InvalidArgumentException ive) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, ive.getMessage()); } } } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void validate(final WriteableCommandLine commandLine, final Option option) throws OptionException { final List values = commandLine.getValues(option); if (values.size() < minimum) { throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES); } if (values.size() > maximum) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, (String) values.get(maximum)); } if (validator != null) { try { validator.validate(values); } catch (InvalidArgumentException ive) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, ive.getMessage()); } } } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); private final int minimum; private final int maximum; private final Validator validator; }</FCTX> <ECTX>public abstract class ResourceConstants { public static final String ARGUMENT_UNEXPECTED_VALUE = ""Argument.unexpected.value""; public static final String ARGUMENT_MISSING_VALUES = ""Argument.missing.values""; } public interface Validator { void validate(List); } public interface WriteableCommandLine extends CommandLine { getValues(Option); }</ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void validate(final WriteableCommandLine commandLine, final Option option) throws OptionException { final List values = commandLine.getValues(option); if (values.size() < minimum) { throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES); } if (values.size() > maximum) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, (String) values.get(maximum)); } if (validator != null) { try { validator.validate(values); } catch (InvalidArgumentException ive) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, ive.getMessage()); } } } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX>private final int minimum; private final int maximum; private final Validator validator;</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class ResourceConstants { public static final String ARGUMENT_UNEXPECTED_VALUE = ""Argument.unexpected.value""; public static final String ARGUMENT_MISSING_VALUES = ""Argument.missing.values""; } public interface Validator { void validate(List); } public interface WriteableCommandLine extends CommandLine { getValues(Option); }</ECTX>"
Cli_13_5_ArgumentImpl,Cli,13,5,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL); final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED); final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0; while (i < max) { if (i > 0) { buffer.append(' '); } if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); } if (bracketed) { buffer.append('<'); } buffer.append(name); ++i; if (numbered) { buffer.append(i); } if (bracketed) { buffer.append('>'); } } if (maximum == Integer.MAX_VALUE) { buffer.append(""...""); } while (i > 0) { --i; if ((i >= minimum) && (optional || (i > 0))) { buffer.append(']'); } } } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL); final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED); final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0; while (i < max) { if (i > 0) { buffer.append(' '); } if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); } if (bracketed) { buffer.append('<'); } buffer.append(name); ++i; if (numbered) { buffer.append(i); } if (bracketed) { buffer.append('>'); } } if (maximum == Integer.MAX_VALUE) { buffer.append(""...""); } while (i > 0) { --i; if ((i >= minimum) && (optional || (i > 0))) { buffer.append(']'); } } } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); private final String name; private final int minimum; private final int maximum; }</FCTX> <ECTX>public class DisplaySetting { public static final DisplaySetting DISPLAY_OPTIONAL = new DisplaySetting(""DISPLAY_OPTIONAL""); public static final DisplaySetting DISPLAY_ARGUMENT_NUMBERED = new DisplaySetting(""DISPLAY_ARGUMENT_NUMBERED""); public static final DisplaySetting DISPLAY_ARGUMENT_BRACKETED = new DisplaySetting(""DISPLAY_ARGUMENT_BRACKETED""); }</ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL); final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED); final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0; while (i < max) { if (i > 0) { buffer.append(' '); } if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); } if (bracketed) { buffer.append('<'); } buffer.append(name); ++i; if (numbered) { buffer.append(i); } if (bracketed) { buffer.append('>'); } } if (maximum == Integer.MAX_VALUE) { buffer.append(""...""); } while (i > 0) { --i; if ((i >= minimum) && (optional || (i > 0))) { buffer.append(']'); } } } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX>private final String name; private final int minimum; private final int maximum;</PRIVATE_FCTX> }</FCTX> <ECTX>public class DisplaySetting { public static final DisplaySetting DISPLAY_OPTIONAL = new DisplaySetting(""DISPLAY_OPTIONAL""); public static final DisplaySetting DISPLAY_ARGUMENT_NUMBERED = new DisplaySetting(""DISPLAY_ARGUMENT_NUMBERED""); public static final DisplaySetting DISPLAY_ARGUMENT_BRACKETED = new DisplaySetting(""DISPLAY_ARGUMENT_BRACKETED""); }</ECTX>"
Cli_13_6_ArgumentImpl,Cli,13,6,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public String getDescription() { return description; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public String getDescription() { return description; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public String getDescription() { return description; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_7_ArgumentImpl,Cli,13,7,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final HelpLine helpLine = new HelpLineImpl(this, depth); return Collections.singletonList(helpLine); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final HelpLine helpLine = new HelpLineImpl(this, depth); return Collections.singletonList(helpLine); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final HelpLine helpLine = new HelpLineImpl(this, depth); return Collections.singletonList(helpLine); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_8_ArgumentImpl,Cli,13,8,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public int getMaximum() { return maximum; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public int getMaximum() { return maximum; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public int getMaximum() { return maximum; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_9_ArgumentImpl,Cli,13,9,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public int getMinimum() { return minimum; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public int getMinimum() { return minimum; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public int getMinimum() { return minimum; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_10_ArgumentImpl,Cli,13,10,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public String stripBoundaryQuotes(String token) { if (!token.startsWith(""\"""") || !token.endsWith(""\"""")) { return token; } token = token.substring(1, token.length() - 1); return token; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public String stripBoundaryQuotes(String token) { if (!token.startsWith(""\"""") || !token.endsWith(""\"""")) { return token; } token = token.substring(1, token.length() - 1); return token; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public String stripBoundaryQuotes(String token) { if (!token.startsWith(""\"""") || !token.endsWith(""\"""")) { return token; } token = token.substring(1, token.length() - 1); return token; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_11_ArgumentImpl,Cli,13,11,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public boolean isRequired() { return getMinimum() > 0; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public boolean isRequired() { return getMinimum() > 0; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public boolean isRequired() { return getMinimum() > 0; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_12_ArgumentImpl,Cli,13,12,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { return true; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { return true; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { return true; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_13_ArgumentImpl,Cli,13,13,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); defaultValues(commandLine, this); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); defaultValues(commandLine, this); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); private final List defaultValues; }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); defaultValues(commandLine, this); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX>private final List defaultValues;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_14_ArgumentImpl,Cli,13,14,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public void defaultValues(final WriteableCommandLine commandLine, final Option option) { commandLine.setDefaultValues(option, defaultValues); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void defaultValues(final WriteableCommandLine commandLine, final Option option) { commandLine.setDefaultValues(option, defaultValues); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); private final List defaultValues; }</FCTX> <ECTX>public interface WriteableCommandLine extends CommandLine { void setDefaultValues(Option, List); }</ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void defaultValues(final WriteableCommandLine commandLine, final Option option) { commandLine.setDefaultValues(option, defaultValues); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX>private final List defaultValues;</PRIVATE_FCTX> }</FCTX> <ECTX>public interface WriteableCommandLine extends CommandLine { void setDefaultValues(Option, List); }</ECTX>"
Cli_13_15_WriteableCommandLineImpl,Cli,13,15,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } public WriteableCommandLineImpl(Option, List); private final List options = new ArrayList(); private final Map nameToOption = new HashMap(); }</FCTX> <ECTX>public interface Option { String getPreferredName(); Set getTriggers(); }</ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List options = new ArrayList(); private final Map nameToOption = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { String getPreferredName(); Set getTriggers(); }</ECTX>"
Cli_13_16_WriteableCommandLineImpl,Cli,13,16,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public WriteableCommandLineImpl(Option, List); private final Map values = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map values = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_17_WriteableCommandLineImpl,Cli,13,17,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public WriteableCommandLineImpl(Option, List); private final Map switches = new HashMap(); }</FCTX> <ECTX>public abstract class ResourceConstants { public static final String SWITCH_ALREADY_SET = ""Switch.already.set""; } public class ResourceHelper { public static ResourceHelper getResourceHelper(); }</ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map switches = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class ResourceConstants { public static final String SWITCH_ALREADY_SET = ""Switch.already.set""; } public class ResourceHelper { public static ResourceHelper getResourceHelper(); }</ECTX>"
Cli_13_18_WriteableCommandLineImpl,Cli,13,18,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public WriteableCommandLineImpl(Option, List); private final List options = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List options = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_19_WriteableCommandLineImpl,Cli,13,19,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public WriteableCommandLineImpl(Option, List); private final Map nameToOption = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map nameToOption = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_20_WriteableCommandLineImpl,Cli,13,20,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, final List defaultValues) { List valueList = (List) values.get(option); if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; } if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); } if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, final List defaultValues) { List valueList = (List) values.get(option); if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; } if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); } if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); private final Map values = new HashMap(); private final Map defaultValues = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, final List defaultValues) { List valueList = (List) values.get(option); if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; } if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); } if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map values = new HashMap(); private final Map defaultValues = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_21_WriteableCommandLineImpl,Cli,13,21,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); private final Map values = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map values = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_22_WriteableCommandLineImpl,Cli,13,22,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public WriteableCommandLineImpl(Option, List); private final Map switches = new HashMap(); private final Map defaultSwitches = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map switches = new HashMap(); private final Map defaultSwitches = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_23_ArgumentImpl,Cli,13,23,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public Set getPrefixes() { return Collections.EMPTY_SET; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public Set getPrefixes() { return Collections.EMPTY_SET; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public Set getPrefixes() { return Collections.EMPTY_SET; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_24_WriteableCommandLineImpl,Cli,13,24,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { properties.setProperty(property, value); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { properties.setProperty(property, value); } public WriteableCommandLineImpl(Option, List); private final Properties properties = new Properties(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { properties.setProperty(property, value); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Properties properties = new Properties();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_25_WriteableCommandLineImpl,Cli,13,25,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property, final String defaultValue) { return properties.getProperty(property, defaultValue); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property, final String defaultValue) { return properties.getProperty(property, defaultValue); } public WriteableCommandLineImpl(Option, List); private final Properties properties = new Properties(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property, final String defaultValue) { return properties.getProperty(property, defaultValue); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Properties properties = new Properties();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_26_WriteableCommandLineImpl,Cli,13,26,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return Collections.unmodifiableSet(properties.keySet()); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return Collections.unmodifiableSet(properties.keySet()); } public WriteableCommandLineImpl(Option, List); private final Properties properties = new Properties(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return Collections.unmodifiableSet(properties.keySet()); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Properties properties = new Properties();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_27_WriteableCommandLineImpl,Cli,13,27,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } public WriteableCommandLineImpl(Option, List); private final Set prefixes; }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Set prefixes;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_28_WriteableCommandLineImpl,Cli,13,28,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(""\"""").append(arg).append(""\""""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(""\"""").append(arg).append(""\""""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } public WriteableCommandLineImpl(Option, List); private final List normalised; }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(""\"""").append(arg).append(""\""""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List normalised;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_29_WriteableCommandLineImpl,Cli,13,29,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } public WriteableCommandLineImpl(Option, List); private final List options = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List options = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_30_WriteableCommandLineImpl,Cli,13,30,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public WriteableCommandLineImpl(Option, List); private final Map nameToOption = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map nameToOption = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_31_WriteableCommandLineImpl,Cli,13,31,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public WriteableCommandLineImpl(Option, List); private final Map defaultValues = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map defaultValues = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_32_WriteableCommandLineImpl,Cli,13,32,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public WriteableCommandLineImpl(Option, List); private final Map defaultSwitches = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map defaultSwitches = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_33_WriteableCommandLineImpl,Cli,13,33,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public void addProperty(String, String); public String getProperty(String, String); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } public WriteableCommandLineImpl(Option, List); private final List normalised; }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List normalised;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_34_ArgumentImpl,Cli,13,34,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public void process(WriteableCommandLine commandLine, ListIterator args) throws OptionException { processValues(commandLine, args, this); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void process(WriteableCommandLine commandLine, ListIterator args) throws OptionException { processValues(commandLine, args, this); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public void process(WriteableCommandLine commandLine, ListIterator args) throws OptionException { processValues(commandLine, args, this); } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_35_ArgumentImpl,Cli,13,35,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public char getInitialSeparator() { return this.initialSeparator; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public char getInitialSeparator() { return this.initialSeparator; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); private final char initialSeparator; }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public char getInitialSeparator() { return this.initialSeparator; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX>private final char initialSeparator;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_36_ArgumentImpl,Cli,13,36,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public char getSubsequentSeparator() { return this.subsequentSeparator; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public char getSubsequentSeparator() { return this.subsequentSeparator; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); private final char subsequentSeparator; }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public char getSubsequentSeparator() { return this.subsequentSeparator; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX>private final char subsequentSeparator;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_37_ArgumentImpl,Cli,13,37,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public Set getTriggers() { return Collections.EMPTY_SET; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public Set getTriggers() { return Collections.EMPTY_SET; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public Set getTriggers() { return Collections.EMPTY_SET; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_38_ArgumentImpl,Cli,13,38,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public String getConsumeRemaining() { return this.consumeRemaining; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public String getConsumeRemaining() { return this.consumeRemaining; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); private final String consumeRemaining; }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public String getConsumeRemaining() { return this.consumeRemaining; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX>private final String consumeRemaining;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_13_39_ArgumentImpl,Cli,13,39,org.apache.commons.cli2.option.ArgumentImpl,ArgumentImpl,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,ArgumentImpl_ESTest,org/apache/commons/cli2/option/ArgumentImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Collections;|import java.util.Comparator;|import java.util.List;|import java.util.ListIterator;|import java.util.Set;|import java.util.StringTokenizer;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;|import org.apache.commons.cli2.validation.InvalidArgumentException;|import org.apache.commons.cli2.validation.Validator;","ArgumentImpl extends OptionImpl implements Argument { public List getDefaultValues() { return this.defaultValues; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); public String getPreferredName(); public void processValues(WriteableCommandLine, ListIterator, Option); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public void process(WriteableCommandLine, ListIterator); public char getInitialSeparator(); public char getSubsequentSeparator(); public Set getTriggers(); public String getConsumeRemaining(); public List getDefaultValues(); public Validator getValidator(); public void validate(WriteableCommandLine); public void validate(WriteableCommandLine, Option); public void appendUsage(StringBuffer, Set, Comparator); public String getDescription(); public List helpLines(int, Set, Comparator); public int getMaximum(); public int getMinimum(); public String stripBoundaryQuotes(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public void defaultValues(WriteableCommandLine, Option); public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = ""--""; }","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public List getDefaultValues() { return this.defaultValues; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); private final List defaultValues; }</FCTX> <ECTX></ECTX>","<FCTX>ArgumentImpl extends OptionImpl implements Argument { public List getDefaultValues() { return this.defaultValues; } public ArgumentImpl(String, String, int, int, char, char, Validator, String, List, int); <PRIVATE_FCTX>private final List defaultValues;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_14_0_GroupImpl,Cli,14,0,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { if (arg == null) { return false; } if (optionMap.containsKey(arg)) { return true; } final Map tailMap = optionMap.tailMap(arg); for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) { final Option option = (Option) iter.next(); if (option.canProcess(commandLine, arg)) { return true; } } if (commandLine.looksLikeOption(arg)) { return false; } if (anonymous.size() > 0) { return true; } return false; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { if (arg == null) { return false; } if (optionMap.containsKey(arg)) { return true; } final Map tailMap = optionMap.tailMap(arg); for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) { final Option option = (Option) iter.next(); if (option.canProcess(commandLine, arg)) { return true; } } if (commandLine.looksLikeOption(arg)) { return false; } if (anonymous.size() > 0) { return true; } return false; } public GroupImpl(List, String, String, int, int); private final List anonymous; private final SortedMap optionMap; }</FCTX> <ECTX>public interface Option { boolean canProcess(WriteableCommandLine, String); } public interface WriteableCommandLine extends CommandLine { boolean looksLikeOption(String); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { if (arg == null) { return false; } if (optionMap.containsKey(arg)) { return true; } final Map tailMap = optionMap.tailMap(arg); for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) { final Option option = (Option) iter.next(); if (option.canProcess(commandLine, arg)) { return true; } } if (commandLine.looksLikeOption(arg)) { return false; } if (anonymous.size() > 0) { return true; } return false; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final List anonymous; private final SortedMap optionMap;</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { boolean canProcess(WriteableCommandLine, String); } public interface WriteableCommandLine extends CommandLine { boolean looksLikeOption(String); }</ECTX>"
Cli_14_1_GroupImpl,Cli,14,1,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public Set getPrefixes() { return prefixes; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public Set getPrefixes() { return prefixes; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public Set getPrefixes() { return prefixes; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_14_2_GroupImpl,Cli,14,2,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public List getOptions() { return options; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public List getOptions() { return options; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public List getOptions() { return options; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_14_3_GroupImpl,Cli,14,3,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public List getAnonymous() { return anonymous; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public List getAnonymous() { return anonymous; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public List getAnonymous() { return anonymous; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_14_4_GroupImpl,Cli,14,4,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public Option findOption(final String trigger) { final Iterator i = getOptions().iterator(); while (i.hasNext()) { final Option option = (Option) i.next(); final Option found = option.findOption(trigger); if (found != null) { return found; } } return null; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public Option findOption(final String trigger) { final Iterator i = getOptions().iterator(); while (i.hasNext()) { final Option option = (Option) i.next(); final Option found = option.findOption(trigger); if (found != null) { return found; } } return null; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX>public interface Option { Option findOption(String); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public Option findOption(final String trigger) { final Iterator i = getOptions().iterator(); while (i.hasNext()) { final Option option = (Option) i.next(); final Option found = option.findOption(trigger); if (found != null) { return found; } } return null; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { Option findOption(String); }</ECTX>"
Cli_14_5_GroupImpl,Cli,14,5,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public int getMinimum() { return minimum; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public int getMinimum() { return minimum; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public int getMinimum() { return minimum; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_14_6_GroupImpl,Cli,14,6,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public int getMaximum() { return maximum; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public int getMaximum() { return maximum; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public int getMaximum() { return maximum; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_14_7_GroupImpl,Cli,14,7,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public boolean isRequired() { return getMinimum() > 0; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public boolean isRequired() { return getMinimum() > 0; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public boolean isRequired() { return getMinimum() > 0; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_14_8_GroupImpl,Cli,14,8,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } } public GroupImpl(List, String, String, int, int); private final List options; private final List anonymous; }</FCTX> <ECTX>public interface Option { void defaults(WriteableCommandLine); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final List options; private final List anonymous;</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { void defaults(WriteableCommandLine); }</ECTX>"
Cli_14_9_GroupImpl,Cli,14,9,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,,"import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","ReverseStringComparator implements Comparator { public static final Comparator getInstance() { return instance; } private ReverseStringComparator(); public static final Comparator getInstance(); public int compare(Object, Object); }","<FCTX>ReverseStringComparator implements Comparator { public static final Comparator getInstance() { return instance; } private ReverseStringComparator(); }</FCTX> <ECTX></ECTX>","<FCTX>ReverseStringComparator implements Comparator { public static final Comparator getInstance() { return instance; } <PRIVATE_FCTX>private ReverseStringComparator();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_14_10_GroupImpl,Cli,14,10,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,,"import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","ReverseStringComparator implements Comparator { public int compare(final Object o1, final Object o2) { final String s1 = (String) o1; final String s2 = (String) o2; return -s1.compareTo(s2); } private ReverseStringComparator(); public static final Comparator getInstance(); public int compare(Object, Object); }","<FCTX>ReverseStringComparator implements Comparator { public int compare(final Object o1, final Object o2) { final String s1 = (String) o1; final String s2 = (String) o2; return -s1.compareTo(s2); } private ReverseStringComparator(); }</FCTX> <ECTX></ECTX>","<FCTX>ReverseStringComparator implements Comparator { public int compare(final Object o1, final Object o2) { final String s1 = (String) o1; final String s2 = (String) o2; return -s1.compareTo(s2); } <PRIVATE_FCTX>private ReverseStringComparator();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_14_11_GroupImpl,Cli,14,11,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public Set getTriggers() { return optionMap.keySet(); } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public Set getTriggers() { return optionMap.keySet(); } public GroupImpl(List, String, String, int, int); private final SortedMap optionMap; }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public Set getTriggers() { return optionMap.keySet(); } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final SortedMap optionMap;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_14_12_GroupImpl,Cli,14,12,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void process(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { String previous = null; while (arguments.hasNext()) { final String arg = (String) arguments.next(); if (arg == previous) { arguments.previous(); break; } previous = arg; final Option opt = (Option) optionMap.get(arg); if (opt != null) { arguments.previous(); opt.process(commandLine, arguments); } else { if (commandLine.looksLikeOption(arg)) { final Collection values = optionMap.tailMap(arg).values(); boolean foundMemberOption = false; for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) { final Option option = (Option) i.next(); if (option.canProcess(commandLine, arg)) { foundMemberOption = true; arguments.previous(); option.process(commandLine, arguments); } } if (!foundMemberOption) { arguments.previous(); return; } } else { arguments.previous(); if (anonymous.isEmpty()) { break; } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Argument argument = (Argument) i.next(); if (argument.canProcess(commandLine, arguments)) { argument.process(commandLine, arguments); } } } } } } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void process(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { String previous = null; while (arguments.hasNext()) { final String arg = (String) arguments.next(); if (arg == previous) { arguments.previous(); break; } previous = arg; final Option opt = (Option) optionMap.get(arg); if (opt != null) { arguments.previous(); opt.process(commandLine, arguments); } else { if (commandLine.looksLikeOption(arg)) { final Collection values = optionMap.tailMap(arg).values(); boolean foundMemberOption = false; for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) { final Option option = (Option) i.next(); if (option.canProcess(commandLine, arg)) { foundMemberOption = true; arguments.previous(); option.process(commandLine, arguments); } } if (!foundMemberOption) { arguments.previous(); return; } } else { arguments.previous(); if (anonymous.isEmpty()) { break; } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Argument argument = (Argument) i.next(); if (argument.canProcess(commandLine, arguments)) { argument.process(commandLine, arguments); } } } } } } public GroupImpl(List, String, String, int, int); private final List anonymous; private final SortedMap optionMap; }</FCTX> <ECTX>public interface Argument extends Option { canProcess(WriteableCommandLine, ListIterator); process(WriteableCommandLine, ListIterator); } public interface Option { void process(WriteableCommandLine, ListIterator); boolean canProcess(WriteableCommandLine, String); } public interface WriteableCommandLine extends CommandLine { boolean looksLikeOption(String); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void process(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { String previous = null; while (arguments.hasNext()) { final String arg = (String) arguments.next(); if (arg == previous) { arguments.previous(); break; } previous = arg; final Option opt = (Option) optionMap.get(arg); if (opt != null) { arguments.previous(); opt.process(commandLine, arguments); } else { if (commandLine.looksLikeOption(arg)) { final Collection values = optionMap.tailMap(arg).values(); boolean foundMemberOption = false; for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) { final Option option = (Option) i.next(); if (option.canProcess(commandLine, arg)) { foundMemberOption = true; arguments.previous(); option.process(commandLine, arguments); } } if (!foundMemberOption) { arguments.previous(); return; } } else { arguments.previous(); if (anonymous.isEmpty()) { break; } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Argument argument = (Argument) i.next(); if (argument.canProcess(commandLine, arguments)) { argument.process(commandLine, arguments); } } } } } } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final List anonymous; private final SortedMap optionMap;</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Argument extends Option { canProcess(WriteableCommandLine, ListIterator); process(WriteableCommandLine, ListIterator); } public interface Option { void process(WriteableCommandLine, ListIterator); boolean canProcess(WriteableCommandLine, String); } public interface WriteableCommandLine extends CommandLine { boolean looksLikeOption(String); }</ECTX>"
Cli_14_13_GroupImpl,Cli,14,13,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void validate(final WriteableCommandLine commandLine) throws OptionException { int present = 0; Option unexpected = null; for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); boolean validate = option.isRequired() || option instanceof Group; if (commandLine.hasOption(option)) { if (++present > maximum) { unexpected = option; break; } validate = true; } if (validate) { option.validate(commandLine); } } if (unexpected != null) { throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName()); } if (present < minimum) { throw new OptionException(this, ResourceConstants.MISSING_OPTION); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.validate(commandLine); } } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void validate(final WriteableCommandLine commandLine) throws OptionException { int present = 0; Option unexpected = null; for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); boolean validate = option.isRequired() || option instanceof Group; if (commandLine.hasOption(option)) { if (++present > maximum) { unexpected = option; break; } validate = true; } if (validate) { option.validate(commandLine); } } if (unexpected != null) { throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName()); } if (present < minimum) { throw new OptionException(this, ResourceConstants.MISSING_OPTION); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.validate(commandLine); } } public GroupImpl(List, String, String, int, int); private final List options; private final int minimum; private final int maximum; private final List anonymous; }</FCTX> <ECTX>public interface Option { boolean isRequired(); void validate(WriteableCommandLine); String getPreferredName(); } public abstract class ResourceConstants { public static final String UNEXPECTED_TOKEN = ""Unexpected.token""; public static final String MISSING_OPTION = ""Missing.option""; } public interface WriteableCommandLine extends CommandLine { hasOption(Option); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void validate(final WriteableCommandLine commandLine) throws OptionException { int present = 0; Option unexpected = null; for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); boolean validate = option.isRequired() || option instanceof Group; if (commandLine.hasOption(option)) { if (++present > maximum) { unexpected = option; break; } validate = true; } if (validate) { option.validate(commandLine); } } if (unexpected != null) { throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName()); } if (present < minimum) { throw new OptionException(this, ResourceConstants.MISSING_OPTION); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.validate(commandLine); } } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final List options; private final int minimum; private final int maximum; private final List anonymous;</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { boolean isRequired(); void validate(WriteableCommandLine); String getPreferredName(); } public abstract class ResourceConstants { public static final String UNEXPECTED_TOKEN = ""Unexpected.token""; public static final String MISSING_OPTION = ""Missing.option""; } public interface WriteableCommandLine extends CommandLine { hasOption(Option); }</ECTX>"
Cli_14_14_GroupImpl,Cli,14,14,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public String getPreferredName() { return name; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public String getPreferredName() { return name; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public String getPreferredName() { return name; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_14_15_GroupImpl,Cli,14,15,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public String getDescription() { return description; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public String getDescription() { return description; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public String getDescription() { return description; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_14_16_GroupImpl,Cli,14,16,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { appendUsage(buffer, helpSettings, comp, ""|""); } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { appendUsage(buffer, helpSettings, comp, ""|""); } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { appendUsage(buffer, helpSettings, comp, ""|""); } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_14_17_GroupImpl,Cli,14,17,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator) { final Set helpSettingsCopy = new HashSet(helpSettings); final boolean optional = (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL); final boolean expanded = (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED); final boolean named = !expanded || ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME)); final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT); final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER); helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER); final boolean both = named && expanded; if (optional) { buffer.append('['); } if (named) { buffer.append(name); } if (both) { buffer.append("" (""); } if (expanded) { final Set childSettings; if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { childSettings = DisplaySetting.NONE; } else { childSettings = new HashSet(helpSettingsCopy); childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL); } final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.appendUsage(buffer, childSettings, comp); if (i.hasNext()) { buffer.append(separator); } } } if (both) { buffer.append(')'); } if (optional && outer) { buffer.append(']'); } if (arguments) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { buffer.append(' '); final Option option = (Option) i.next(); option.appendUsage(buffer, helpSettingsCopy, comp); } } if (optional && !outer) { buffer.append(']'); } } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator) { final Set helpSettingsCopy = new HashSet(helpSettings); final boolean optional = (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL); final boolean expanded = (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED); final boolean named = !expanded || ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME)); final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT); final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER); helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER); final boolean both = named && expanded; if (optional) { buffer.append('['); } if (named) { buffer.append(name); } if (both) { buffer.append("" (""); } if (expanded) { final Set childSettings; if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { childSettings = DisplaySetting.NONE; } else { childSettings = new HashSet(helpSettingsCopy); childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL); } final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.appendUsage(buffer, childSettings, comp); if (i.hasNext()) { buffer.append(separator); } } } if (both) { buffer.append(')'); } if (optional && outer) { buffer.append(']'); } if (arguments) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { buffer.append(' '); final Option option = (Option) i.next(); option.appendUsage(buffer, helpSettingsCopy, comp); } } if (optional && !outer) { buffer.append(']'); } } public GroupImpl(List, String, String, int, int); private final String name; private final List options; private final int minimum; private final List anonymous; }</FCTX> <ECTX>public class DisplaySetting { public static final Set NONE = Collections.EMPTY_SET; public static final DisplaySetting DISPLAY_OPTIONAL = new DisplaySetting(""DISPLAY_OPTIONAL""); public static final DisplaySetting DISPLAY_GROUP_NAME = new DisplaySetting(""DISPLAY_GROUP_NAME""); public static final DisplaySetting DISPLAY_GROUP_EXPANDED = new DisplaySetting(""DISPLAY_GROUP_EXPANDED""); public static final DisplaySetting DISPLAY_GROUP_ARGUMENT = new DisplaySetting(""DISPLAY_GROUP_ARGUMENT""); public static final DisplaySetting DISPLAY_GROUP_OUTER = new DisplaySetting(""DISPLAY_GROUP_OUTER""); } public interface Option { void appendUsage(StringBuffer, Set, Comparator); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator) { final Set helpSettingsCopy = new HashSet(helpSettings); final boolean optional = (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL); final boolean expanded = (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED); final boolean named = !expanded || ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME)); final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT); final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER); helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER); final boolean both = named && expanded; if (optional) { buffer.append('['); } if (named) { buffer.append(name); } if (both) { buffer.append("" (""); } if (expanded) { final Set childSettings; if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { childSettings = DisplaySetting.NONE; } else { childSettings = new HashSet(helpSettingsCopy); childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL); } final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.appendUsage(buffer, childSettings, comp); if (i.hasNext()) { buffer.append(separator); } } } if (both) { buffer.append(')'); } if (optional && outer) { buffer.append(']'); } if (arguments) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { buffer.append(' '); final Option option = (Option) i.next(); option.appendUsage(buffer, helpSettingsCopy, comp); } } if (optional && !outer) { buffer.append(']'); } } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final String name; private final List options; private final int minimum; private final List anonymous;</PRIVATE_FCTX> }</FCTX> <ECTX>public class DisplaySetting { public static final Set NONE = Collections.EMPTY_SET; public static final DisplaySetting DISPLAY_OPTIONAL = new DisplaySetting(""DISPLAY_OPTIONAL""); public static final DisplaySetting DISPLAY_GROUP_NAME = new DisplaySetting(""DISPLAY_GROUP_NAME""); public static final DisplaySetting DISPLAY_GROUP_EXPANDED = new DisplaySetting(""DISPLAY_GROUP_EXPANDED""); public static final DisplaySetting DISPLAY_GROUP_ARGUMENT = new DisplaySetting(""DISPLAY_GROUP_ARGUMENT""); public static final DisplaySetting DISPLAY_GROUP_OUTER = new DisplaySetting(""DISPLAY_GROUP_OUTER""); } public interface Option { void appendUsage(StringBuffer, Set, Comparator); }</ECTX>"
Cli_14_18_GroupImpl,Cli,14,18,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final List helpLines = new ArrayList(); if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) { final HelpLine helpLine = new HelpLineImpl(this, depth); helpLines.add(helpLine); } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } return helpLines; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final List helpLines = new ArrayList(); if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) { final HelpLine helpLine = new HelpLineImpl(this, depth); helpLines.add(helpLine); } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } return helpLines; } public GroupImpl(List, String, String, int, int); private final List options; private final List anonymous; }</FCTX> <ECTX>public class DisplaySetting { public static final DisplaySetting DISPLAY_GROUP_NAME = new DisplaySetting(""DISPLAY_GROUP_NAME""); public static final DisplaySetting DISPLAY_GROUP_EXPANDED = new DisplaySetting(""DISPLAY_GROUP_EXPANDED""); public static final DisplaySetting DISPLAY_GROUP_ARGUMENT = new DisplaySetting(""DISPLAY_GROUP_ARGUMENT""); } public interface Option { List helpLines(int, Set, Comparator); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final List helpLines = new ArrayList(); if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) { final HelpLine helpLine = new HelpLineImpl(this, depth); helpLines.add(helpLine); } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } return helpLines; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final List options; private final List anonymous;</PRIVATE_FCTX> }</FCTX> <ECTX>public class DisplaySetting { public static final DisplaySetting DISPLAY_GROUP_NAME = new DisplaySetting(""DISPLAY_GROUP_NAME""); public static final DisplaySetting DISPLAY_GROUP_EXPANDED = new DisplaySetting(""DISPLAY_GROUP_EXPANDED""); public static final DisplaySetting DISPLAY_GROUP_ARGUMENT = new DisplaySetting(""DISPLAY_GROUP_ARGUMENT""); } public interface Option { List helpLines(int, Set, Comparator); }</ECTX>"
Cli_15_0_WriteableCommandLineImpl,Cli,15,0,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } public WriteableCommandLineImpl(Option, List); private final List options = new ArrayList(); private final Map nameToOption = new HashMap(); }</FCTX> <ECTX>public interface Option { String getPreferredName(); Set getTriggers(); }</ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List options = new ArrayList(); private final Map nameToOption = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { String getPreferredName(); Set getTriggers(); }</ECTX>"
Cli_15_1_WriteableCommandLineImpl,Cli,15,1,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public WriteableCommandLineImpl(Option, List); private final Map values = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map values = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_2_WriteableCommandLineImpl,Cli,15,2,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { addProperty(new PropertyOption(), property, value); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { addProperty(new PropertyOption(), property, value); } public WriteableCommandLineImpl(Option, List); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { addProperty(new PropertyOption(), property, value); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_3_WriteableCommandLineImpl,Cli,15,3,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue); } public WriteableCommandLineImpl(Option, List); private final Map optionToProperties = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map optionToProperties = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_4_WriteableCommandLineImpl,Cli,15,4,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } public WriteableCommandLineImpl(Option, List); private final Map optionToProperties = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map optionToProperties = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_5_WriteableCommandLineImpl,Cli,15,5,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return getProperties(new PropertyOption()); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return getProperties(new PropertyOption()); } public WriteableCommandLineImpl(Option, List); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return getProperties(new PropertyOption()); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_6_WriteableCommandLineImpl,Cli,15,6,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } public WriteableCommandLineImpl(Option, List); private final Set prefixes; }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Set prefixes;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_7_WriteableCommandLineImpl,Cli,15,7,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(""\"""").append(arg).append(""\""""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(""\"""").append(arg).append(""\""""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } public WriteableCommandLineImpl(Option, List); private final List normalised; }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(""\"""").append(arg).append(""\""""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List normalised;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_8_WriteableCommandLineImpl,Cli,15,8,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } public WriteableCommandLineImpl(Option, List); private final List options = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List options = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_9_WriteableCommandLineImpl,Cli,15,9,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public WriteableCommandLineImpl(Option, List); private final Map nameToOption = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map nameToOption = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_10_WriteableCommandLineImpl,Cli,15,10,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public WriteableCommandLineImpl(Option, List); private final Map defaultValues = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map defaultValues = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_11_WriteableCommandLineImpl,Cli,15,11,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public WriteableCommandLineImpl(Option, List); private final Map defaultSwitches = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map defaultSwitches = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_12_WriteableCommandLineImpl,Cli,15,12,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public WriteableCommandLineImpl(Option, List); private final Map switches = new HashMap(); }</FCTX> <ECTX>public abstract class ResourceConstants { public static final String SWITCH_ALREADY_SET = ""Switch.already.set""; } public class ResourceHelper { public static ResourceHelper getResourceHelper(); }</ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map switches = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class ResourceConstants { public static final String SWITCH_ALREADY_SET = ""Switch.already.set""; } public class ResourceHelper { public static ResourceHelper getResourceHelper(); }</ECTX>"
Cli_15_13_WriteableCommandLineImpl,Cli,15,13,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } public WriteableCommandLineImpl(Option, List); private final List normalised; }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List normalised;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_14_WriteableCommandLineImpl,Cli,15,14,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public WriteableCommandLineImpl(Option, List); private final List options = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List options = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_15_WriteableCommandLineImpl,Cli,15,15,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public WriteableCommandLineImpl(Option, List); private final Map nameToOption = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map nameToOption = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_16_WriteableCommandLineImpl,Cli,15,16,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; } public WriteableCommandLineImpl(Option, List); private final Map values = new HashMap(); private final Map defaultValues = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map values = new HashMap(); private final Map defaultValues = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_17_WriteableCommandLineImpl,Cli,15,17,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); private final Map values = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map values = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_18_WriteableCommandLineImpl,Cli,15,18,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public WriteableCommandLineImpl(Option, List); private final Map switches = new HashMap(); private final Map defaultSwitches = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map switches = new HashMap(); private final Map defaultSwitches = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_19_WriteableCommandLineImpl,Cli,15,19,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } public WriteableCommandLineImpl(Option, List); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_15_20_WriteableCommandLineImpl,Cli,15,20,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final Option option, final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final Option option, final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } public WriteableCommandLineImpl(Option, List); private final Map optionToProperties = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final Option option, final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map optionToProperties = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_0_OptionImpl,Cli,16,0,org.apache.commons.cli2.option.OptionImpl,OptionImpl,src/java/org/apache/commons/cli2/option/OptionImpl.java,OptionImpl_ESTest,org/apache/commons/cli2/option/OptionImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Iterator;|import java.util.ListIterator;|import java.util.Set;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","OptionImpl implements Option { public boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments) { if (arguments.hasNext()) { final String argument = (String) arguments.next(); arguments.previous(); return canProcess(commandLine, argument); } else { return false; } } public OptionImpl(int, boolean); public boolean canProcess(WriteableCommandLine, ListIterator); public String toString(); public int getId(); public boolean equals(Object); public int hashCode(); public Option findOption(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public Option getParent(); public void setParent(Option); protected void checkPrefixes(Set); }","<FCTX>OptionImpl implements Option { public boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments) { if (arguments.hasNext()) { final String argument = (String) arguments.next(); arguments.previous(); return canProcess(commandLine, argument); } else { return false; } } public OptionImpl(int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>OptionImpl implements Option { public boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments) { if (arguments.hasNext()) { final String argument = (String) arguments.next(); arguments.previous(); return canProcess(commandLine, argument); } else { return false; } } public OptionImpl(int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_1_OptionImpl,Cli,16,1,org.apache.commons.cli2.option.OptionImpl,OptionImpl,src/java/org/apache/commons/cli2/option/OptionImpl.java,OptionImpl_ESTest,org/apache/commons/cli2/option/OptionImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Iterator;|import java.util.ListIterator;|import java.util.Set;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","OptionImpl implements Option { public String toString() { final StringBuffer buffer = new StringBuffer(); appendUsage(buffer, DisplaySetting.ALL, null); return buffer.toString(); } public OptionImpl(int, boolean); public boolean canProcess(WriteableCommandLine, ListIterator); public String toString(); public int getId(); public boolean equals(Object); public int hashCode(); public Option findOption(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public Option getParent(); public void setParent(Option); protected void checkPrefixes(Set); }","<FCTX>OptionImpl implements Option { public String toString() { final StringBuffer buffer = new StringBuffer(); appendUsage(buffer, DisplaySetting.ALL, null); return buffer.toString(); } public OptionImpl(int, boolean); }</FCTX> <ECTX>public class DisplaySetting { public static final Set ALL = Collections.unmodifiableSet(all); }</ECTX>","<FCTX>OptionImpl implements Option { public String toString() { final StringBuffer buffer = new StringBuffer(); appendUsage(buffer, DisplaySetting.ALL, null); return buffer.toString(); } public OptionImpl(int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class DisplaySetting { public static final Set ALL = Collections.unmodifiableSet(all); }</ECTX>"
Cli_16_2_GroupImpl,Cli,16,2,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { if (arg == null) { return false; } if (optionMap.containsKey(arg)) { return true; } final Map tailMap = optionMap.tailMap(arg); for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) { final Option option = (Option) iter.next(); if (option.canProcess(commandLine, arg)) { return true; } } if (commandLine.looksLikeOption(arg)) { return false; } if (anonymous.size() > 0) { return true; } return false; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { if (arg == null) { return false; } if (optionMap.containsKey(arg)) { return true; } final Map tailMap = optionMap.tailMap(arg); for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) { final Option option = (Option) iter.next(); if (option.canProcess(commandLine, arg)) { return true; } } if (commandLine.looksLikeOption(arg)) { return false; } if (anonymous.size() > 0) { return true; } return false; } public GroupImpl(List, String, String, int, int); private final List anonymous; private final SortedMap optionMap; }</FCTX> <ECTX>public interface Option { boolean canProcess(WriteableCommandLine, String); } public interface WriteableCommandLine extends CommandLine { boolean looksLikeOption(String); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { if (arg == null) { return false; } if (optionMap.containsKey(arg)) { return true; } final Map tailMap = optionMap.tailMap(arg); for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) { final Option option = (Option) iter.next(); if (option.canProcess(commandLine, arg)) { return true; } } if (commandLine.looksLikeOption(arg)) { return false; } if (anonymous.size() > 0) { return true; } return false; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final List anonymous; private final SortedMap optionMap;</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { boolean canProcess(WriteableCommandLine, String); } public interface WriteableCommandLine extends CommandLine { boolean looksLikeOption(String); }</ECTX>"
Cli_16_3_GroupImpl,Cli,16,3,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public Set getPrefixes() { return prefixes; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public Set getPrefixes() { return prefixes; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public Set getPrefixes() { return prefixes; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_4_GroupImpl,Cli,16,4,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public Set getTriggers() { return optionMap.keySet(); } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public Set getTriggers() { return optionMap.keySet(); } public GroupImpl(List, String, String, int, int); private final SortedMap optionMap; }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public Set getTriggers() { return optionMap.keySet(); } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final SortedMap optionMap;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_5_GroupImpl,Cli,16,5,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void process(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { String previous = null; while (arguments.hasNext()) { final String arg = (String) arguments.next(); if (arg == previous) { arguments.previous(); break; } previous = arg; final Option opt = (Option) optionMap.get(arg); if (opt != null) { arguments.previous(); opt.process(commandLine, arguments); } else { if (commandLine.looksLikeOption(arg)) { final Collection values = optionMap.tailMap(arg).values(); boolean foundMemberOption = false; for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) { final Option option = (Option) i.next(); if (option.canProcess(commandLine, arg)) { foundMemberOption = true; arguments.previous(); option.process(commandLine, arguments); } } if (!foundMemberOption) { arguments.previous(); return; } } else { arguments.previous(); if (anonymous.isEmpty()) { break; } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Argument argument = (Argument) i.next(); if (argument.canProcess(commandLine, arguments)) { argument.process(commandLine, arguments); } } } } } } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void process(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { String previous = null; while (arguments.hasNext()) { final String arg = (String) arguments.next(); if (arg == previous) { arguments.previous(); break; } previous = arg; final Option opt = (Option) optionMap.get(arg); if (opt != null) { arguments.previous(); opt.process(commandLine, arguments); } else { if (commandLine.looksLikeOption(arg)) { final Collection values = optionMap.tailMap(arg).values(); boolean foundMemberOption = false; for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) { final Option option = (Option) i.next(); if (option.canProcess(commandLine, arg)) { foundMemberOption = true; arguments.previous(); option.process(commandLine, arguments); } } if (!foundMemberOption) { arguments.previous(); return; } } else { arguments.previous(); if (anonymous.isEmpty()) { break; } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Argument argument = (Argument) i.next(); if (argument.canProcess(commandLine, arguments)) { argument.process(commandLine, arguments); } } } } } } public GroupImpl(List, String, String, int, int); private final List anonymous; private final SortedMap optionMap; }</FCTX> <ECTX>public interface Argument extends Option { canProcess(WriteableCommandLine, ListIterator); process(WriteableCommandLine, ListIterator); } public interface Option { void process(WriteableCommandLine, ListIterator); boolean canProcess(WriteableCommandLine, String); } public interface WriteableCommandLine extends CommandLine { boolean looksLikeOption(String); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void process(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { String previous = null; while (arguments.hasNext()) { final String arg = (String) arguments.next(); if (arg == previous) { arguments.previous(); break; } previous = arg; final Option opt = (Option) optionMap.get(arg); if (opt != null) { arguments.previous(); opt.process(commandLine, arguments); } else { if (commandLine.looksLikeOption(arg)) { final Collection values = optionMap.tailMap(arg).values(); boolean foundMemberOption = false; for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) { final Option option = (Option) i.next(); if (option.canProcess(commandLine, arg)) { foundMemberOption = true; arguments.previous(); option.process(commandLine, arguments); } } if (!foundMemberOption) { arguments.previous(); return; } } else { arguments.previous(); if (anonymous.isEmpty()) { break; } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Argument argument = (Argument) i.next(); if (argument.canProcess(commandLine, arguments)) { argument.process(commandLine, arguments); } } } } } } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final List anonymous; private final SortedMap optionMap;</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Argument extends Option { canProcess(WriteableCommandLine, ListIterator); process(WriteableCommandLine, ListIterator); } public interface Option { void process(WriteableCommandLine, ListIterator); boolean canProcess(WriteableCommandLine, String); } public interface WriteableCommandLine extends CommandLine { boolean looksLikeOption(String); }</ECTX>"
Cli_16_6_GroupImpl,Cli,16,6,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void validate(final WriteableCommandLine commandLine) throws OptionException { int present = 0; Option unexpected = null; for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); boolean validate = option.isRequired() || option instanceof Group; if (commandLine.hasOption(option)) { if (++present > maximum) { unexpected = option; break; } validate = true; } if (validate) { option.validate(commandLine); } } if (unexpected != null) { throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName()); } if (present < minimum) { throw new OptionException(this, ResourceConstants.MISSING_OPTION); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.validate(commandLine); } } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void validate(final WriteableCommandLine commandLine) throws OptionException { int present = 0; Option unexpected = null; for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); boolean validate = option.isRequired() || option instanceof Group; if (commandLine.hasOption(option)) { if (++present > maximum) { unexpected = option; break; } validate = true; } if (validate) { option.validate(commandLine); } } if (unexpected != null) { throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName()); } if (present < minimum) { throw new OptionException(this, ResourceConstants.MISSING_OPTION); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.validate(commandLine); } } public GroupImpl(List, String, String, int, int); private final List options; private final int minimum; private final int maximum; private final List anonymous; }</FCTX> <ECTX>public interface Option { boolean isRequired(); void validate(WriteableCommandLine); String getPreferredName(); } public abstract class ResourceConstants { public static final String UNEXPECTED_TOKEN = ""Unexpected.token""; public static final String MISSING_OPTION = ""Missing.option""; } public interface WriteableCommandLine extends CommandLine { hasOption(Option); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void validate(final WriteableCommandLine commandLine) throws OptionException { int present = 0; Option unexpected = null; for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); boolean validate = option.isRequired() || option instanceof Group; if (commandLine.hasOption(option)) { if (++present > maximum) { unexpected = option; break; } validate = true; } if (validate) { option.validate(commandLine); } } if (unexpected != null) { throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName()); } if (present < minimum) { throw new OptionException(this, ResourceConstants.MISSING_OPTION); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.validate(commandLine); } } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final List options; private final int minimum; private final int maximum; private final List anonymous;</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { boolean isRequired(); void validate(WriteableCommandLine); String getPreferredName(); } public abstract class ResourceConstants { public static final String UNEXPECTED_TOKEN = ""Unexpected.token""; public static final String MISSING_OPTION = ""Missing.option""; } public interface WriteableCommandLine extends CommandLine { hasOption(Option); }</ECTX>"
Cli_16_7_GroupImpl,Cli,16,7,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public String getPreferredName() { return name; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public String getPreferredName() { return name; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public String getPreferredName() { return name; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_8_GroupImpl,Cli,16,8,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public String getDescription() { return description; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public String getDescription() { return description; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public String getDescription() { return description; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_9_GroupImpl,Cli,16,9,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { appendUsage(buffer, helpSettings, comp, ""|""); } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { appendUsage(buffer, helpSettings, comp, ""|""); } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { appendUsage(buffer, helpSettings, comp, ""|""); } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_10_GroupImpl,Cli,16,10,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator) { final Set helpSettingsCopy = new HashSet(helpSettings); final boolean optional = (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL); final boolean expanded = (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED); final boolean named = !expanded || ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME)); final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT); final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER); helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER); final boolean both = named && expanded; if (optional) { buffer.append('['); } if (named) { buffer.append(name); } if (both) { buffer.append("" (""); } if (expanded) { final Set childSettings; if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { childSettings = DisplaySetting.NONE; } else { childSettings = new HashSet(helpSettingsCopy); childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL); } final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.appendUsage(buffer, childSettings, comp); if (i.hasNext()) { buffer.append(separator); } } } if (both) { buffer.append(')'); } if (optional && outer) { buffer.append(']'); } if (arguments) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { buffer.append(' '); final Option option = (Option) i.next(); option.appendUsage(buffer, helpSettingsCopy, comp); } } if (optional && !outer) { buffer.append(']'); } } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator) { final Set helpSettingsCopy = new HashSet(helpSettings); final boolean optional = (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL); final boolean expanded = (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED); final boolean named = !expanded || ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME)); final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT); final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER); helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER); final boolean both = named && expanded; if (optional) { buffer.append('['); } if (named) { buffer.append(name); } if (both) { buffer.append("" (""); } if (expanded) { final Set childSettings; if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { childSettings = DisplaySetting.NONE; } else { childSettings = new HashSet(helpSettingsCopy); childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL); } final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.appendUsage(buffer, childSettings, comp); if (i.hasNext()) { buffer.append(separator); } } } if (both) { buffer.append(')'); } if (optional && outer) { buffer.append(']'); } if (arguments) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { buffer.append(' '); final Option option = (Option) i.next(); option.appendUsage(buffer, helpSettingsCopy, comp); } } if (optional && !outer) { buffer.append(']'); } } public GroupImpl(List, String, String, int, int); private final String name; private final List options; private final int minimum; private final List anonymous; }</FCTX> <ECTX>public class DisplaySetting { public static final Set NONE = Collections.EMPTY_SET; public static final DisplaySetting DISPLAY_OPTIONAL = new DisplaySetting(""DISPLAY_OPTIONAL""); public static final DisplaySetting DISPLAY_GROUP_NAME = new DisplaySetting(""DISPLAY_GROUP_NAME""); public static final DisplaySetting DISPLAY_GROUP_EXPANDED = new DisplaySetting(""DISPLAY_GROUP_EXPANDED""); public static final DisplaySetting DISPLAY_GROUP_ARGUMENT = new DisplaySetting(""DISPLAY_GROUP_ARGUMENT""); public static final DisplaySetting DISPLAY_GROUP_OUTER = new DisplaySetting(""DISPLAY_GROUP_OUTER""); } public interface Option { void appendUsage(StringBuffer, Set, Comparator); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator) { final Set helpSettingsCopy = new HashSet(helpSettings); final boolean optional = (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL); final boolean expanded = (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED); final boolean named = !expanded || ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME)); final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT); final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER); helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER); final boolean both = named && expanded; if (optional) { buffer.append('['); } if (named) { buffer.append(name); } if (both) { buffer.append("" (""); } if (expanded) { final Set childSettings; if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { childSettings = DisplaySetting.NONE; } else { childSettings = new HashSet(helpSettingsCopy); childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL); } final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.appendUsage(buffer, childSettings, comp); if (i.hasNext()) { buffer.append(separator); } } } if (both) { buffer.append(')'); } if (optional && outer) { buffer.append(']'); } if (arguments) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { buffer.append(' '); final Option option = (Option) i.next(); option.appendUsage(buffer, helpSettingsCopy, comp); } } if (optional && !outer) { buffer.append(']'); } } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final String name; private final List options; private final int minimum; private final List anonymous;</PRIVATE_FCTX> }</FCTX> <ECTX>public class DisplaySetting { public static final Set NONE = Collections.EMPTY_SET; public static final DisplaySetting DISPLAY_OPTIONAL = new DisplaySetting(""DISPLAY_OPTIONAL""); public static final DisplaySetting DISPLAY_GROUP_NAME = new DisplaySetting(""DISPLAY_GROUP_NAME""); public static final DisplaySetting DISPLAY_GROUP_EXPANDED = new DisplaySetting(""DISPLAY_GROUP_EXPANDED""); public static final DisplaySetting DISPLAY_GROUP_ARGUMENT = new DisplaySetting(""DISPLAY_GROUP_ARGUMENT""); public static final DisplaySetting DISPLAY_GROUP_OUTER = new DisplaySetting(""DISPLAY_GROUP_OUTER""); } public interface Option { void appendUsage(StringBuffer, Set, Comparator); }</ECTX>"
Cli_16_11_GroupImpl,Cli,16,11,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final List helpLines = new ArrayList(); if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) { final HelpLine helpLine = new HelpLineImpl(this, depth); helpLines.add(helpLine); } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } return helpLines; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final List helpLines = new ArrayList(); if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) { final HelpLine helpLine = new HelpLineImpl(this, depth); helpLines.add(helpLine); } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } return helpLines; } public GroupImpl(List, String, String, int, int); private final List options; private final List anonymous; }</FCTX> <ECTX>public class DisplaySetting { public static final DisplaySetting DISPLAY_GROUP_NAME = new DisplaySetting(""DISPLAY_GROUP_NAME""); public static final DisplaySetting DISPLAY_GROUP_EXPANDED = new DisplaySetting(""DISPLAY_GROUP_EXPANDED""); public static final DisplaySetting DISPLAY_GROUP_ARGUMENT = new DisplaySetting(""DISPLAY_GROUP_ARGUMENT""); } public interface Option { List helpLines(int, Set, Comparator); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final List helpLines = new ArrayList(); if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) { final HelpLine helpLine = new HelpLineImpl(this, depth); helpLines.add(helpLine); } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } return helpLines; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final List options; private final List anonymous;</PRIVATE_FCTX> }</FCTX> <ECTX>public class DisplaySetting { public static final DisplaySetting DISPLAY_GROUP_NAME = new DisplaySetting(""DISPLAY_GROUP_NAME""); public static final DisplaySetting DISPLAY_GROUP_EXPANDED = new DisplaySetting(""DISPLAY_GROUP_EXPANDED""); public static final DisplaySetting DISPLAY_GROUP_ARGUMENT = new DisplaySetting(""DISPLAY_GROUP_ARGUMENT""); } public interface Option { List helpLines(int, Set, Comparator); }</ECTX>"
Cli_16_12_OptionImpl,Cli,16,12,org.apache.commons.cli2.option.OptionImpl,OptionImpl,src/java/org/apache/commons/cli2/option/OptionImpl.java,OptionImpl_ESTest,org/apache/commons/cli2/option/OptionImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Iterator;|import java.util.ListIterator;|import java.util.Set;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","OptionImpl implements Option { public int getId() { return id; } public OptionImpl(int, boolean); public boolean canProcess(WriteableCommandLine, ListIterator); public String toString(); public int getId(); public boolean equals(Object); public int hashCode(); public Option findOption(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public Option getParent(); public void setParent(Option); protected void checkPrefixes(Set); }","<FCTX>OptionImpl implements Option { public int getId() { return id; } public OptionImpl(int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>OptionImpl implements Option { public int getId() { return id; } public OptionImpl(int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_13_GroupImpl,Cli,16,13,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public List getOptions() { return options; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public List getOptions() { return options; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public List getOptions() { return options; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_14_GroupImpl,Cli,16,14,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public List getAnonymous() { return anonymous; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public List getAnonymous() { return anonymous; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public List getAnonymous() { return anonymous; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_15_GroupImpl,Cli,16,15,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public Option findOption(final String trigger) { final Iterator i = getOptions().iterator(); while (i.hasNext()) { final Option option = (Option) i.next(); final Option found = option.findOption(trigger); if (found != null) { return found; } } return null; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public Option findOption(final String trigger) { final Iterator i = getOptions().iterator(); while (i.hasNext()) { final Option option = (Option) i.next(); final Option found = option.findOption(trigger); if (found != null) { return found; } } return null; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX>public interface Option { Option findOption(String); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public Option findOption(final String trigger) { final Iterator i = getOptions().iterator(); while (i.hasNext()) { final Option option = (Option) i.next(); final Option found = option.findOption(trigger); if (found != null) { return found; } } return null; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { Option findOption(String); }</ECTX>"
Cli_16_16_GroupImpl,Cli,16,16,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public int getMinimum() { return minimum; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public int getMinimum() { return minimum; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public int getMinimum() { return minimum; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_17_GroupImpl,Cli,16,17,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public int getMaximum() { return maximum; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public int getMaximum() { return maximum; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public int getMaximum() { return maximum; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_18_GroupImpl,Cli,16,18,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public boolean isRequired() { return getMinimum() > 0; } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public boolean isRequired() { return getMinimum() > 0; } public GroupImpl(List, String, String, int, int); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public boolean isRequired() { return getMinimum() > 0; } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_19_GroupImpl,Cli,16,19,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } } public GroupImpl(List, String, String, int, int); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } } public GroupImpl(List, String, String, int, int); private final List options; private final List anonymous; }</FCTX> <ECTX>public interface Option { void defaults(WriteableCommandLine); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } } public GroupImpl(List, String, String, int, int); <PRIVATE_FCTX>private final List options; private final List anonymous;</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { void defaults(WriteableCommandLine); }</ECTX>"
Cli_16_20_GroupImpl,Cli,16,20,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,,"import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","ReverseStringComparator implements Comparator { public static final Comparator getInstance() { return instance; } private ReverseStringComparator(); public static final Comparator getInstance(); public int compare(Object, Object); }","<FCTX>ReverseStringComparator implements Comparator { public static final Comparator getInstance() { return instance; } private ReverseStringComparator(); }</FCTX> <ECTX></ECTX>","<FCTX>ReverseStringComparator implements Comparator { public static final Comparator getInstance() { return instance; } <PRIVATE_FCTX>private ReverseStringComparator();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_21_GroupImpl,Cli,16,21,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,,"import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","ReverseStringComparator implements Comparator { public int compare(final Object o1, final Object o2) { final String s1 = (String) o1; final String s2 = (String) o2; return -s1.compareTo(s2); } private ReverseStringComparator(); public static final Comparator getInstance(); public int compare(Object, Object); }","<FCTX>ReverseStringComparator implements Comparator { public int compare(final Object o1, final Object o2) { final String s1 = (String) o1; final String s2 = (String) o2; return -s1.compareTo(s2); } private ReverseStringComparator(); }</FCTX> <ECTX></ECTX>","<FCTX>ReverseStringComparator implements Comparator { public int compare(final Object o1, final Object o2) { final String s1 = (String) o1; final String s2 = (String) o2; return -s1.compareTo(s2); } <PRIVATE_FCTX>private ReverseStringComparator();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_22_WriteableCommandLineImpl,Cli,16,22,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } Option parent = option.getParent(); while (parent != null && !options.contains(parent)) { options.add(parent); parent = parent.getParent(); } } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } Option parent = option.getParent(); while (parent != null && !options.contains(parent)) { options.add(parent); parent = parent.getParent(); } } public WriteableCommandLineImpl(Option, List); private final List options = new ArrayList(); private final Map nameToOption = new HashMap(); }</FCTX> <ECTX>public interface Option { String getPreferredName(); Set getTriggers(); Option getParent(); }</ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } Option parent = option.getParent(); while (parent != null && !options.contains(parent)) { options.add(parent); parent = parent.getParent(); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List options = new ArrayList(); private final Map nameToOption = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { String getPreferredName(); Set getTriggers(); Option getParent(); }</ECTX>"
Cli_16_23_OptionImpl,Cli,16,23,org.apache.commons.cli2.option.OptionImpl,OptionImpl,src/java/org/apache/commons/cli2/option/OptionImpl.java,OptionImpl_ESTest,org/apache/commons/cli2/option/OptionImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Iterator;|import java.util.ListIterator;|import java.util.Set;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","OptionImpl implements Option { public boolean equals(final Object thatObj) { if (thatObj instanceof OptionImpl) { final OptionImpl that = (OptionImpl) thatObj; return (getId() == that.getId()) && equals(getPreferredName(), that.getPreferredName()) && equals(getDescription(), that.getDescription()) && equals(getPrefixes(), that.getPrefixes()) && equals(getTriggers(), that.getTriggers()); } else { return false; } } public OptionImpl(int, boolean); public boolean canProcess(WriteableCommandLine, ListIterator); public String toString(); public int getId(); public boolean equals(Object); public int hashCode(); public Option findOption(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public Option getParent(); public void setParent(Option); protected void checkPrefixes(Set); }","<FCTX>OptionImpl implements Option { public boolean equals(final Object thatObj) { if (thatObj instanceof OptionImpl) { final OptionImpl that = (OptionImpl) thatObj; return (getId() == that.getId()) && equals(getPreferredName(), that.getPreferredName()) && equals(getDescription(), that.getDescription()) && equals(getPrefixes(), that.getPrefixes()) && equals(getTriggers(), that.getTriggers()); } else { return false; } } public OptionImpl(int, boolean); private boolean equals(Object, Object); }</FCTX> <ECTX>public abstract class OptionImpl implements Option { public OptionImpl(int, boolean); public int getId(); getDescription(); getPreferredName(); getPrefixes(); getTriggers(); }</ECTX>","<FCTX>OptionImpl implements Option { public boolean equals(final Object thatObj) { if (thatObj instanceof OptionImpl) { final OptionImpl that = (OptionImpl) thatObj; return (getId() == that.getId()) && equals(getPreferredName(), that.getPreferredName()) && equals(getDescription(), that.getDescription()) && equals(getPrefixes(), that.getPrefixes()) && equals(getTriggers(), that.getTriggers()); } else { return false; } } public OptionImpl(int, boolean); <PRIVATE_FCTX>private boolean equals(Object, Object);</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class OptionImpl implements Option { public OptionImpl(int, boolean); public int getId(); getDescription(); getPreferredName(); getPrefixes(); getTriggers(); }</ECTX>"
Cli_16_24_WriteableCommandLineImpl,Cli,16,24,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public WriteableCommandLineImpl(Option, List); private final Map values = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map values = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_25_WriteableCommandLineImpl,Cli,16,25,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public WriteableCommandLineImpl(Option, List); private final Map switches = new HashMap(); }</FCTX> <ECTX>public abstract class ResourceConstants { public static final String SWITCH_ALREADY_SET = ""Switch.already.set""; } public class ResourceHelper { public static ResourceHelper getResourceHelper(); }</ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map switches = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class ResourceConstants { public static final String SWITCH_ALREADY_SET = ""Switch.already.set""; } public class ResourceHelper { public static ResourceHelper getResourceHelper(); }</ECTX>"
Cli_16_26_WriteableCommandLineImpl,Cli,16,26,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public WriteableCommandLineImpl(Option, List); private final List options = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List options = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_27_WriteableCommandLineImpl,Cli,16,27,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public WriteableCommandLineImpl(Option, List); private final Map nameToOption = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map nameToOption = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_28_WriteableCommandLineImpl,Cli,16,28,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; } public WriteableCommandLineImpl(Option, List); private final Map values = new HashMap(); private final Map defaultValues = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map values = new HashMap(); private final Map defaultValues = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_29_WriteableCommandLineImpl,Cli,16,29,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); private final Map values = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map values = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_30_WriteableCommandLineImpl,Cli,16,30,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public WriteableCommandLineImpl(Option, List); private final Map switches = new HashMap(); private final Map defaultSwitches = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map switches = new HashMap(); private final Map defaultSwitches = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_31_WriteableCommandLineImpl,Cli,16,31,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } public WriteableCommandLineImpl(Option, List); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_32_WriteableCommandLineImpl,Cli,16,32,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final Option option, final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final Option option, final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } public WriteableCommandLineImpl(Option, List); private final Map optionToProperties = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final Option option, final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map optionToProperties = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_33_WriteableCommandLineImpl,Cli,16,33,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { addProperty(new PropertyOption(), property, value); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { addProperty(new PropertyOption(), property, value); } public WriteableCommandLineImpl(Option, List); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { addProperty(new PropertyOption(), property, value); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_34_OptionImpl,Cli,16,34,org.apache.commons.cli2.option.OptionImpl,OptionImpl,src/java/org/apache/commons/cli2/option/OptionImpl.java,OptionImpl_ESTest,org/apache/commons/cli2/option/OptionImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Iterator;|import java.util.ListIterator;|import java.util.Set;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","OptionImpl implements Option { public int hashCode() { int hashCode = getId(); if (getPreferredName() != null) { hashCode = (hashCode * 37) + getPreferredName().hashCode(); } if (getDescription() != null) { hashCode = (hashCode * 37) + getDescription().hashCode(); } hashCode = (hashCode * 37) + getPrefixes().hashCode(); hashCode = (hashCode * 37) + getTriggers().hashCode(); return hashCode; } public OptionImpl(int, boolean); public boolean canProcess(WriteableCommandLine, ListIterator); public String toString(); public int getId(); public boolean equals(Object); public int hashCode(); public Option findOption(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public Option getParent(); public void setParent(Option); protected void checkPrefixes(Set); }","<FCTX>OptionImpl implements Option { public int hashCode() { int hashCode = getId(); if (getPreferredName() != null) { hashCode = (hashCode * 37) + getPreferredName().hashCode(); } if (getDescription() != null) { hashCode = (hashCode * 37) + getDescription().hashCode(); } hashCode = (hashCode * 37) + getPrefixes().hashCode(); hashCode = (hashCode * 37) + getTriggers().hashCode(); return hashCode; } public OptionImpl(int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>OptionImpl implements Option { public int hashCode() { int hashCode = getId(); if (getPreferredName() != null) { hashCode = (hashCode * 37) + getPreferredName().hashCode(); } if (getDescription() != null) { hashCode = (hashCode * 37) + getDescription().hashCode(); } hashCode = (hashCode * 37) + getPrefixes().hashCode(); hashCode = (hashCode * 37) + getTriggers().hashCode(); return hashCode; } public OptionImpl(int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_35_WriteableCommandLineImpl,Cli,16,35,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue); } public WriteableCommandLineImpl(Option, List); private final Map optionToProperties = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map optionToProperties = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_36_WriteableCommandLineImpl,Cli,16,36,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } public WriteableCommandLineImpl(Option, List); private final Map optionToProperties = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map optionToProperties = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_37_WriteableCommandLineImpl,Cli,16,37,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return getProperties(new PropertyOption()); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return getProperties(new PropertyOption()); } public WriteableCommandLineImpl(Option, List); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return getProperties(new PropertyOption()); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_38_WriteableCommandLineImpl,Cli,16,38,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } public WriteableCommandLineImpl(Option, List); private final Set prefixes; }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Set prefixes;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_39_WriteableCommandLineImpl,Cli,16,39,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(""\"""").append(arg).append(""\""""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(""\"""").append(arg).append(""\""""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } public WriteableCommandLineImpl(Option, List); private final List normalised; }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(""\"""").append(arg).append(""\""""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List normalised;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_40_WriteableCommandLineImpl,Cli,16,40,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } public WriteableCommandLineImpl(Option, List); private final List options = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List options = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_41_WriteableCommandLineImpl,Cli,16,41,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public WriteableCommandLineImpl(Option, List); private final Map nameToOption = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map nameToOption = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_42_WriteableCommandLineImpl,Cli,16,42,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public WriteableCommandLineImpl(Option, List); private final Map defaultValues = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map defaultValues = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_43_WriteableCommandLineImpl,Cli,16,43,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public WriteableCommandLineImpl(Option, List); private final Map defaultSwitches = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map defaultSwitches = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_44_WriteableCommandLineImpl,Cli,16,44,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } public WriteableCommandLineImpl(Option, List); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } public WriteableCommandLineImpl(Option, List); private final List normalised; }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List normalised;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_45_OptionImpl,Cli,16,45,org.apache.commons.cli2.option.OptionImpl,OptionImpl,src/java/org/apache/commons/cli2/option/OptionImpl.java,OptionImpl_ESTest,org/apache/commons/cli2/option/OptionImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Iterator;|import java.util.ListIterator;|import java.util.Set;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","OptionImpl implements Option { public Option findOption(String trigger) { if (getTriggers().contains(trigger)) { return this; } else { return null; } } public OptionImpl(int, boolean); public boolean canProcess(WriteableCommandLine, ListIterator); public String toString(); public int getId(); public boolean equals(Object); public int hashCode(); public Option findOption(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public Option getParent(); public void setParent(Option); protected void checkPrefixes(Set); }","<FCTX>OptionImpl implements Option { public Option findOption(String trigger) { if (getTriggers().contains(trigger)) { return this; } else { return null; } } public OptionImpl(int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>OptionImpl implements Option { public Option findOption(String trigger) { if (getTriggers().contains(trigger)) { return this; } else { return null; } } public OptionImpl(int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_46_OptionImpl,Cli,16,46,org.apache.commons.cli2.option.OptionImpl,OptionImpl,src/java/org/apache/commons/cli2/option/OptionImpl.java,OptionImpl_ESTest,org/apache/commons/cli2/option/OptionImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Iterator;|import java.util.ListIterator;|import java.util.Set;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","OptionImpl implements Option { public boolean isRequired() { return required; } public OptionImpl(int, boolean); public boolean canProcess(WriteableCommandLine, ListIterator); public String toString(); public int getId(); public boolean equals(Object); public int hashCode(); public Option findOption(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public Option getParent(); public void setParent(Option); protected void checkPrefixes(Set); }","<FCTX>OptionImpl implements Option { public boolean isRequired() { return required; } public OptionImpl(int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>OptionImpl implements Option { public boolean isRequired() { return required; } public OptionImpl(int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_47_OptionImpl,Cli,16,47,org.apache.commons.cli2.option.OptionImpl,OptionImpl,src/java/org/apache/commons/cli2/option/OptionImpl.java,OptionImpl_ESTest,org/apache/commons/cli2/option/OptionImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Iterator;|import java.util.ListIterator;|import java.util.Set;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","OptionImpl implements Option { public void defaults(final WriteableCommandLine commandLine) { } public OptionImpl(int, boolean); public boolean canProcess(WriteableCommandLine, ListIterator); public String toString(); public int getId(); public boolean equals(Object); public int hashCode(); public Option findOption(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public Option getParent(); public void setParent(Option); protected void checkPrefixes(Set); }","<FCTX>OptionImpl implements Option { public void defaults(final WriteableCommandLine commandLine) { } public OptionImpl(int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>OptionImpl implements Option { public void defaults(final WriteableCommandLine commandLine) { } public OptionImpl(int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_48_OptionImpl,Cli,16,48,org.apache.commons.cli2.option.OptionImpl,OptionImpl,src/java/org/apache/commons/cli2/option/OptionImpl.java,OptionImpl_ESTest,org/apache/commons/cli2/option/OptionImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Iterator;|import java.util.ListIterator;|import java.util.Set;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","OptionImpl implements Option { public Option getParent() { return parent; } public OptionImpl(int, boolean); public boolean canProcess(WriteableCommandLine, ListIterator); public String toString(); public int getId(); public boolean equals(Object); public int hashCode(); public Option findOption(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public Option getParent(); public void setParent(Option); protected void checkPrefixes(Set); }","<FCTX>OptionImpl implements Option { public Option getParent() { return parent; } public OptionImpl(int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>OptionImpl implements Option { public Option getParent() { return parent; } public OptionImpl(int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_16_49_OptionImpl,Cli,16,49,org.apache.commons.cli2.option.OptionImpl,OptionImpl,src/java/org/apache/commons/cli2/option/OptionImpl.java,OptionImpl_ESTest,org/apache/commons/cli2/option/OptionImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.Iterator;|import java.util.ListIterator;|import java.util.Set;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","OptionImpl implements Option { public void setParent(Option parent) { this.parent = parent; } public OptionImpl(int, boolean); public boolean canProcess(WriteableCommandLine, ListIterator); public String toString(); public int getId(); public boolean equals(Object); public int hashCode(); public Option findOption(String); public boolean isRequired(); public void defaults(WriteableCommandLine); public Option getParent(); public void setParent(Option); protected void checkPrefixes(Set); }","<FCTX>OptionImpl implements Option { public void setParent(Option parent) { this.parent = parent; } public OptionImpl(int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>OptionImpl implements Option { public void setParent(Option parent) { this.parent = parent; } public OptionImpl(int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_0_WriteableCommandLineImpl,Cli,21,0,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getCurrentOption() { return currentOption; } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getCurrentOption() { return currentOption; } public WriteableCommandLineImpl(Option, List); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getCurrentOption() { return currentOption; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_1_WriteableCommandLineImpl,Cli,21,1,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setCurrentOption(Option currentOption) { this.currentOption = currentOption; } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setCurrentOption(Option currentOption) { this.currentOption = currentOption; } public WriteableCommandLineImpl(Option, List); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setCurrentOption(Option currentOption) { this.currentOption = currentOption; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_2_WriteableCommandLineImpl,Cli,21,2,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } public WriteableCommandLineImpl(Option, List); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_3_WriteableCommandLineImpl,Cli,21,3,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final Option option, final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final Option option, final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } public WriteableCommandLineImpl(Option, List); private final Map optionToProperties = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final Option option, final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map optionToProperties = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_4_WriteableCommandLineImpl,Cli,21,4,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { addProperty(new PropertyOption(), property, value); } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { addProperty(new PropertyOption(), property, value); } public WriteableCommandLineImpl(Option, List); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addProperty(final String property, final String value) { addProperty(new PropertyOption(), property, value); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_5_WriteableCommandLineImpl,Cli,21,5,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue); } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue); } public WriteableCommandLineImpl(Option, List); private final Map optionToProperties = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map optionToProperties = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_6_WriteableCommandLineImpl,Cli,21,6,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } public WriteableCommandLineImpl(Option, List); private final Map optionToProperties = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map optionToProperties = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_7_WriteableCommandLineImpl,Cli,21,7,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return getProperties(new PropertyOption()); } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return getProperties(new PropertyOption()); } public WriteableCommandLineImpl(Option, List); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getProperties() { return getProperties(new PropertyOption()); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_8_WriteableCommandLineImpl,Cli,21,8,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { if (checkForOption != null) { return !checkForOption.equals(trigger); } checkForOption = trigger; try { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { if (getCurrentOption().canProcess(this, trigger) || getCurrentOption().findOption(trigger) != null) { return true; } } } return false; } finally { checkForOption = null; } } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { if (checkForOption != null) { return !checkForOption.equals(trigger); } checkForOption = trigger; try { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { if (getCurrentOption().canProcess(this, trigger) || getCurrentOption().findOption(trigger) != null) { return true; } } } return false; } finally { checkForOption = null; } } public WriteableCommandLineImpl(Option, List); private final Set prefixes; private String checkForOption; }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean looksLikeOption(final String trigger) { if (checkForOption != null) { return !checkForOption.equals(trigger); } checkForOption = trigger; try { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { if (getCurrentOption().canProcess(this, trigger) || getCurrentOption().findOption(trigger) != null) { return true; } } } return false; } finally { checkForOption = null; } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Set prefixes; private String checkForOption;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_9_WriteableCommandLineImpl,Cli,21,9,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(""\"""").append(arg).append(""\""""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(""\"""").append(arg).append(""\""""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } public WriteableCommandLineImpl(Option, List); private final List normalised; }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(""\"""").append(arg).append(""\""""); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List normalised;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_10_WriteableCommandLineImpl,Cli,21,10,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } public WriteableCommandLineImpl(Option, List); private final List options = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getOptions() { return Collections.unmodifiableList(options); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List options = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_11_WriteableCommandLineImpl,Cli,21,11,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public WriteableCommandLineImpl(Option, List); private final Map nameToOption = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map nameToOption = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_12_WriteableCommandLineImpl,Cli,21,12,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } Option parent = option.getParent(); while (parent != null && !options.contains(parent)) { options.add(parent); parent = parent.getParent(); } } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } Option parent = option.getParent(); while (parent != null && !options.contains(parent)) { options.add(parent); parent = parent.getParent(); } } public WriteableCommandLineImpl(Option, List); private final List options = new ArrayList(); private final Map nameToOption = new HashMap(); }</FCTX> <ECTX>public interface Option { String getPreferredName(); Set getTriggers(); Option getParent(); }</ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } Option parent = option.getParent(); while (parent != null && !options.contains(parent)) { options.add(parent); parent = parent.getParent(); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List options = new ArrayList(); private final Map nameToOption = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { String getPreferredName(); Set getTriggers(); Option getParent(); }</ECTX>"
Cli_21_13_WriteableCommandLineImpl,Cli,21,13,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public WriteableCommandLineImpl(Option, List); private final Map defaultValues = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map defaultValues = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_14_WriteableCommandLineImpl,Cli,21,14,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public WriteableCommandLineImpl(Option, List); private final Map defaultSwitches = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map defaultSwitches = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_15_WriteableCommandLineImpl,Cli,21,15,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } public WriteableCommandLineImpl(Option, List); private final List normalised; }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getNormalised() { return Collections.unmodifiableList(normalised); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List normalised;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_16_GroupImpl,Cli,21,16,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { if (arg == null) { return false; } if (optionMap.containsKey(arg)) { return true; } final Map tailMap = optionMap.tailMap(arg); for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) { final Option option = (Option) iter.next(); if (option.canProcess(commandLine, arg)) { return true; } } if (looksLikeOption(commandLine, arg)) { return false; } if (anonymous.size() > 0) { return true; } return false; } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { if (arg == null) { return false; } if (optionMap.containsKey(arg)) { return true; } final Map tailMap = optionMap.tailMap(arg); for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) { final Option option = (Option) iter.next(); if (option.canProcess(commandLine, arg)) { return true; } } if (looksLikeOption(commandLine, arg)) { return false; } if (anonymous.size() > 0) { return true; } return false; } public GroupImpl(List, String, String, int, int, boolean); private boolean looksLikeOption(WriteableCommandLine, String); private final List anonymous; private final SortedMap optionMap; }</FCTX> <ECTX>public interface Option { boolean canProcess(WriteableCommandLine, String); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { if (arg == null) { return false; } if (optionMap.containsKey(arg)) { return true; } final Map tailMap = optionMap.tailMap(arg); for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) { final Option option = (Option) iter.next(); if (option.canProcess(commandLine, arg)) { return true; } } if (looksLikeOption(commandLine, arg)) { return false; } if (anonymous.size() > 0) { return true; } return false; } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX>private boolean looksLikeOption(WriteableCommandLine, String); private final List anonymous; private final SortedMap optionMap;</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { boolean canProcess(WriteableCommandLine, String); }</ECTX>"
Cli_21_17_GroupImpl,Cli,21,17,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public Set getPrefixes() { return prefixes; } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public Set getPrefixes() { return prefixes; } public GroupImpl(List, String, String, int, int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public Set getPrefixes() { return prefixes; } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_18_GroupImpl,Cli,21,18,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public Set getTriggers() { return optionMap.keySet(); } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public Set getTriggers() { return optionMap.keySet(); } public GroupImpl(List, String, String, int, int, boolean); private final SortedMap optionMap; }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public Set getTriggers() { return optionMap.keySet(); } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX>private final SortedMap optionMap;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_19_GroupImpl,Cli,21,19,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void process(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { String previous = null; while (arguments.hasNext()) { final String arg = (String) arguments.next(); if (arg == previous) { arguments.previous(); break; } previous = arg; final Option opt = (Option) optionMap.get(arg); if (opt != null) { arguments.previous(); opt.process(commandLine, arguments); } else { if (looksLikeOption(commandLine, arg)) { final Collection values = optionMap.tailMap(arg).values(); boolean foundMemberOption = false; for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) { final Option option = (Option) i.next(); if (option.canProcess(commandLine, arg)) { foundMemberOption = true; arguments.previous(); option.process(commandLine, arguments); } } if (!foundMemberOption) { arguments.previous(); return; } } else { arguments.previous(); if (anonymous.isEmpty()) { break; } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Argument argument = (Argument) i.next(); if (argument.canProcess(commandLine, arguments)) { argument.process(commandLine, arguments); } } } } } } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void process(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { String previous = null; while (arguments.hasNext()) { final String arg = (String) arguments.next(); if (arg == previous) { arguments.previous(); break; } previous = arg; final Option opt = (Option) optionMap.get(arg); if (opt != null) { arguments.previous(); opt.process(commandLine, arguments); } else { if (looksLikeOption(commandLine, arg)) { final Collection values = optionMap.tailMap(arg).values(); boolean foundMemberOption = false; for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) { final Option option = (Option) i.next(); if (option.canProcess(commandLine, arg)) { foundMemberOption = true; arguments.previous(); option.process(commandLine, arguments); } } if (!foundMemberOption) { arguments.previous(); return; } } else { arguments.previous(); if (anonymous.isEmpty()) { break; } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Argument argument = (Argument) i.next(); if (argument.canProcess(commandLine, arguments)) { argument.process(commandLine, arguments); } } } } } } public GroupImpl(List, String, String, int, int, boolean); private boolean looksLikeOption(WriteableCommandLine, String); private final List anonymous; private final SortedMap optionMap; }</FCTX> <ECTX>public interface Argument extends Option { canProcess(WriteableCommandLine, ListIterator); process(WriteableCommandLine, ListIterator); } public interface Option { void process(WriteableCommandLine, ListIterator); boolean canProcess(WriteableCommandLine, String); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void process(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { String previous = null; while (arguments.hasNext()) { final String arg = (String) arguments.next(); if (arg == previous) { arguments.previous(); break; } previous = arg; final Option opt = (Option) optionMap.get(arg); if (opt != null) { arguments.previous(); opt.process(commandLine, arguments); } else { if (looksLikeOption(commandLine, arg)) { final Collection values = optionMap.tailMap(arg).values(); boolean foundMemberOption = false; for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) { final Option option = (Option) i.next(); if (option.canProcess(commandLine, arg)) { foundMemberOption = true; arguments.previous(); option.process(commandLine, arguments); } } if (!foundMemberOption) { arguments.previous(); return; } } else { arguments.previous(); if (anonymous.isEmpty()) { break; } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Argument argument = (Argument) i.next(); if (argument.canProcess(commandLine, arguments)) { argument.process(commandLine, arguments); } } } } } } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX>private boolean looksLikeOption(WriteableCommandLine, String); private final List anonymous; private final SortedMap optionMap;</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Argument extends Option { canProcess(WriteableCommandLine, ListIterator); process(WriteableCommandLine, ListIterator); } public interface Option { void process(WriteableCommandLine, ListIterator); boolean canProcess(WriteableCommandLine, String); }</ECTX>"
Cli_21_20_GroupImpl,Cli,21,20,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void validate(final WriteableCommandLine commandLine) throws OptionException { int present = 0; Option unexpected = null; for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); boolean validate = option.isRequired(); if (commandLine.hasOption(option)) { if (++present > maximum) { unexpected = option; break; } validate = true; } if (validate) { option.validate(commandLine); } } if (unexpected != null) { throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName()); } if (present < minimum) { throw new OptionException(this, ResourceConstants.MISSING_OPTION); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.validate(commandLine); } } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void validate(final WriteableCommandLine commandLine) throws OptionException { int present = 0; Option unexpected = null; for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); boolean validate = option.isRequired(); if (commandLine.hasOption(option)) { if (++present > maximum) { unexpected = option; break; } validate = true; } if (validate) { option.validate(commandLine); } } if (unexpected != null) { throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName()); } if (present < minimum) { throw new OptionException(this, ResourceConstants.MISSING_OPTION); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.validate(commandLine); } } public GroupImpl(List, String, String, int, int, boolean); private final List options; private final int minimum; private final int maximum; private final List anonymous; }</FCTX> <ECTX>public interface Option { boolean isRequired(); void validate(WriteableCommandLine); String getPreferredName(); } public abstract class ResourceConstants { public static final String UNEXPECTED_TOKEN = ""Unexpected.token""; public static final String MISSING_OPTION = ""Missing.option""; } public interface WriteableCommandLine extends CommandLine { hasOption(Option); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void validate(final WriteableCommandLine commandLine) throws OptionException { int present = 0; Option unexpected = null; for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); boolean validate = option.isRequired(); if (commandLine.hasOption(option)) { if (++present > maximum) { unexpected = option; break; } validate = true; } if (validate) { option.validate(commandLine); } } if (unexpected != null) { throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, unexpected.getPreferredName()); } if (present < minimum) { throw new OptionException(this, ResourceConstants.MISSING_OPTION); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.validate(commandLine); } } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX>private final List options; private final int minimum; private final int maximum; private final List anonymous;</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { boolean isRequired(); void validate(WriteableCommandLine); String getPreferredName(); } public abstract class ResourceConstants { public static final String UNEXPECTED_TOKEN = ""Unexpected.token""; public static final String MISSING_OPTION = ""Missing.option""; } public interface WriteableCommandLine extends CommandLine { hasOption(Option); }</ECTX>"
Cli_21_21_GroupImpl,Cli,21,21,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public String getPreferredName() { return name; } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public String getPreferredName() { return name; } public GroupImpl(List, String, String, int, int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public String getPreferredName() { return name; } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_22_GroupImpl,Cli,21,22,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public String getDescription() { return description; } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public String getDescription() { return description; } public GroupImpl(List, String, String, int, int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public String getDescription() { return description; } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_23_WriteableCommandLineImpl,Cli,21,23,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public WriteableCommandLineImpl(Option, List); private final Map values = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map values = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_24_GroupImpl,Cli,21,24,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { appendUsage(buffer, helpSettings, comp, ""|""); } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { appendUsage(buffer, helpSettings, comp, ""|""); } public GroupImpl(List, String, String, int, int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { appendUsage(buffer, helpSettings, comp, ""|""); } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_25_GroupImpl,Cli,21,25,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator) { final Set helpSettingsCopy = new HashSet(helpSettings); final boolean optional = !isRequired() && (helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL_CHILD_GROUP)); final boolean expanded = (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED); final boolean named = !expanded || ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME)); final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT); final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER); helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER); final boolean both = named && expanded; if (optional) { buffer.append('['); } if (named) { buffer.append(name); } if (both) { buffer.append("" (""); } if (expanded) { final Set childSettings; if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { childSettings = DisplaySetting.NONE; } else { childSettings = new HashSet(helpSettingsCopy); childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL); } final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.appendUsage(buffer, childSettings, comp); if (i.hasNext()) { buffer.append(separator); } } } if (both) { buffer.append(')'); } if (optional && outer) { buffer.append(']'); } if (arguments) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { buffer.append(' '); final Option option = (Option) i.next(); option.appendUsage(buffer, helpSettingsCopy, comp); } } if (optional && !outer) { buffer.append(']'); } } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator) { final Set helpSettingsCopy = new HashSet(helpSettings); final boolean optional = !isRequired() && (helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL_CHILD_GROUP)); final boolean expanded = (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED); final boolean named = !expanded || ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME)); final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT); final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER); helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER); final boolean both = named && expanded; if (optional) { buffer.append('['); } if (named) { buffer.append(name); } if (both) { buffer.append("" (""); } if (expanded) { final Set childSettings; if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { childSettings = DisplaySetting.NONE; } else { childSettings = new HashSet(helpSettingsCopy); childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL); } final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.appendUsage(buffer, childSettings, comp); if (i.hasNext()) { buffer.append(separator); } } } if (both) { buffer.append(')'); } if (optional && outer) { buffer.append(']'); } if (arguments) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { buffer.append(' '); final Option option = (Option) i.next(); option.appendUsage(buffer, helpSettingsCopy, comp); } } if (optional && !outer) { buffer.append(']'); } } public GroupImpl(List, String, String, int, int, boolean); private final String name; private final List options; private final List anonymous; }</FCTX> <ECTX>public class DisplaySetting { public static final Set NONE = Collections.EMPTY_SET; public static final DisplaySetting DISPLAY_OPTIONAL = new DisplaySetting(""DISPLAY_OPTIONAL""); public static final DisplaySetting DISPLAY_OPTIONAL_CHILD_GROUP = new DisplaySetting(""DISPLAY_OPTIONAL_CHILD_GROUP""); public static final DisplaySetting DISPLAY_GROUP_NAME = new DisplaySetting(""DISPLAY_GROUP_NAME""); public static final DisplaySetting DISPLAY_GROUP_EXPANDED = new DisplaySetting(""DISPLAY_GROUP_EXPANDED""); public static final DisplaySetting DISPLAY_GROUP_ARGUMENT = new DisplaySetting(""DISPLAY_GROUP_ARGUMENT""); public static final DisplaySetting DISPLAY_GROUP_OUTER = new DisplaySetting(""DISPLAY_GROUP_OUTER""); } public interface Option { void appendUsage(StringBuffer, Set, Comparator); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator) { final Set helpSettingsCopy = new HashSet(helpSettings); final boolean optional = !isRequired() && (helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL_CHILD_GROUP)); final boolean expanded = (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED); final boolean named = !expanded || ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME)); final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT); final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER); helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER); final boolean both = named && expanded; if (optional) { buffer.append('['); } if (named) { buffer.append(name); } if (both) { buffer.append("" (""); } if (expanded) { final Set childSettings; if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { childSettings = DisplaySetting.NONE; } else { childSettings = new HashSet(helpSettingsCopy); childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL); } final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.appendUsage(buffer, childSettings, comp); if (i.hasNext()) { buffer.append(separator); } } } if (both) { buffer.append(')'); } if (optional && outer) { buffer.append(']'); } if (arguments) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { buffer.append(' '); final Option option = (Option) i.next(); option.appendUsage(buffer, helpSettingsCopy, comp); } } if (optional && !outer) { buffer.append(']'); } } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX>private final String name; private final List options; private final List anonymous;</PRIVATE_FCTX> }</FCTX> <ECTX>public class DisplaySetting { public static final Set NONE = Collections.EMPTY_SET; public static final DisplaySetting DISPLAY_OPTIONAL = new DisplaySetting(""DISPLAY_OPTIONAL""); public static final DisplaySetting DISPLAY_OPTIONAL_CHILD_GROUP = new DisplaySetting(""DISPLAY_OPTIONAL_CHILD_GROUP""); public static final DisplaySetting DISPLAY_GROUP_NAME = new DisplaySetting(""DISPLAY_GROUP_NAME""); public static final DisplaySetting DISPLAY_GROUP_EXPANDED = new DisplaySetting(""DISPLAY_GROUP_EXPANDED""); public static final DisplaySetting DISPLAY_GROUP_ARGUMENT = new DisplaySetting(""DISPLAY_GROUP_ARGUMENT""); public static final DisplaySetting DISPLAY_GROUP_OUTER = new DisplaySetting(""DISPLAY_GROUP_OUTER""); } public interface Option { void appendUsage(StringBuffer, Set, Comparator); }</ECTX>"
Cli_21_26_GroupImpl,Cli,21,26,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final List helpLines = new ArrayList(); if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) { final HelpLine helpLine = new HelpLineImpl(this, depth); helpLines.add(helpLine); } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } return helpLines; } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final List helpLines = new ArrayList(); if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) { final HelpLine helpLine = new HelpLineImpl(this, depth); helpLines.add(helpLine); } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } return helpLines; } public GroupImpl(List, String, String, int, int, boolean); private final List options; private final List anonymous; }</FCTX> <ECTX>public class DisplaySetting { public static final DisplaySetting DISPLAY_GROUP_NAME = new DisplaySetting(""DISPLAY_GROUP_NAME""); public static final DisplaySetting DISPLAY_GROUP_EXPANDED = new DisplaySetting(""DISPLAY_GROUP_EXPANDED""); public static final DisplaySetting DISPLAY_GROUP_ARGUMENT = new DisplaySetting(""DISPLAY_GROUP_ARGUMENT""); } public interface Option { List helpLines(int, Set, Comparator); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final List helpLines = new ArrayList(); if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) { final HelpLine helpLine = new HelpLineImpl(this, depth); helpLines.add(helpLine); } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } return helpLines; } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX>private final List options; private final List anonymous;</PRIVATE_FCTX> }</FCTX> <ECTX>public class DisplaySetting { public static final DisplaySetting DISPLAY_GROUP_NAME = new DisplaySetting(""DISPLAY_GROUP_NAME""); public static final DisplaySetting DISPLAY_GROUP_EXPANDED = new DisplaySetting(""DISPLAY_GROUP_EXPANDED""); public static final DisplaySetting DISPLAY_GROUP_ARGUMENT = new DisplaySetting(""DISPLAY_GROUP_ARGUMENT""); } public interface Option { List helpLines(int, Set, Comparator); }</ECTX>"
Cli_21_27_GroupImpl,Cli,21,27,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public List getOptions() { return options; } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public List getOptions() { return options; } public GroupImpl(List, String, String, int, int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public List getOptions() { return options; } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_28_GroupImpl,Cli,21,28,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public List getAnonymous() { return anonymous; } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public List getAnonymous() { return anonymous; } public GroupImpl(List, String, String, int, int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public List getAnonymous() { return anonymous; } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_29_GroupImpl,Cli,21,29,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public Option findOption(final String trigger) { final Iterator i = getOptions().iterator(); while (i.hasNext()) { final Option option = (Option) i.next(); final Option found = option.findOption(trigger); if (found != null) { return found; } } return null; } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public Option findOption(final String trigger) { final Iterator i = getOptions().iterator(); while (i.hasNext()) { final Option option = (Option) i.next(); final Option found = option.findOption(trigger); if (found != null) { return found; } } return null; } public GroupImpl(List, String, String, int, int, boolean); }</FCTX> <ECTX>public interface Option { Option findOption(String); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public Option findOption(final String trigger) { final Iterator i = getOptions().iterator(); while (i.hasNext()) { final Option option = (Option) i.next(); final Option found = option.findOption(trigger); if (found != null) { return found; } } return null; } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { Option findOption(String); }</ECTX>"
Cli_21_30_GroupImpl,Cli,21,30,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public int getMinimum() { return minimum; } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public int getMinimum() { return minimum; } public GroupImpl(List, String, String, int, int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public int getMinimum() { return minimum; } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_31_GroupImpl,Cli,21,31,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public int getMaximum() { return maximum; } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public int getMaximum() { return maximum; } public GroupImpl(List, String, String, int, int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public int getMaximum() { return maximum; } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_32_GroupImpl,Cli,21,32,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public boolean isRequired() { return (getParent() == null || super.isRequired()) && getMinimum() > 0; } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public boolean isRequired() { return (getParent() == null || super.isRequired()) && getMinimum() > 0; } public GroupImpl(List, String, String, int, int, boolean); }</FCTX> <ECTX></ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public boolean isRequired() { return (getParent() == null || super.isRequired()) && getMinimum() > 0; } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_33_GroupImpl,Cli,21,33,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,"package org.apache.commons.cli2.option;","import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","GroupImpl extends OptionImpl implements Group { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } } public GroupImpl(List, String, String, int, int, boolean); public boolean canProcess(WriteableCommandLine, String); public Set getPrefixes(); public Set getTriggers(); public void process(WriteableCommandLine, ListIterator); public void validate(WriteableCommandLine); public String getPreferredName(); public String getDescription(); public void appendUsage(StringBuffer, Set, Comparator); public void appendUsage(StringBuffer, Set, Comparator, String); public List helpLines(int, Set, Comparator); public List getOptions(); public List getAnonymous(); public Option findOption(String); public int getMinimum(); public int getMaximum(); public boolean isRequired(); public void defaults(WriteableCommandLine); }","<FCTX>GroupImpl extends OptionImpl implements Group { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } } public GroupImpl(List, String, String, int, int, boolean); private final List options; private final List anonymous; }</FCTX> <ECTX>public interface Option { void defaults(WriteableCommandLine); }</ECTX>","<FCTX>GroupImpl extends OptionImpl implements Group { public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); for (final Iterator i = options.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.defaults(commandLine); } } public GroupImpl(List, String, String, int, int, boolean); <PRIVATE_FCTX>private final List options; private final List anonymous;</PRIVATE_FCTX> }</FCTX> <ECTX>public interface Option { void defaults(WriteableCommandLine); }</ECTX>"
Cli_21_34_WriteableCommandLineImpl,Cli,21,34,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public WriteableCommandLineImpl(Option, List); private final Map switches = new HashMap(); }</FCTX> <ECTX>public abstract class ResourceConstants { public static final String SWITCH_ALREADY_SET = ""Switch.already.set""; } public class ResourceHelper { public static ResourceHelper getResourceHelper(); }</ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map switches = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX>public abstract class ResourceConstants { public static final String SWITCH_ALREADY_SET = ""Switch.already.set""; } public class ResourceHelper { public static ResourceHelper getResourceHelper(); }</ECTX>"
Cli_21_35_GroupImpl,Cli,21,35,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,,"import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","ReverseStringComparator implements Comparator { public static final Comparator getInstance() { return instance; } private ReverseStringComparator(); public static final Comparator getInstance(); public int compare(Object, Object); }","<FCTX>ReverseStringComparator implements Comparator { public static final Comparator getInstance() { return instance; } private ReverseStringComparator(); }</FCTX> <ECTX></ECTX>","<FCTX>ReverseStringComparator implements Comparator { public static final Comparator getInstance() { return instance; } <PRIVATE_FCTX>private ReverseStringComparator();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_36_GroupImpl,Cli,21,36,org.apache.commons.cli2.option.GroupImpl,GroupImpl,src/java/org/apache/commons/cli2/option/GroupImpl.java,GroupImpl_ESTest,org/apache/commons/cli2/option/GroupImpl_ESTest.java,,"import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.HashSet;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Map;|import java.util.Set;|import java.util.SortedMap;|import java.util.TreeMap;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.DisplaySetting;|import org.apache.commons.cli2.Group;|import org.apache.commons.cli2.HelpLine;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.OptionException;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.resource.ResourceConstants;","ReverseStringComparator implements Comparator { public int compare(final Object o1, final Object o2) { final String s1 = (String) o1; final String s2 = (String) o2; return -s1.compareTo(s2); } private ReverseStringComparator(); public static final Comparator getInstance(); public int compare(Object, Object); }","<FCTX>ReverseStringComparator implements Comparator { public int compare(final Object o1, final Object o2) { final String s1 = (String) o1; final String s2 = (String) o2; return -s1.compareTo(s2); } private ReverseStringComparator(); }</FCTX> <ECTX></ECTX>","<FCTX>ReverseStringComparator implements Comparator { public int compare(final Object o1, final Object o2) { final String s1 = (String) o1; final String s2 = (String) o2; return -s1.compareTo(s2); } <PRIVATE_FCTX>private ReverseStringComparator();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_37_WriteableCommandLineImpl,Cli,21,37,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public WriteableCommandLineImpl(Option, List); private final List options = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final List options = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_38_WriteableCommandLineImpl,Cli,21,38,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public WriteableCommandLineImpl(Option, List); private final Map nameToOption = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map nameToOption = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_39_WriteableCommandLineImpl,Cli,21,39,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; } public WriteableCommandLineImpl(Option, List); private final Map values = new HashMap(); private final Map defaultValues = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map values = new HashMap(); private final Map defaultValues = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_40_WriteableCommandLineImpl,Cli,21,40,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); private final Map values = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map values = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_21_41_WriteableCommandLineImpl,Cli,21,41,org.apache.commons.cli2.commandline.WriteableCommandLineImpl,WriteableCommandLineImpl,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,WriteableCommandLineImpl_ESTest,org/apache/commons/cli2/commandline/WriteableCommandLineImpl_ESTest.java,"package org.apache.commons.cli2.commandline;","import java.util.ArrayList;|import java.util.Collections;|import java.util.HashMap;|import java.util.Iterator;|import java.util.List;|import java.util.Map;|import java.util.Properties;|import java.util.Set;|import org.apache.commons.cli2.Argument;|import org.apache.commons.cli2.Option;|import org.apache.commons.cli2.WriteableCommandLine;|import org.apache.commons.cli2.option.PropertyOption;|import org.apache.commons.cli2.resource.ResourceConstants;|import org.apache.commons.cli2.resource.ResourceHelper;","WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public WriteableCommandLineImpl(Option, List); public Option getCurrentOption(); public void setCurrentOption(Option); public void addOption(Option); public void addValue(Option, Object); public void addSwitch(Option, boolean); public boolean hasOption(Option); public Option getOption(String); public List getValues(Option, List); public List getUndefaultedValues(Option); public Boolean getSwitch(Option, Boolean); public String getProperty(String); public void addProperty(Option, String, String); public void addProperty(String, String); public String getProperty(Option, String, String); public Set getProperties(Option); public Set getProperties(); public boolean looksLikeOption(String); public String toString(); public List getOptions(); public Set getOptionTriggers(); public void setDefaultValues(Option, List); public void setDefaultSwitch(Option, Boolean); public List getNormalised(); }","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public WriteableCommandLineImpl(Option, List); private final Map switches = new HashMap(); private final Map defaultSwitches = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public WriteableCommandLineImpl(Option, List); <PRIVATE_FCTX>private final Map switches = new HashMap(); private final Map defaultSwitches = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_0_HelpFormatter,Cli,23,0,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_1_HelpFormatter,Cli,23,1,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getWidth() { return defaultWidth; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getWidth() { return defaultWidth; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getWidth() { return defaultWidth; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_2_HelpFormatter,Cli,23,2,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_3_HelpFormatter,Cli,23,3,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_4_HelpFormatter,Cli,23,4,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_5_HelpFormatter,Cli,23,5,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_6_HelpFormatter,Cli,23,6,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_7_HelpFormatter,Cli,23,7,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getArgName() { return defaultArgName; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getArgName() { return defaultArgName; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getArgName() { return defaultArgName; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_8_HelpFormatter,Cli,23,8,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_9_HelpFormatter,Cli,23,9,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_10_HelpFormatter,Cli,23,10,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_11_HelpFormatter,Cli,23,11,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_12_HelpFormatter,Cli,23,12,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_13_HelpFormatter,Cli,23,13,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_14_HelpFormatter,Cli,23,14,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_15_HelpFormatter,Cli,23,15,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_16_HelpFormatter,Cli,23,16,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_17_HelpFormatter,Cli,23,17,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_18_HelpFormatter,Cli,23,18,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_19_HelpFormatter,Cli,23,19,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } private void appendOptionGroup(StringBuffer, OptionGroup); private static void appendOption(StringBuffer, Option, boolean); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } <PRIVATE_FCTX>private void appendOptionGroup(StringBuffer, OptionGroup); private static void appendOption(StringBuffer, Option, boolean);</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>"
Cli_23_20_HelpFormatter,Cli,23,20,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_21_HelpFormatter,Cli,23,21,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_22_HelpFormatter,Cli,23,22,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_23_HelpFormatter,Cli,23,23,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_24_HelpFormatter,Cli,23,24,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_25_HelpFormatter,Cli,23,25,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_26_HelpFormatter,Cli,23,26,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getDescPadding() { return defaultDescPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getDescPadding() { return defaultDescPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getDescPadding() { return defaultDescPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_27_HelpFormatter,Cli,23,27,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_28_HelpFormatter,Cli,23,28,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_29_HelpFormatter,Cli,23,29,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_23_30_HelpFormatter,Cli,23,30,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getNewLine() { return defaultNewLine; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getNewLine() { return defaultNewLine; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getNewLine() { return defaultNewLine; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_0_HelpFormatter,Cli,24,0,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_1_HelpFormatter,Cli,24,1,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getWidth() { return defaultWidth; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getWidth() { return defaultWidth; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getWidth() { return defaultWidth; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_2_HelpFormatter,Cli,24,2,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_3_HelpFormatter,Cli,24,3,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_4_HelpFormatter,Cli,24,4,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_5_HelpFormatter,Cli,24,5,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_6_HelpFormatter,Cli,24,6,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_7_HelpFormatter,Cli,24,7,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getArgName() { return defaultArgName; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getArgName() { return defaultArgName; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getArgName() { return defaultArgName; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_8_HelpFormatter,Cli,24,8,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_9_HelpFormatter,Cli,24,9,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_10_HelpFormatter,Cli,24,10,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_11_HelpFormatter,Cli,24,11,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_12_HelpFormatter,Cli,24,12,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_13_HelpFormatter,Cli,24,13,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_14_HelpFormatter,Cli,24,14,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_15_HelpFormatter,Cli,24,15,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_16_HelpFormatter,Cli,24,16,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_17_HelpFormatter,Cli,24,17,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_18_HelpFormatter,Cli,24,18,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_19_HelpFormatter,Cli,24,19,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } private void appendOptionGroup(StringBuffer, OptionGroup); private static void appendOption(StringBuffer, Option, boolean); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } <PRIVATE_FCTX>private void appendOptionGroup(StringBuffer, OptionGroup); private static void appendOption(StringBuffer, Option, boolean);</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>"
Cli_24_20_HelpFormatter,Cli,24,20,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_21_HelpFormatter,Cli,24,21,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_22_HelpFormatter,Cli,24,22,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_23_HelpFormatter,Cli,24,23,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_24_HelpFormatter,Cli,24,24,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_25_HelpFormatter,Cli,24,25,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_26_HelpFormatter,Cli,24,26,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getDescPadding() { return defaultDescPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getDescPadding() { return defaultDescPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getDescPadding() { return defaultDescPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_27_HelpFormatter,Cli,24,27,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_28_HelpFormatter,Cli,24,28,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_29_HelpFormatter,Cli,24,29,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_24_30_HelpFormatter,Cli,24,30,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getNewLine() { return defaultNewLine; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getNewLine() { return defaultNewLine; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getNewLine() { return defaultNewLine; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_0_HelpFormatter,Cli,25,0,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_1_HelpFormatter,Cli,25,1,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getWidth() { return defaultWidth; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getWidth() { return defaultWidth; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getWidth() { return defaultWidth; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_2_HelpFormatter,Cli,25,2,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_3_HelpFormatter,Cli,25,3,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_4_HelpFormatter,Cli,25,4,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_5_HelpFormatter,Cli,25,5,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_6_HelpFormatter,Cli,25,6,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_7_HelpFormatter,Cli,25,7,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getArgName() { return defaultArgName; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getArgName() { return defaultArgName; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getArgName() { return defaultArgName; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_8_HelpFormatter,Cli,25,8,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_9_HelpFormatter,Cli,25,9,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_10_HelpFormatter,Cli,25,10,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_11_HelpFormatter,Cli,25,11,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_12_HelpFormatter,Cli,25,12,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_13_HelpFormatter,Cli,25,13,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_14_HelpFormatter,Cli,25,14,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_15_HelpFormatter,Cli,25,15,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_16_HelpFormatter,Cli,25,16,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_17_HelpFormatter,Cli,25,17,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_18_HelpFormatter,Cli,25,18,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_19_HelpFormatter,Cli,25,19,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } private void appendOptionGroup(StringBuffer, OptionGroup); private static void appendOption(StringBuffer, Option, boolean); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } <PRIVATE_FCTX>private void appendOptionGroup(StringBuffer, OptionGroup); private static void appendOption(StringBuffer, Option, boolean);</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>"
Cli_25_20_HelpFormatter,Cli,25,20,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_21_HelpFormatter,Cli,25,21,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_22_HelpFormatter,Cli,25,22,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_23_HelpFormatter,Cli,25,23,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_24_HelpFormatter,Cli,25,24,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_25_HelpFormatter,Cli,25,25,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_26_HelpFormatter,Cli,25,26,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getDescPadding() { return defaultDescPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getDescPadding() { return defaultDescPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getDescPadding() { return defaultDescPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_27_HelpFormatter,Cli,25,27,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_28_HelpFormatter,Cli,25,28,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_29_HelpFormatter,Cli,25,29,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_25_30_HelpFormatter,Cli,25,30,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getNewLine() { return defaultNewLine; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getNewLine() { return defaultNewLine; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getNewLine() { return defaultNewLine; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_0_OptionBuilder,Cli,26,0,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } private OptionBuilder(); private static String longopt; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static String longopt; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_1_OptionBuilder,Cli,26,1,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_2_OptionBuilder,Cli,26,2,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_3_OptionBuilder,Cli,26,3,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_4_OptionBuilder,Cli,26,4,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_5_OptionBuilder,Cli,26,5,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withType(Object newType) { OptionBuilder.type = newType; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withType(Object newType) { OptionBuilder.type = newType; return instance; } private OptionBuilder(); private static Object type; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withType(Object newType) { OptionBuilder.type = newType; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static Object type; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_6_OptionBuilder,Cli,26,6,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription; return instance; } private OptionBuilder(); private static String description; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static String description; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_7_OptionBuilder,Cli,26,7,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } private OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } <PRIVATE_FCTX>private OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_8_OptionBuilder,Cli,26,8,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static Option create() throws IllegalArgumentException { if (longopt == null) { OptionBuilder.reset(); throw new IllegalArgumentException(""must specify longopt""); } return create(null); } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static Option create() throws IllegalArgumentException { if (longopt == null) { OptionBuilder.reset(); throw new IllegalArgumentException(""must specify longopt""); } return create(null); } private OptionBuilder(); private static void reset(); private static String longopt; }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static Option create() throws IllegalArgumentException { if (longopt == null) { OptionBuilder.reset(); throw new IllegalArgumentException(""must specify longopt""); } return create(null); } <PRIVATE_FCTX>private OptionBuilder(); private static void reset(); private static String longopt;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_9_OptionBuilder,Cli,26,9,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; } private OptionBuilder(); private static void reset(); private static String longopt; private static String description; private static String argName; private static boolean required; private static int numberOfArgs = Option.UNINITIALIZED; private static Object type; private static boolean optionalArg; private static char valuesep; }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public void setLongOpt(String); public void setRequired(boolean); public void setOptionalArg(boolean); public void setArgs(int); public void setType(Object); public void setValueSeparator(char); public void setArgName(String); }</ECTX>","<FCTX>OptionBuilder { public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; } <PRIVATE_FCTX>private OptionBuilder(); private static void reset(); private static String longopt; private static String description; private static String argName; private static boolean required; private static int numberOfArgs = Option.UNINITIALIZED; private static Object type; private static boolean optionalArg; private static char valuesep;</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public void setLongOpt(String); public void setRequired(boolean); public void setOptionalArg(boolean); public void setArgs(int); public void setType(Object); public void setValueSeparator(char); public void setArgName(String); }</ECTX>"
Cli_26_10_OptionBuilder,Cli,26,10,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_11_OptionBuilder,Cli,26,11,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } private OptionBuilder(); private static String argName; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static String argName; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_12_OptionBuilder,Cli,26,12,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } private OptionBuilder(); private static boolean required; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static boolean required; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_13_OptionBuilder,Cli,26,13,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } private OptionBuilder(); private static char valuesep; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static char valuesep; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_14_OptionBuilder,Cli,26,14,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } private OptionBuilder(); private static char valuesep; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static char valuesep; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_15_OptionBuilder,Cli,26,15,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } private OptionBuilder(); private static boolean required; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static boolean required; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_16_OptionBuilder,Cli,26,16,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_26_17_OptionBuilder,Cli,26,17,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_27_0_OptionGroup,Cli,27,0,org.apache.commons.cli.OptionGroup,OptionGroup,src/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.HashMap;|import java.util.Iterator;|import java.util.Map;","OptionGroup implements Serializable { public OptionGroup addOption(Option option) { optionMap.put(option.getKey(), option); return this; } public OptionGroup addOption(Option); public Collection getNames(); public Collection getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); public String toString(); }","<FCTX>OptionGroup implements Serializable { public OptionGroup addOption(Option option) { optionMap.put(option.getKey(), option); return this; } private Map optionMap = new HashMap(); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); }</ECTX>","<FCTX>OptionGroup implements Serializable { public OptionGroup addOption(Option option) { optionMap.put(option.getKey(), option); return this; } <PRIVATE_FCTX>private Map optionMap = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); }</ECTX>"
Cli_27_1_OptionGroup,Cli,27,1,org.apache.commons.cli.OptionGroup,OptionGroup,src/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.HashMap;|import java.util.Iterator;|import java.util.Map;","OptionGroup implements Serializable { public Collection getNames() { return optionMap.keySet(); } public OptionGroup addOption(Option); public Collection getNames(); public Collection getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); public String toString(); }","<FCTX>OptionGroup implements Serializable { public Collection getNames() { return optionMap.keySet(); } private Map optionMap = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionGroup implements Serializable { public Collection getNames() { return optionMap.keySet(); } <PRIVATE_FCTX>private Map optionMap = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_27_2_OptionGroup,Cli,27,2,org.apache.commons.cli.OptionGroup,OptionGroup,src/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.HashMap;|import java.util.Iterator;|import java.util.Map;","OptionGroup implements Serializable { public Collection getOptions() { return optionMap.values(); } public OptionGroup addOption(Option); public Collection getNames(); public Collection getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); public String toString(); }","<FCTX>OptionGroup implements Serializable { public Collection getOptions() { return optionMap.values(); } private Map optionMap = new HashMap(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionGroup implements Serializable { public Collection getOptions() { return optionMap.values(); } <PRIVATE_FCTX>private Map optionMap = new HashMap();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_27_3_OptionGroup,Cli,27,3,org.apache.commons.cli.OptionGroup,OptionGroup,src/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.HashMap;|import java.util.Iterator;|import java.util.Map;","OptionGroup implements Serializable { public void setSelected(Option option) throws AlreadySelectedException { if (option == null) { selected = null; return; } if (selected == null || selected.equals(option.getKey())) { selected = option.getKey(); } else { throw new AlreadySelectedException(this, option); } } public OptionGroup addOption(Option); public Collection getNames(); public Collection getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); public String toString(); }","<FCTX>OptionGroup implements Serializable { public void setSelected(Option option) throws AlreadySelectedException { if (option == null) { selected = null; return; } if (selected == null || selected.equals(option.getKey())) { selected = option.getKey(); } else { throw new AlreadySelectedException(this, option); } } private String selected; }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); }</ECTX>","<FCTX>OptionGroup implements Serializable { public void setSelected(Option option) throws AlreadySelectedException { if (option == null) { selected = null; return; } if (selected == null || selected.equals(option.getKey())) { selected = option.getKey(); } else { throw new AlreadySelectedException(this, option); } } <PRIVATE_FCTX>private String selected;</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); }</ECTX>"
Cli_27_4_OptionGroup,Cli,27,4,org.apache.commons.cli.OptionGroup,OptionGroup,src/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.HashMap;|import java.util.Iterator;|import java.util.Map;","OptionGroup implements Serializable { public String getSelected() { return selected; } public OptionGroup addOption(Option); public Collection getNames(); public Collection getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); public String toString(); }","<FCTX>OptionGroup implements Serializable { public String getSelected() { return selected; } }</FCTX> <ECTX></ECTX>","<FCTX>OptionGroup implements Serializable { public String getSelected() { return selected; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_27_5_OptionGroup,Cli,27,5,org.apache.commons.cli.OptionGroup,OptionGroup,src/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.HashMap;|import java.util.Iterator;|import java.util.Map;","OptionGroup implements Serializable { public void setRequired(boolean required) { this.required = required; } public OptionGroup addOption(Option); public Collection getNames(); public Collection getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); public String toString(); }","<FCTX>OptionGroup implements Serializable { public void setRequired(boolean required) { this.required = required; } }</FCTX> <ECTX></ECTX>","<FCTX>OptionGroup implements Serializable { public void setRequired(boolean required) { this.required = required; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_27_6_OptionGroup,Cli,27,6,org.apache.commons.cli.OptionGroup,OptionGroup,src/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.HashMap;|import java.util.Iterator;|import java.util.Map;","OptionGroup implements Serializable { public boolean isRequired() { return required; } public OptionGroup addOption(Option); public Collection getNames(); public Collection getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); public String toString(); }","<FCTX>OptionGroup implements Serializable { public boolean isRequired() { return required; } }</FCTX> <ECTX></ECTX>","<FCTX>OptionGroup implements Serializable { public boolean isRequired() { return required; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_27_7_OptionGroup,Cli,27,7,org.apache.commons.cli.OptionGroup,OptionGroup,src/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.HashMap;|import java.util.Iterator;|import java.util.Map;","OptionGroup implements Serializable { public String toString() { StringBuffer buff = new StringBuffer(); Iterator iter = getOptions().iterator(); buff.append(""[""); while (iter.hasNext()) { Option option = (Option) iter.next(); if (option.getOpt() != null) { buff.append(""-""); buff.append(option.getOpt()); } else { buff.append(""--""); buff.append(option.getLongOpt()); } buff.append("" ""); buff.append(option.getDescription()); if (iter.hasNext()) { buff.append("", ""); } } buff.append(""]""); return buff.toString(); } public OptionGroup addOption(Option); public Collection getNames(); public Collection getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); public String toString(); }","<FCTX>OptionGroup implements Serializable { public String toString() { StringBuffer buff = new StringBuffer(); Iterator iter = getOptions().iterator(); buff.append(""[""); while (iter.hasNext()) { Option option = (Option) iter.next(); if (option.getOpt() != null) { buff.append(""-""); buff.append(option.getOpt()); } else { buff.append(""--""); buff.append(option.getLongOpt()); } buff.append("" ""); buff.append(option.getDescription()); if (iter.hasNext()) { buff.append("", ""); } } buff.append(""]""); return buff.toString(); } }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public String getOpt(); public String getLongOpt(); public String getDescription(); }</ECTX>","<FCTX>OptionGroup implements Serializable { public String toString() { StringBuffer buff = new StringBuffer(); Iterator iter = getOptions().iterator(); buff.append(""[""); while (iter.hasNext()) { Option option = (Option) iter.next(); if (option.getOpt() != null) { buff.append(""-""); buff.append(option.getOpt()); } else { buff.append(""--""); buff.append(option.getLongOpt()); } buff.append("" ""); buff.append(option.getDescription()); if (iter.hasNext()) { buff.append("", ""); } } buff.append(""]""); return buff.toString(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public String getOpt(); public String getLongOpt(); public String getDescription(); }</ECTX>"
Cli_28_0_Parser,Cli,28,0,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_28_1_Parser,Cli,28,1,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_28_2_Parser,Cli,28,2,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_28_3_Parser,Cli,28,3,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } private Options options; }</FCTX> <ECTX>public class CommandLine implements Serializable { CommandLine(); void addArg(String); } public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void clearValues(); } public class OptionGroup implements Serializable { public void setSelected(Option); } public class Options implements Serializable { List helpOptions(); Collection getOptionGroups(); }</ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX>public class CommandLine implements Serializable { CommandLine(); void addArg(String); } public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void clearValues(); } public class OptionGroup implements Serializable { public void setSelected(Option); } public class Options implements Serializable { List helpOptions(); Collection getOptionGroups(); }</ECTX>"
Cli_28_4_Parser,Cli,28,4,org.apache.commons.cli.Parser,Parser,src/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } } if (opt.getValues() == null && !opt.hasOptionalArg()) { throw new MissingArgumentException(opt); } } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } } if (opt.getValues() == null && !opt.hasOptionalArg()) { throw new MissingArgumentException(opt); } } }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void addValueForProcessing(String); public String[] getValues(); public boolean hasOptionalArg(); } class Util { static String stripLeadingAndTrailingQuotes(String); }</ECTX>","<FCTX>Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } } if (opt.getValues() == null && !opt.hasOptionalArg()) { throw new MissingArgumentException(opt); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void addValueForProcessing(String); public String[] getValues(); public boolean hasOptionalArg(); } class Util { static String stripLeadingAndTrailingQuotes(String); }</ECTX>"
Cli_30_0_DefaultParser,Cli,30,0,org.apache.commons.cli.DefaultParser,DefaultParser,src/main/java/org/apache/commons/cli/DefaultParser.java,DefaultParser_ESTest,org/apache/commons/cli/DefaultParser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.Properties;","DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void handleConcatenatedOptions(String); protected CommandLine cmd; protected Options options; protected boolean stopAtNonOption; protected String currentToken; protected Option currentOption; protected boolean skipParsing; protected List expectedOpts; }","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } }</FCTX> <ECTX></ECTX>","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_30_1_DefaultParser,Cli,30,1,org.apache.commons.cli.DefaultParser,DefaultParser,src/main/java/org/apache/commons/cli/DefaultParser.java,DefaultParser_ESTest,org/apache/commons/cli/DefaultParser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.Properties;","DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void handleConcatenatedOptions(String); protected CommandLine cmd; protected Options options; protected boolean stopAtNonOption; protected String currentToken; protected Option currentOption; protected boolean skipParsing; protected List expectedOpts; }","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } }</FCTX> <ECTX></ECTX>","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_30_2_DefaultParser,Cli,30,2,org.apache.commons.cli.DefaultParser,DefaultParser,src/main/java/org/apache/commons/cli/DefaultParser.java,DefaultParser_ESTest,org/apache/commons/cli/DefaultParser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.Properties;","DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void handleConcatenatedOptions(String); protected CommandLine cmd; protected Options options; protected boolean stopAtNonOption; protected String currentToken; protected Option currentOption; protected boolean skipParsing; protected List expectedOpts; }","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } }</FCTX> <ECTX></ECTX>","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_30_3_DefaultParser,Cli,30,3,org.apache.commons.cli.DefaultParser,DefaultParser,src/main/java/org/apache/commons/cli/DefaultParser.java,DefaultParser_ESTest,org/apache/commons/cli/DefaultParser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.Properties;","DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (int i = 0; i < arguments.length; i++) { handleToken(arguments[i]); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void handleConcatenatedOptions(String); protected CommandLine cmd; protected Options options; protected boolean stopAtNonOption; protected String currentToken; protected Option currentOption; protected boolean skipParsing; protected List expectedOpts; }","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (int i = 0; i < arguments.length; i++) { handleToken(arguments[i]); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } private void handleToken(String); private void checkRequiredArgs(); private void handleProperties(Properties); private void checkRequiredOptions(); }</FCTX> <ECTX>public class OptionGroup implements Serializable { public void setSelected(Option); } public class Options implements Serializable { public List getRequiredOptions(); Collection getOptionGroups(); }</ECTX>","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (int i = 0; i < arguments.length; i++) { handleToken(arguments[i]); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } <PRIVATE_FCTX>private void handleToken(String); private void checkRequiredArgs(); private void handleProperties(Properties); private void checkRequiredOptions();</PRIVATE_FCTX> }</FCTX> <ECTX>public class OptionGroup implements Serializable { public void setSelected(Option); } public class Options implements Serializable { public List getRequiredOptions(); Collection getOptionGroups(); }</ECTX>"
Cli_30_4_Parser,Cli,30,4,org.apache.commons.cli.Parser,Parser,src/main/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_30_5_Parser,Cli,30,5,org.apache.commons.cli.Parser,Parser,src/main/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_30_6_Parser,Cli,30,6,org.apache.commons.cli.Parser,Parser,src/main/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } private Options options; }</FCTX> <ECTX></ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_30_7_Parser,Cli,30,7,org.apache.commons.cli.Parser,Parser,src/main/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } private Options options; }</FCTX> <ECTX>public class CommandLine implements Serializable { CommandLine(); void addArg(String); } public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void clearValues(); } public class OptionGroup implements Serializable { public void setSelected(Option); } public class Options implements Serializable { List helpOptions(); Collection getOptionGroups(); }</ECTX>","<FCTX>Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (""--"".equals(t)) { eatTheRest = true; } else if (""-"".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(""-"")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!""--"".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } <PRIVATE_FCTX>private Options options;</PRIVATE_FCTX> }</FCTX> <ECTX>public class CommandLine implements Serializable { CommandLine(); void addArg(String); } public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void clearValues(); } public class OptionGroup implements Serializable { public void setSelected(Option); } public class Options implements Serializable { List helpOptions(); Collection getOptionGroups(); }</ECTX>"
Cli_30_8_Parser,Cli,30,8,org.apache.commons.cli.Parser,Parser,src/main/java/org/apache/commons/cli/Parser.java,Parser_ESTest,org/apache/commons/cli/Parser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Arrays;|import java.util.Enumeration;|import java.util.Iterator;|import java.util.List;|import java.util.ListIterator;|import java.util.Properties;","Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } } if (opt.getValues() == null && !opt.hasOptionalArg()) { throw new MissingArgumentException(opt); } } protected void setOptions(Options); protected Options getOptions(); protected List getRequiredOptions(); protected abstract String[] flatten(Options, String[], boolean); public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void processProperties(Properties); protected void checkRequiredOptions(); public void processArgs(Option, ListIterator); protected void processOption(String, ListIterator); protected CommandLine cmd; }","<FCTX>Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } } if (opt.getValues() == null && !opt.hasOptionalArg()) { throw new MissingArgumentException(opt); } } }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void addValueForProcessing(String); public String[] getValues(); public boolean hasOptionalArg(); } class Util { static String stripLeadingAndTrailingQuotes(String); }</ECTX>","<FCTX>Parser implements CommandLineParser { public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(""-"")) { iter.previous(); break; } try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } } if (opt.getValues() == null && !opt.hasOptionalArg()) { throw new MissingArgumentException(opt); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); void addValueForProcessing(String); public String[] getValues(); public boolean hasOptionalArg(); } class Util { static String stripLeadingAndTrailingQuotes(String); }</ECTX>"
Cli_31_0_HelpFormatter,Cli,31,0,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_1_HelpFormatter,Cli,31,1,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getWidth() { return defaultWidth; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getWidth() { return defaultWidth; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getWidth() { return defaultWidth; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_2_HelpFormatter,Cli,31,2,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_3_HelpFormatter,Cli,31,3,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_4_HelpFormatter,Cli,31,4,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_5_HelpFormatter,Cli,31,5,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_6_HelpFormatter,Cli,31,6,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_7_HelpFormatter,Cli,31,7,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getLongOptSeparator() { return longOptSeparator; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getLongOptSeparator() { return longOptSeparator; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getLongOptSeparator() { return longOptSeparator; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_8_HelpFormatter,Cli,31,8,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_9_HelpFormatter,Cli,31,9,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getArgName() { return defaultArgName; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getArgName() { return defaultArgName; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getArgName() { return defaultArgName; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_10_HelpFormatter,Cli,31,10,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_11_HelpFormatter,Cli,31,11,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_12_HelpFormatter,Cli,31,12,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_13_HelpFormatter,Cli,31,13,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_14_HelpFormatter,Cli,31,14,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_15_HelpFormatter,Cli,31,15,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_16_HelpFormatter,Cli,31,16,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_17_HelpFormatter,Cli,31,17,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_18_HelpFormatter,Cli,31,18,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_19_HelpFormatter,Cli,31,19,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_20_HelpFormatter,Cli,31,20,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_21_HelpFormatter,Cli,31,21,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } private void appendOptionGroup(StringBuffer, OptionGroup); private void appendOption(StringBuffer, Option, boolean); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } <PRIVATE_FCTX>private void appendOptionGroup(StringBuffer, OptionGroup); private void appendOption(StringBuffer, Option, boolean);</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>"
Cli_31_22_HelpFormatter,Cli,31,22,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_23_HelpFormatter,Cli,31,23,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_24_HelpFormatter,Cli,31,24,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_25_HelpFormatter,Cli,31,25,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_26_HelpFormatter,Cli,31,26,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_27_OptionBuilder,Cli,31,27,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } private OptionBuilder(); private static String longopt; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static String longopt; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_28_OptionBuilder,Cli,31,28,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_29_OptionBuilder,Cli,31,29,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_30_OptionBuilder,Cli,31,30,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } private OptionBuilder(); private static String argName; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static String argName; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_31_OptionBuilder,Cli,31,31,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } private OptionBuilder(); private static boolean required; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static boolean required; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_32_OptionBuilder,Cli,31,32,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } private OptionBuilder(); private static char valuesep; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static char valuesep; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_33_OptionBuilder,Cli,31,33,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } private OptionBuilder(); private static char valuesep; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static char valuesep; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_34_HelpFormatter,Cli,31,34,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_35_OptionBuilder,Cli,31,35,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } private OptionBuilder(); private static boolean required; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static boolean required; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_36_OptionBuilder,Cli,31,36,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_37_OptionBuilder,Cli,31,37,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_38_OptionBuilder,Cli,31,38,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_39_OptionBuilder,Cli,31,39,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_40_OptionBuilder,Cli,31,40,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_41_OptionBuilder,Cli,31,41,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withType(Object newType) { OptionBuilder.type = newType; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withType(Object newType) { OptionBuilder.type = newType; return instance; } private OptionBuilder(); private static Object type; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withType(Object newType) { OptionBuilder.type = newType; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static Object type; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_42_OptionBuilder,Cli,31,42,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription; return instance; } private OptionBuilder(); private static String description; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static String description; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_43_OptionBuilder,Cli,31,43,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } private OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } <PRIVATE_FCTX>private OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_44_OptionBuilder,Cli,31,44,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static Option create() throws IllegalArgumentException { if (longopt == null) { OptionBuilder.reset(); throw new IllegalArgumentException(""must specify longopt""); } return create(null); } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static Option create() throws IllegalArgumentException { if (longopt == null) { OptionBuilder.reset(); throw new IllegalArgumentException(""must specify longopt""); } return create(null); } private OptionBuilder(); private static void reset(); private static String longopt; }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static Option create() throws IllegalArgumentException { if (longopt == null) { OptionBuilder.reset(); throw new IllegalArgumentException(""must specify longopt""); } return create(null); } <PRIVATE_FCTX>private OptionBuilder(); private static void reset(); private static String longopt;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_45_HelpFormatter,Cli,31,45,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getDescPadding() { return defaultDescPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getDescPadding() { return defaultDescPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getDescPadding() { return defaultDescPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_46_OptionBuilder,Cli,31,46,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Object); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; } private OptionBuilder(); private static void reset(); private static String longopt; private static String description; private static String argName; private static boolean required; private static int numberOfArgs = Option.UNINITIALIZED; private static Object type; private static boolean optionalArg; private static char valuesep; }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public void setLongOpt(String); public void setRequired(boolean); public void setOptionalArg(boolean); public void setArgs(int); public void setType(Object); public void setValueSeparator(char); public void setArgName(String); }</ECTX>","<FCTX>OptionBuilder { public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; } <PRIVATE_FCTX>private OptionBuilder(); private static void reset(); private static String longopt; private static String description; private static String argName; private static boolean required; private static int numberOfArgs = Option.UNINITIALIZED; private static Object type; private static boolean optionalArg; private static char valuesep;</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public void setLongOpt(String); public void setRequired(boolean); public void setOptionalArg(boolean); public void setArgs(int); public void setType(Object); public void setValueSeparator(char); public void setArgName(String); }</ECTX>"
Cli_31_47_Option,Cli,31,47,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public int getId() { return getKey().charAt(0); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public int getId() { return getKey().charAt(0); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public int getId() { return getKey().charAt(0); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_48_Option,Cli,31,48,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getOpt() { return opt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getOpt() { return opt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getOpt() { return opt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_49_Option,Cli,31,49,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public Object getType() { return type; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public Object getType() { return type; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public Object getType() { return type; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_50_Option,Cli,31,50,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setType(Object type) { this.type = type; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setType(Object type) { this.type = type; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setType(Object type) { this.type = type; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_51_Option,Cli,31,51,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getLongOpt() { return longOpt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getLongOpt() { return longOpt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getLongOpt() { return longOpt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_52_Option,Cli,31,52,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setLongOpt(String longOpt) { this.longOpt = longOpt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setLongOpt(String longOpt) { this.longOpt = longOpt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setLongOpt(String longOpt) { this.longOpt = longOpt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_53_Option,Cli,31,53,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setOptionalArg(boolean optionalArg) { this.optionalArg = optionalArg; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setOptionalArg(boolean optionalArg) { this.optionalArg = optionalArg; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setOptionalArg(boolean optionalArg) { this.optionalArg = optionalArg; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_54_Option,Cli,31,54,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean hasOptionalArg() { return optionalArg; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean hasOptionalArg() { return optionalArg; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean hasOptionalArg() { return optionalArg; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_55_Option,Cli,31,55,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean hasLongOpt() { return longOpt != null; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean hasLongOpt() { return longOpt != null; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private String longOpt; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean hasLongOpt() { return longOpt != null; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private String longOpt;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_56_HelpFormatter,Cli,31,56,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_57_Option,Cli,31,57,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean hasArg() { return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean hasArg() { return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private int numberOfArgs = UNINITIALIZED; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean hasArg() { return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private int numberOfArgs = UNINITIALIZED;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_58_Option,Cli,31,58,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getDescription() { return description; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getDescription() { return description; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getDescription() { return description; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_59_Option,Cli,31,59,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setDescription(String description) { this.description = description; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setDescription(String description) { this.description = description; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setDescription(String description) { this.description = description; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_60_Option,Cli,31,60,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean isRequired() { return required; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean isRequired() { return required; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean isRequired() { return required; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_61_Option,Cli,31,61,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setRequired(boolean required) { this.required = required; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setRequired(boolean required) { this.required = required; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setRequired(boolean required) { this.required = required; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_62_Option,Cli,31,62,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setArgName(String argName) { this.argName = argName; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setArgName(String argName) { this.argName = argName; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setArgName(String argName) { this.argName = argName; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_63_Option,Cli,31,63,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getArgName() { return argName; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getArgName() { return argName; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getArgName() { return argName; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_64_Option,Cli,31,64,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean hasArgName() { return argName != null && argName.length() > 0; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean hasArgName() { return argName != null && argName.length() > 0; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private String argName; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean hasArgName() { return argName != null && argName.length() > 0; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private String argName;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_65_Option,Cli,31,65,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean hasArgs() { return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean hasArgs() { return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private int numberOfArgs = UNINITIALIZED; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean hasArgs() { return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private int numberOfArgs = UNINITIALIZED;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_66_Option,Cli,31,66,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setArgs(int num) { this.numberOfArgs = num; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setArgs(int num) { this.numberOfArgs = num; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setArgs(int num) { this.numberOfArgs = num; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_67_HelpFormatter,Cli,31,67,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_68_Option,Cli,31,68,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setValueSeparator(char sep) { this.valuesep = sep; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setValueSeparator(char sep) { this.valuesep = sep; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setValueSeparator(char sep) { this.valuesep = sep; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_69_Option,Cli,31,69,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public char getValueSeparator() { return valuesep; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public char getValueSeparator() { return valuesep; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public char getValueSeparator() { return valuesep; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_70_Option,Cli,31,70,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean hasValueSeparator() { return valuesep > 0; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean hasValueSeparator() { return valuesep > 0; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private char valuesep; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean hasValueSeparator() { return valuesep > 0; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private char valuesep;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_71_Option,Cli,31,71,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public int getArgs() { return numberOfArgs; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public int getArgs() { return numberOfArgs; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public int getArgs() { return numberOfArgs; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_72_Option,Cli,31,72,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getValue() { return hasNoValues() ? null : (String) values.get(0); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getValue() { return hasNoValues() ? null : (String) values.get(0); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private boolean hasNoValues(); private List values = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getValue() { return hasNoValues() ? null : (String) values.get(0); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private boolean hasNoValues(); private List values = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_73_Option,Cli,31,73,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getValue(int index) throws IndexOutOfBoundsException { return hasNoValues() ? null : (String) values.get(index); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getValue(int index) throws IndexOutOfBoundsException { return hasNoValues() ? null : (String) values.get(index); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private boolean hasNoValues(); private List values = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getValue(int index) throws IndexOutOfBoundsException { return hasNoValues() ? null : (String) values.get(index); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private boolean hasNoValues(); private List values = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_74_Option,Cli,31,74,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getValue(String defaultValue) { String value = getValue(); return (value != null) ? value : defaultValue; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getValue(String defaultValue) { String value = getValue(); return (value != null) ? value : defaultValue; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getValue(String defaultValue) { String value = getValue(); return (value != null) ? value : defaultValue; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_75_Option,Cli,31,75,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String[] getValues() { return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String[] getValues() { return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private boolean hasNoValues(); private List values = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String[] getValues() { return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private boolean hasNoValues(); private List values = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_76_Option,Cli,31,76,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public List getValuesList() { return values; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public List getValuesList() { return values; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public List getValuesList() { return values; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_77_Option,Cli,31,77,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String toString() { StringBuffer buf = new StringBuffer().append(""[ option: ""); buf.append(opt); if (longOpt != null) { buf.append("" "").append(longOpt); } buf.append("" ""); if (hasArgs()) { buf.append(""[ARG...]""); } else if (hasArg()) { buf.append("" [ARG]""); } buf.append("" :: "").append(description); if (type != null) { buf.append("" :: "").append(type); } buf.append("" ]""); return buf.toString(); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String toString() { StringBuffer buf = new StringBuffer().append(""[ option: ""); buf.append(opt); if (longOpt != null) { buf.append("" "").append(longOpt); } buf.append("" ""); if (hasArgs()) { buf.append(""[ARG...]""); } else if (hasArg()) { buf.append("" [ARG]""); } buf.append("" :: "").append(description); if (type != null) { buf.append("" :: "").append(type); } buf.append("" ]""); return buf.toString(); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private String opt; private String longOpt; private String description; private Object type; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String toString() { StringBuffer buf = new StringBuffer().append(""[ option: ""); buf.append(opt); if (longOpt != null) { buf.append("" "").append(longOpt); } buf.append("" ""); if (hasArgs()) { buf.append(""[ARG...]""); } else if (hasArg()) { buf.append("" [ARG]""); } buf.append("" :: "").append(description); if (type != null) { buf.append("" :: "").append(type); } buf.append("" ]""); return buf.toString(); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private String opt; private String longOpt; private String description; private Object type;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_78_HelpFormatter,Cli,31,78,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_79_Option,Cli,31,79,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } Option option = (Option) o; if (opt != null ? !opt.equals(option.opt) : option.opt != null) { return false; } if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) { return false; } return true; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } Option option = (Option) o; if (opt != null ? !opt.equals(option.opt) : option.opt != null) { return false; } if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) { return false; } return true; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private String opt; private String longOpt; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } Option option = (Option) o; if (opt != null ? !opt.equals(option.opt) : option.opt != null) { return false; } if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) { return false; } return true; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private String opt; private String longOpt;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_80_Option,Cli,31,80,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public int hashCode() { int result; result = opt != null ? opt.hashCode() : 0; result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0); return result; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public int hashCode() { int result; result = opt != null ? opt.hashCode() : 0; result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0); return result; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private String opt; private String longOpt; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public int hashCode() { int result; result = opt != null ? opt.hashCode() : 0; result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0); return result; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private String opt; private String longOpt;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_81_Option,Cli,31,81,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public Object clone() { try { Option option = (Option) super.clone(); option.values = new ArrayList(values); return option; } catch (CloneNotSupportedException cnse) { throw new RuntimeException(""A CloneNotSupportedException was thrown: "" + cnse.getMessage()); } } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public Object clone() { try { Option option = (Option) super.clone(); option.values = new ArrayList(values); return option; } catch (CloneNotSupportedException cnse) { throw new RuntimeException(""A CloneNotSupportedException was thrown: "" + cnse.getMessage()); } } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private List values = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public Object clone() { try { Option option = (Option) super.clone(); option.values = new ArrayList(values); return option; } catch (CloneNotSupportedException cnse) { throw new RuntimeException(""A CloneNotSupportedException was thrown: "" + cnse.getMessage()); } } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private List values = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_82_Option,Cli,31,82,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean addValue(String value) { throw new UnsupportedOperationException(""The addValue method is not intended for client use."" + ""Subclasses should use the addValueForProcessing method instead.""); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Object); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean addValue(String value) { throw new UnsupportedOperationException(""The addValue method is not intended for client use."" + ""Subclasses should use the addValueForProcessing method instead.""); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean addValue(String value) { throw new UnsupportedOperationException(""The addValue method is not intended for client use."" + ""Subclasses should use the addValueForProcessing method instead.""); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_31_83_HelpFormatter,Cli,31,83,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getNewLine() { return defaultNewLine; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getNewLine() { return defaultNewLine; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getNewLine() { return defaultNewLine; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_0_HelpFormatter,Cli,32,0,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_1_HelpFormatter,Cli,32,1,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getWidth() { return defaultWidth; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getWidth() { return defaultWidth; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getWidth() { return defaultWidth; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_2_HelpFormatter,Cli,32,2,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_3_HelpFormatter,Cli,32,3,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_4_HelpFormatter,Cli,32,4,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_5_HelpFormatter,Cli,32,5,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_6_HelpFormatter,Cli,32,6,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_7_HelpFormatter,Cli,32,7,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getLongOptSeparator() { return longOptSeparator; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getLongOptSeparator() { return longOptSeparator; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getLongOptSeparator() { return longOptSeparator; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_8_HelpFormatter,Cli,32,8,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_9_HelpFormatter,Cli,32,9,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getArgName() { return defaultArgName; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getArgName() { return defaultArgName; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getArgName() { return defaultArgName; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_10_HelpFormatter,Cli,32,10,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_11_HelpFormatter,Cli,32,11,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_12_HelpFormatter,Cli,32,12,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_13_HelpFormatter,Cli,32,13,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_14_HelpFormatter,Cli,32,14,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_15_HelpFormatter,Cli,32,15,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_16_HelpFormatter,Cli,32,16,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_17_HelpFormatter,Cli,32,17,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_18_HelpFormatter,Cli,32,18,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_19_HelpFormatter,Cli,32,19,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_20_HelpFormatter,Cli,32,20,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_21_HelpFormatter,Cli,32,21,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } private void appendOptionGroup(StringBuffer, OptionGroup); private void appendOption(StringBuffer, Option, boolean); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } <PRIVATE_FCTX>private void appendOptionGroup(StringBuffer, OptionGroup); private void appendOption(StringBuffer, Option, boolean);</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>"
Cli_32_22_HelpFormatter,Cli,32,22,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_23_HelpFormatter,Cli,32,23,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_24_HelpFormatter,Cli,32,24,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_25_HelpFormatter,Cli,32,25,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_26_HelpFormatter,Cli,32,26,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_27_HelpFormatter,Cli,32,27,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_28_HelpFormatter,Cli,32,28,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getDescPadding() { return defaultDescPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getDescPadding() { return defaultDescPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getDescPadding() { return defaultDescPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_29_HelpFormatter,Cli,32,29,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_30_HelpFormatter,Cli,32,30,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_31_HelpFormatter,Cli,32,31,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_32_32_HelpFormatter,Cli,32,32,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.PrintWriter;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getNewLine() { return defaultNewLine; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getNewLine() { return defaultNewLine; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getNewLine() { return defaultNewLine; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_0_HelpFormatter,Cli,33,0,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setWidth(int width) { this.defaultWidth = width; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_1_HelpFormatter,Cli,33,1,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getWidth() { return defaultWidth; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getWidth() { return defaultWidth; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getWidth() { return defaultWidth; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_2_HelpFormatter,Cli,33,2,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_3_HelpFormatter,Cli,33,3,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getOptPrefix() { return defaultOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_4_HelpFormatter,Cli,33,4,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_5_HelpFormatter,Cli,33,5,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getLongOptPrefix() { return defaultLongOptPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_6_HelpFormatter,Cli,33,6,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_7_HelpFormatter,Cli,33,7,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getLongOptSeparator() { return longOptSeparator; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getLongOptSeparator() { return longOptSeparator; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getLongOptSeparator() { return longOptSeparator; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_8_HelpFormatter,Cli,33,8,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setArgName(String name) { this.defaultArgName = name; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_9_HelpFormatter,Cli,33,9,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getArgName() { return defaultArgName; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getArgName() { return defaultArgName; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getArgName() { return defaultArgName; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_10_HelpFormatter,Cli,33,10,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public Comparator getOptionComparator() { return optionComparator; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_11_HelpFormatter,Cli,33,11,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_12_HelpFormatter,Cli,33,12,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_13_HelpFormatter,Cli,33,13,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_14_HelpFormatter,Cli,33,14,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_15_HelpFormatter,Cli,33,15,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_16_HelpFormatter,Cli,33,16,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_17_HelpFormatter,Cli,33,17,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_18_HelpFormatter,Cli,33,18,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_19_HelpFormatter,Cli,33,19,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_20_HelpFormatter,Cli,33,20,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(""cmdLineSyntax not provided""); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_21_HelpFormatter,Cli,33,21,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } private void appendOptionGroup(StringBuffer, OptionGroup); private void appendOption(StringBuffer, Option, boolean); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" ""); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append("" ""); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } <PRIVATE_FCTX>private void appendOptionGroup(StringBuffer, OptionGroup); private void appendOption(StringBuffer, Option, boolean);</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public boolean isRequired(); } public class Options implements Serializable { public Collection getOptions(); public OptionGroup getOptionGroup(Option); }</ECTX>"
Cli_33_22_HelpFormatter,Cli,33,22,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_23_HelpFormatter,Cli,33,23,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getLeftPadding() { return defaultLeftPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_24_HelpFormatter,Cli,33,24,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_25_HelpFormatter,Cli,33,25,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_26_HelpFormatter,Cli,33,26,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedTextBlock(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedTextBlock(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } private StringBuffer renderWrappedTextBlock(StringBuffer, int, int, String); }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedTextBlock(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } <PRIVATE_FCTX>private StringBuffer renderWrappedTextBlock(StringBuffer, int, int, String);</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_27_HelpFormatter,Cli,33,27,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setDescPadding(int padding) { this.defaultDescPad = padding; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_28_HelpFormatter,Cli,33,28,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public int getDescPadding() { return defaultDescPad; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public int getDescPadding() { return defaultDescPad; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public int getDescPadding() { return defaultDescPad; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_29_HelpFormatter,Cli,33,29,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_30_HelpFormatter,Cli,33,30,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getSyntaxPrefix() { return defaultSyntaxPrefix; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_31_HelpFormatter,Cli,33,31,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public void setNewLine(String newline) { this.defaultNewLine = newline; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_33_32_HelpFormatter,Cli,33,32,org.apache.commons.cli.HelpFormatter,HelpFormatter,src/main/java/org/apache/commons/cli/HelpFormatter.java,HelpFormatter_ESTest,org/apache/commons/cli/HelpFormatter_ESTest.java,"package org.apache.commons.cli;","import java.io.BufferedReader;|import java.io.IOException;|import java.io.PrintWriter;|import java.io.StringReader;|import java.util.ArrayList;|import java.util.Arrays;|import java.util.Collection;|import java.util.Collections;|import java.util.Comparator;|import java.util.Iterator;|import java.util.List;","HelpFormatter { public String getNewLine() { return defaultNewLine; } public void setWidth(int); public int getWidth(); public void setLeftPadding(int); public int getLeftPadding(); public void setDescPadding(int); public int getDescPadding(); public void setSyntaxPrefix(String); public String getSyntaxPrefix(); public void setNewLine(String); public String getNewLine(); public void setOptPrefix(String); public String getOptPrefix(); public void setLongOptPrefix(String); public String getLongOptPrefix(); public void setLongOptSeparator(String); public String getLongOptSeparator(); public void setArgName(String); public String getArgName(); public Comparator getOptionComparator(); public void setOptionComparator(Comparator); public void printHelp(String, Options); public void printHelp(String, Options, boolean); public void printHelp(String, String, Options, String); public void printHelp(String, String, Options, String, boolean); public void printHelp(int, String, String, Options, String); public void printHelp(int, String, String, Options, String, boolean); public void printHelp(PrintWriter, int, String, String, Options, int, int, String); public void printHelp(PrintWriter, int, String, String, Options, int, int, String, boolean); public void printUsage(PrintWriter, int, String, Options); public void printUsage(PrintWriter, int, String); public void printOptions(PrintWriter, int, Options, int, int); public void printWrapped(PrintWriter, int, String); public void printWrapped(PrintWriter, int, int, String); protected StringBuffer renderOptions(StringBuffer, int, Options, int, int); protected StringBuffer renderWrappedText(StringBuffer, int, int, String); protected int findWrapPos(String, int, int); protected String createPadding(int); protected String rtrim(String); public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = ""usage: ""; public static final String DEFAULT_OPT_PREFIX = ""-""; public static final String DEFAULT_LONG_OPT_PREFIX = ""--""; public static final String DEFAULT_LONG_OPT_SEPARATOR = "" ""; public static final String DEFAULT_ARG_NAME = ""arg""; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(""line.separator""); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); }","<FCTX>HelpFormatter { public String getNewLine() { return defaultNewLine; } }</FCTX> <ECTX></ECTX>","<FCTX>HelpFormatter { public String getNewLine() { return defaultNewLine; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_0_OptionBuilder,Cli,34,0,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } private OptionBuilder(); private static String longopt; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static String longopt; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_1_OptionBuilder,Cli,34,1,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_2_OptionBuilder,Cli,34,2,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_3_OptionBuilder,Cli,34,3,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_4_OptionBuilder,Cli,34,4,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static boolean optionalArg; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_5_OptionBuilder,Cli,34,5,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withType(Class newType) { OptionBuilder.type = newType; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withType(Class newType) { OptionBuilder.type = newType; return instance; } private OptionBuilder(); private static Class type; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withType(Class newType) { OptionBuilder.type = newType; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static Class type; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_6_OptionBuilder,Cli,34,6,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription; return instance; } private OptionBuilder(); private static String description; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static String description; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_7_OptionBuilder,Cli,34,7,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } private OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } <PRIVATE_FCTX>private OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_8_OptionBuilder,Cli,34,8,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static Option create() throws IllegalArgumentException { if (longopt == null) { OptionBuilder.reset(); throw new IllegalArgumentException(""must specify longopt""); } return create(null); } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static Option create() throws IllegalArgumentException { if (longopt == null) { OptionBuilder.reset(); throw new IllegalArgumentException(""must specify longopt""); } return create(null); } private OptionBuilder(); private static void reset(); private static String longopt; }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static Option create() throws IllegalArgumentException { if (longopt == null) { OptionBuilder.reset(); throw new IllegalArgumentException(""must specify longopt""); } return create(null); } <PRIVATE_FCTX>private OptionBuilder(); private static void reset(); private static String longopt;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_9_OptionBuilder,Cli,34,9,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; } private OptionBuilder(); private static void reset(); private static String longopt; private static String description; private static String argName; private static boolean required; private static int numberOfArgs = Option.UNINITIALIZED; private static Class type; private static boolean optionalArg; private static char valuesep; }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public void setLongOpt(String); public void setRequired(boolean); public void setOptionalArg(boolean); public void setArgs(int); public void setType(Class); public void setValueSeparator(char); public void setArgName(String); }</ECTX>","<FCTX>OptionBuilder { public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; } <PRIVATE_FCTX>private OptionBuilder(); private static void reset(); private static String longopt; private static String description; private static String argName; private static boolean required; private static int numberOfArgs = Option.UNINITIALIZED; private static Class type; private static boolean optionalArg; private static char valuesep;</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public void setLongOpt(String); public void setRequired(boolean); public void setOptionalArg(boolean); public void setArgs(int); public void setType(Class); public void setValueSeparator(char); public void setArgName(String); }</ECTX>"
Cli_34_10_Option,Cli,34,10,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public int getId() { return getKey().charAt(0); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public int getId() { return getKey().charAt(0); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public int getId() { return getKey().charAt(0); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_11_Option,Cli,34,11,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getOpt() { return opt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getOpt() { return opt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getOpt() { return opt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_12_OptionBuilder,Cli,34,12,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_13_Option,Cli,34,13,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public Object getType() { return type; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public Object getType() { return type; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public Object getType() { return type; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_14_Option,Cli,34,14,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setType(Class type) { this.type = type; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setType(Class type) { this.type = type; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setType(Class type) { this.type = type; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_15_Option,Cli,34,15,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getLongOpt() { return longOpt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getLongOpt() { return longOpt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getLongOpt() { return longOpt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_16_Option,Cli,34,16,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setLongOpt(String longOpt) { this.longOpt = longOpt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setLongOpt(String longOpt) { this.longOpt = longOpt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setLongOpt(String longOpt) { this.longOpt = longOpt; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_17_Option,Cli,34,17,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setOptionalArg(boolean optionalArg) { this.optionalArg = optionalArg; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setOptionalArg(boolean optionalArg) { this.optionalArg = optionalArg; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setOptionalArg(boolean optionalArg) { this.optionalArg = optionalArg; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_18_Option,Cli,34,18,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean hasOptionalArg() { return optionalArg; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean hasOptionalArg() { return optionalArg; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean hasOptionalArg() { return optionalArg; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_19_Option,Cli,34,19,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean hasLongOpt() { return longOpt != null; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean hasLongOpt() { return longOpt != null; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private String longOpt; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean hasLongOpt() { return longOpt != null; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private String longOpt;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_20_Option,Cli,34,20,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean hasArg() { return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean hasArg() { return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private int numberOfArgs = UNINITIALIZED; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean hasArg() { return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private int numberOfArgs = UNINITIALIZED;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_21_Option,Cli,34,21,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getDescription() { return description; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getDescription() { return description; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getDescription() { return description; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_22_Option,Cli,34,22,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setDescription(String description) { this.description = description; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setDescription(String description) { this.description = description; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setDescription(String description) { this.description = description; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_23_OptionBuilder,Cli,34,23,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } private OptionBuilder(); private static String argName; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static String argName; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_24_Option,Cli,34,24,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean isRequired() { return required; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean isRequired() { return required; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean isRequired() { return required; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_25_Option,Cli,34,25,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setRequired(boolean required) { this.required = required; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setRequired(boolean required) { this.required = required; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setRequired(boolean required) { this.required = required; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_26_Option,Cli,34,26,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setArgName(String argName) { this.argName = argName; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setArgName(String argName) { this.argName = argName; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setArgName(String argName) { this.argName = argName; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_27_Option,Cli,34,27,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getArgName() { return argName; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getArgName() { return argName; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getArgName() { return argName; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_28_Option,Cli,34,28,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean hasArgName() { return argName != null && argName.length() > 0; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean hasArgName() { return argName != null && argName.length() > 0; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private String argName; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean hasArgName() { return argName != null && argName.length() > 0; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private String argName;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_29_Option,Cli,34,29,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean hasArgs() { return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean hasArgs() { return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private int numberOfArgs = UNINITIALIZED; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean hasArgs() { return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private int numberOfArgs = UNINITIALIZED;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_30_Option,Cli,34,30,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setArgs(int num) { this.numberOfArgs = num; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setArgs(int num) { this.numberOfArgs = num; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setArgs(int num) { this.numberOfArgs = num; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_31_Option,Cli,34,31,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public void setValueSeparator(char sep) { this.valuesep = sep; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public void setValueSeparator(char sep) { this.valuesep = sep; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public void setValueSeparator(char sep) { this.valuesep = sep; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_32_Option,Cli,34,32,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public char getValueSeparator() { return valuesep; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public char getValueSeparator() { return valuesep; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public char getValueSeparator() { return valuesep; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_33_Option,Cli,34,33,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean hasValueSeparator() { return valuesep > 0; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean hasValueSeparator() { return valuesep > 0; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private char valuesep; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean hasValueSeparator() { return valuesep > 0; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private char valuesep;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_34_OptionBuilder,Cli,34,34,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } private OptionBuilder(); private static boolean required; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static boolean required; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_35_Option,Cli,34,35,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public int getArgs() { return numberOfArgs; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public int getArgs() { return numberOfArgs; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public int getArgs() { return numberOfArgs; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_36_Option,Cli,34,36,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getValue() { return hasNoValues() ? null : (String) values.get(0); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getValue() { return hasNoValues() ? null : (String) values.get(0); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private boolean hasNoValues(); private List values = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getValue() { return hasNoValues() ? null : (String) values.get(0); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private boolean hasNoValues(); private List values = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_37_Option,Cli,34,37,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getValue(int index) throws IndexOutOfBoundsException { return hasNoValues() ? null : (String) values.get(index); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getValue(int index) throws IndexOutOfBoundsException { return hasNoValues() ? null : (String) values.get(index); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private boolean hasNoValues(); private List values = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getValue(int index) throws IndexOutOfBoundsException { return hasNoValues() ? null : (String) values.get(index); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private boolean hasNoValues(); private List values = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_38_Option,Cli,34,38,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String getValue(String defaultValue) { String value = getValue(); return (value != null) ? value : defaultValue; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String getValue(String defaultValue) { String value = getValue(); return (value != null) ? value : defaultValue; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String getValue(String defaultValue) { String value = getValue(); return (value != null) ? value : defaultValue; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_39_Option,Cli,34,39,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String[] getValues() { return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String[] getValues() { return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private boolean hasNoValues(); private List values = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String[] getValues() { return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private boolean hasNoValues(); private List values = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_40_Option,Cli,34,40,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public List getValuesList() { return values; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public List getValuesList() { return values; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public List getValuesList() { return values; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_41_Option,Cli,34,41,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public String toString() { StringBuffer buf = new StringBuffer().append(""[ option: ""); buf.append(opt); if (longOpt != null) { buf.append("" "").append(longOpt); } buf.append("" ""); if (hasArgs()) { buf.append(""[ARG...]""); } else if (hasArg()) { buf.append("" [ARG]""); } buf.append("" :: "").append(description); if (type != null) { buf.append("" :: "").append(type); } buf.append("" ]""); return buf.toString(); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public String toString() { StringBuffer buf = new StringBuffer().append(""[ option: ""); buf.append(opt); if (longOpt != null) { buf.append("" "").append(longOpt); } buf.append("" ""); if (hasArgs()) { buf.append(""[ARG...]""); } else if (hasArg()) { buf.append("" [ARG]""); } buf.append("" :: "").append(description); if (type != null) { buf.append("" :: "").append(type); } buf.append("" ]""); return buf.toString(); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private String opt; private String longOpt; private String description; private Class type = String.class; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public String toString() { StringBuffer buf = new StringBuffer().append(""[ option: ""); buf.append(opt); if (longOpt != null) { buf.append("" "").append(longOpt); } buf.append("" ""); if (hasArgs()) { buf.append(""[ARG...]""); } else if (hasArg()) { buf.append("" [ARG]""); } buf.append("" :: "").append(description); if (type != null) { buf.append("" :: "").append(type); } buf.append("" ]""); return buf.toString(); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private String opt; private String longOpt; private String description; private Class type = String.class;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_42_Option,Cli,34,42,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } Option option = (Option) o; if (opt != null ? !opt.equals(option.opt) : option.opt != null) { return false; } if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) { return false; } return true; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } Option option = (Option) o; if (opt != null ? !opt.equals(option.opt) : option.opt != null) { return false; } if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) { return false; } return true; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private String opt; private String longOpt; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } Option option = (Option) o; if (opt != null ? !opt.equals(option.opt) : option.opt != null) { return false; } if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) { return false; } return true; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private String opt; private String longOpt;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_43_Option,Cli,34,43,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public int hashCode() { int result; result = opt != null ? opt.hashCode() : 0; result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0); return result; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public int hashCode() { int result; result = opt != null ? opt.hashCode() : 0; result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0); return result; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private String opt; private String longOpt; }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public int hashCode() { int result; result = opt != null ? opt.hashCode() : 0; result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0); return result; } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private String opt; private String longOpt;</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_44_Option,Cli,34,44,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public Object clone() { try { Option option = (Option) super.clone(); option.values = new ArrayList(values); return option; } catch (CloneNotSupportedException cnse) { throw new RuntimeException(""A CloneNotSupportedException was thrown: "" + cnse.getMessage()); } } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public Object clone() { try { Option option = (Option) super.clone(); option.values = new ArrayList(values); return option; } catch (CloneNotSupportedException cnse) { throw new RuntimeException(""A CloneNotSupportedException was thrown: "" + cnse.getMessage()); } } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); private List values = new ArrayList(); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public Object clone() { try { Option option = (Option) super.clone(); option.values = new ArrayList(values); return option; } catch (CloneNotSupportedException cnse) { throw new RuntimeException(""A CloneNotSupportedException was thrown: "" + cnse.getMessage()); } } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX>private List values = new ArrayList();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_45_OptionBuilder,Cli,34,45,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } private OptionBuilder(); private static char valuesep; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static char valuesep; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_46_Option,Cli,34,46,org.apache.commons.cli.Option,Option,src/main/java/org/apache/commons/cli/Option.java,Option_ESTest,org/apache/commons/cli/Option_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.List;","Option implements Cloneable, Serializable { public boolean addValue(String value) { throw new UnsupportedOperationException(""The addValue method is not intended for client use."" + ""Subclasses should use the addValueForProcessing method instead.""); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public int getId(); String getKey(); public String getOpt(); public Object getType(); public void setType(Class); public String getLongOpt(); public void setLongOpt(String); public void setOptionalArg(boolean); public boolean hasOptionalArg(); public boolean hasLongOpt(); public boolean hasArg(); public String getDescription(); public void setDescription(String); public boolean isRequired(); public void setRequired(boolean); public void setArgName(String); public String getArgName(); public boolean hasArgName(); public boolean hasArgs(); public void setArgs(int); public void setValueSeparator(char); public char getValueSeparator(); public boolean hasValueSeparator(); public int getArgs(); void addValueForProcessing(String); public String getValue(); public String getValue(int); public String getValue(String); public String[] getValues(); public List getValuesList(); public String toString(); public boolean equals(Object); public int hashCode(); public Object clone(); void clearValues(); public boolean addValue(String); boolean acceptsArg(); boolean requiresArg(); public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; }","<FCTX>Option implements Cloneable, Serializable { public boolean addValue(String value) { throw new UnsupportedOperationException(""The addValue method is not intended for client use."" + ""Subclasses should use the addValueForProcessing method instead.""); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); }</FCTX> <ECTX></ECTX>","<FCTX>Option implements Cloneable, Serializable { public boolean addValue(String value) { throw new UnsupportedOperationException(""The addValue method is not intended for client use."" + ""Subclasses should use the addValueForProcessing method instead.""); } public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_47_OptionBuilder,Cli,34,47,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } private OptionBuilder(); private static char valuesep; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static char valuesep; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_48_OptionBuilder,Cli,34,48,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } private OptionBuilder(); private static boolean required; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static boolean required; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_49_OptionBuilder,Cli,34,49,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_34_50_OptionBuilder,Cli,34,50,org.apache.commons.cli.OptionBuilder,OptionBuilder,src/main/java/org/apache/commons/cli/OptionBuilder.java,OptionBuilder_ESTest,org/apache/commons/cli/OptionBuilder_ESTest.java,"package org.apache.commons.cli;",,"OptionBuilder { public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } private OptionBuilder(); public static OptionBuilder withLongOpt(String); public static OptionBuilder hasArg(); public static OptionBuilder hasArg(boolean); public static OptionBuilder withArgName(String); public static OptionBuilder isRequired(); public static OptionBuilder withValueSeparator(char); public static OptionBuilder withValueSeparator(); public static OptionBuilder isRequired(boolean); public static OptionBuilder hasArgs(); public static OptionBuilder hasArgs(int); public static OptionBuilder hasOptionalArg(); public static OptionBuilder hasOptionalArgs(); public static OptionBuilder hasOptionalArgs(int); public static OptionBuilder withType(Class); public static OptionBuilder withDescription(String); public static Option create(char); public static Option create(); public static Option create(String); }","<FCTX>OptionBuilder { public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionBuilder { public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } <PRIVATE_FCTX>private OptionBuilder(); private static int numberOfArgs = Option.UNINITIALIZED; private static OptionBuilder instance = new OptionBuilder();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_35_0_Options,Cli,35,0,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Options addOptionGroup(OptionGroup group) { if (group.isRequired()) { requiredOpts.add(group); } for (Option option : group.getOptions()) { option.setRequired(false); addOption(option); optionGroups.put(option.getKey(), group); } return this; } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Options addOptionGroup(OptionGroup group) { if (group.isRequired()) { requiredOpts.add(group); } for (Option option : group.getOptions()) { option.setRequired(false); addOption(option); optionGroups.put(option.getKey(), group); } return this; } private final List<Object> requiredOpts = new ArrayList<Object>(); private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>(); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public void setRequired(boolean); String getKey(); } public class OptionGroup implements Serializable { public boolean isRequired(); public Collection<Option> getOptions(); }</ECTX>","<FCTX>Options implements Serializable { public Options addOptionGroup(OptionGroup group) { if (group.isRequired()) { requiredOpts.add(group); } for (Option option : group.getOptions()) { option.setRequired(false); addOption(option); optionGroups.put(option.getKey(), group); } return this; } <PRIVATE_FCTX>private final List<Object> requiredOpts = new ArrayList<Object>(); private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>();</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public void setRequired(boolean); String getKey(); } public class OptionGroup implements Serializable { public boolean isRequired(); public Collection<Option> getOptions(); }</ECTX>"
Cli_35_1_Options,Cli,35,1,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Options addOption(String opt, String description) { addOption(opt, null, false, description); return this; } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Options addOption(String opt, String description) { addOption(opt, null, false, description); return this; } }</FCTX> <ECTX></ECTX>","<FCTX>Options implements Serializable { public Options addOption(String opt, String description) { addOption(opt, null, false, description); return this; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_35_2_Options,Cli,35,2,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public boolean hasLongOption(String opt) { opt = Util.stripLeadingHyphens(opt); return longOpts.containsKey(opt); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public boolean hasLongOption(String opt) { opt = Util.stripLeadingHyphens(opt); return longOpts.containsKey(opt); } private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>","<FCTX>Options implements Serializable { public boolean hasLongOption(String opt) { opt = Util.stripLeadingHyphens(opt); return longOpts.containsKey(opt); } <PRIVATE_FCTX>private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>"
Cli_35_3_Options,Cli,35,3,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public boolean hasShortOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public boolean hasShortOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt); } private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>","<FCTX>Options implements Serializable { public boolean hasShortOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt); } <PRIVATE_FCTX>private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>"
Cli_35_4_Options,Cli,35,4,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public OptionGroup getOptionGroup(Option opt) { return optionGroups.get(opt.getKey()); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public OptionGroup getOptionGroup(Option opt) { return optionGroups.get(opt.getKey()); } private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>(); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); }</ECTX>","<FCTX>Options implements Serializable { public OptionGroup getOptionGroup(Option opt) { return optionGroups.get(opt.getKey()); } <PRIVATE_FCTX>private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>();</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); }</ECTX>"
Cli_35_5_Options,Cli,35,5,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { @Override public String toString() { StringBuilder buf = new StringBuilder(); buf.append(""[ Options: [ short ""); buf.append(shortOpts.toString()); buf.append("" ] [ long ""); buf.append(longOpts); buf.append("" ]""); return buf.toString(); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { @Override public String toString() { StringBuilder buf = new StringBuilder(); buf.append(""[ Options: [ short ""); buf.append(shortOpts.toString()); buf.append("" ] [ long ""); buf.append(longOpts); buf.append("" ]""); return buf.toString(); } private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX></ECTX>","<FCTX>Options implements Serializable { @Override public String toString() { StringBuilder buf = new StringBuilder(); buf.append(""[ Options: [ short ""); buf.append(shortOpts.toString()); buf.append("" ] [ long ""); buf.append(longOpts); buf.append("" ]""); return buf.toString(); } <PRIVATE_FCTX>private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_35_6_Options,Cli,35,6,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Options addOption(String opt, boolean hasArg, String description) { addOption(opt, null, hasArg, description); return this; } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Options addOption(String opt, boolean hasArg, String description) { addOption(opt, null, hasArg, description); return this; } }</FCTX> <ECTX></ECTX>","<FCTX>Options implements Serializable { public Options addOption(String opt, boolean hasArg, String description) { addOption(opt, null, hasArg, description); return this; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_35_7_Options,Cli,35,7,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Options addOption(String opt, String longOpt, boolean hasArg, String description) { addOption(new Option(opt, longOpt, hasArg, description)); return this; } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Options addOption(String opt, String longOpt, boolean hasArg, String description) { addOption(new Option(opt, longOpt, hasArg, description)); return this; } }</FCTX> <ECTX></ECTX>","<FCTX>Options implements Serializable { public Options addOption(String opt, String longOpt, boolean hasArg, String description) { addOption(new Option(opt, longOpt, hasArg, description)); return this; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_35_8_Options,Cli,35,8,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Options addOption(Option opt) { String key = opt.getKey(); if (opt.hasLongOpt()) { longOpts.put(opt.getLongOpt(), opt); } if (opt.isRequired()) { if (requiredOpts.contains(key)) { requiredOpts.remove(requiredOpts.indexOf(key)); } requiredOpts.add(key); } shortOpts.put(key, opt); return this; } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Options addOption(Option opt) { String key = opt.getKey(); if (opt.hasLongOpt()) { longOpts.put(opt.getLongOpt(), opt); } if (opt.isRequired()) { if (requiredOpts.contains(key)) { requiredOpts.remove(requiredOpts.indexOf(key)); } requiredOpts.add(key); } shortOpts.put(key, opt); return this; } private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); private final List<Object> requiredOpts = new ArrayList<Object>(); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); public boolean hasLongOpt(); public String getLongOpt(); public boolean isRequired(); }</ECTX>","<FCTX>Options implements Serializable { public Options addOption(Option opt) { String key = opt.getKey(); if (opt.hasLongOpt()) { longOpts.put(opt.getLongOpt(), opt); } if (opt.isRequired()) { if (requiredOpts.contains(key)) { requiredOpts.remove(requiredOpts.indexOf(key)); } requiredOpts.add(key); } shortOpts.put(key, opt); return this; } <PRIVATE_FCTX>private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); private final List<Object> requiredOpts = new ArrayList<Object>();</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); public boolean hasLongOpt(); public String getLongOpt(); public boolean isRequired(); }</ECTX>"
Cli_35_9_Options,Cli,35,9,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Collection<Option> getOptions() { return Collections.unmodifiableCollection(helpOptions()); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Collection<Option> getOptions() { return Collections.unmodifiableCollection(helpOptions()); } }</FCTX> <ECTX></ECTX>","<FCTX>Options implements Serializable { public Collection<Option> getOptions() { return Collections.unmodifiableCollection(helpOptions()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_35_10_Options,Cli,35,10,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public List getRequiredOptions() { return Collections.unmodifiableList(requiredOpts); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public List getRequiredOptions() { return Collections.unmodifiableList(requiredOpts); } private final List<Object> requiredOpts = new ArrayList<Object>(); }</FCTX> <ECTX></ECTX>","<FCTX>Options implements Serializable { public List getRequiredOptions() { return Collections.unmodifiableList(requiredOpts); } <PRIVATE_FCTX>private final List<Object> requiredOpts = new ArrayList<Object>();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_35_11_Options,Cli,35,11,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Option getOption(String opt) { opt = Util.stripLeadingHyphens(opt); if (shortOpts.containsKey(opt)) { return shortOpts.get(opt); } return longOpts.get(opt); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Option getOption(String opt) { opt = Util.stripLeadingHyphens(opt); if (shortOpts.containsKey(opt)) { return shortOpts.get(opt); } return longOpts.get(opt); } private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>","<FCTX>Options implements Serializable { public Option getOption(String opt) { opt = Util.stripLeadingHyphens(opt); if (shortOpts.containsKey(opt)) { return shortOpts.get(opt); } return longOpts.get(opt); } <PRIVATE_FCTX>private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>"
Cli_35_12_Options,Cli,35,12,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public List<String> getMatchingOptions(String opt) { opt = Util.stripLeadingHyphens(opt); List<String> matchingOpts = new ArrayList<String>(); if(longOpts.keySet().contains(opt)) { return Collections.singletonList(opt); } for (String longOpt : longOpts.keySet()) { if (longOpt.startsWith(opt)) { matchingOpts.add(longOpt); } } return matchingOpts; } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public List<String> getMatchingOptions(String opt) { opt = Util.stripLeadingHyphens(opt); List<String> matchingOpts = new ArrayList<String>(); if(longOpts.keySet().contains(opt)) { return Collections.singletonList(opt); } for (String longOpt : longOpts.keySet()) { if (longOpt.startsWith(opt)) { matchingOpts.add(longOpt); } } return matchingOpts; } private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>","<FCTX>Options implements Serializable { public List<String> getMatchingOptions(String opt) { opt = Util.stripLeadingHyphens(opt); List<String> matchingOpts = new ArrayList<String>(); if(longOpts.keySet().contains(opt)) { return Collections.singletonList(opt); } for (String longOpt : longOpts.keySet()) { if (longOpt.startsWith(opt)) { matchingOpts.add(longOpt); } } return matchingOpts; } <PRIVATE_FCTX>private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>"
Cli_35_13_Options,Cli,35,13,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashMap;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public boolean hasOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt) || longOpts.containsKey(opt); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public boolean hasOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt) || longOpts.containsKey(opt); } private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>","<FCTX>Options implements Serializable { public boolean hasOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt) || longOpts.containsKey(opt); } <PRIVATE_FCTX>private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>"
Cli_36_0_OptionGroup,Cli,36,0,org.apache.commons.cli.OptionGroup,OptionGroup,src/main/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedHashMap;|import java.util.Map;","OptionGroup implements Serializable { public OptionGroup addOption(Option option) { optionMap.put(option.getKey(), option); return this; } public OptionGroup addOption(Option); public Collection<String> getNames(); public Collection<Option> getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); @Override public String toString(); }","<FCTX>OptionGroup implements Serializable { public OptionGroup addOption(Option option) { optionMap.put(option.getKey(), option); return this; } private final Map<String, Option> optionMap = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); }</ECTX>","<FCTX>OptionGroup implements Serializable { public OptionGroup addOption(Option option) { optionMap.put(option.getKey(), option); return this; } <PRIVATE_FCTX>private final Map<String, Option> optionMap = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); }</ECTX>"
Cli_36_1_OptionGroup,Cli,36,1,org.apache.commons.cli.OptionGroup,OptionGroup,src/main/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedHashMap;|import java.util.Map;","OptionGroup implements Serializable { public Collection<String> getNames() { return optionMap.keySet(); } public OptionGroup addOption(Option); public Collection<String> getNames(); public Collection<Option> getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); @Override public String toString(); }","<FCTX>OptionGroup implements Serializable { public Collection<String> getNames() { return optionMap.keySet(); } private final Map<String, Option> optionMap = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionGroup implements Serializable { public Collection<String> getNames() { return optionMap.keySet(); } <PRIVATE_FCTX>private final Map<String, Option> optionMap = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_36_2_Options,Cli,36,2,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Options addOption(String opt, boolean hasArg, String description) { addOption(opt, null, hasArg, description); return this; } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Options addOption(String opt, boolean hasArg, String description) { addOption(opt, null, hasArg, description); return this; } }</FCTX> <ECTX></ECTX>","<FCTX>Options implements Serializable { public Options addOption(String opt, boolean hasArg, String description) { addOption(opt, null, hasArg, description); return this; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_36_3_Options,Cli,36,3,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Options addOption(String opt, String longOpt, boolean hasArg, String description) { addOption(new Option(opt, longOpt, hasArg, description)); return this; } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Options addOption(String opt, String longOpt, boolean hasArg, String description) { addOption(new Option(opt, longOpt, hasArg, description)); return this; } }</FCTX> <ECTX></ECTX>","<FCTX>Options implements Serializable { public Options addOption(String opt, String longOpt, boolean hasArg, String description) { addOption(new Option(opt, longOpt, hasArg, description)); return this; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_36_4_Options,Cli,36,4,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Options addOption(Option opt) { String key = opt.getKey(); if (opt.hasLongOpt()) { longOpts.put(opt.getLongOpt(), opt); } if (opt.isRequired()) { if (requiredOpts.contains(key)) { requiredOpts.remove(requiredOpts.indexOf(key)); } requiredOpts.add(key); } shortOpts.put(key, opt); return this; } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Options addOption(Option opt) { String key = opt.getKey(); if (opt.hasLongOpt()) { longOpts.put(opt.getLongOpt(), opt); } if (opt.isRequired()) { if (requiredOpts.contains(key)) { requiredOpts.remove(requiredOpts.indexOf(key)); } requiredOpts.add(key); } shortOpts.put(key, opt); return this; } private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); private final List<Object> requiredOpts = new ArrayList<Object>(); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); public boolean hasLongOpt(); public String getLongOpt(); public boolean isRequired(); }</ECTX>","<FCTX>Options implements Serializable { public Options addOption(Option opt) { String key = opt.getKey(); if (opt.hasLongOpt()) { longOpts.put(opt.getLongOpt(), opt); } if (opt.isRequired()) { if (requiredOpts.contains(key)) { requiredOpts.remove(requiredOpts.indexOf(key)); } requiredOpts.add(key); } shortOpts.put(key, opt); return this; } <PRIVATE_FCTX>private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); private final List<Object> requiredOpts = new ArrayList<Object>();</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); public boolean hasLongOpt(); public String getLongOpt(); public boolean isRequired(); }</ECTX>"
Cli_36_5_Options,Cli,36,5,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Collection<Option> getOptions() { return Collections.unmodifiableCollection(helpOptions()); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Collection<Option> getOptions() { return Collections.unmodifiableCollection(helpOptions()); } }</FCTX> <ECTX></ECTX>","<FCTX>Options implements Serializable { public Collection<Option> getOptions() { return Collections.unmodifiableCollection(helpOptions()); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_36_6_Options,Cli,36,6,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public List getRequiredOptions() { return Collections.unmodifiableList(requiredOpts); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public List getRequiredOptions() { return Collections.unmodifiableList(requiredOpts); } private final List<Object> requiredOpts = new ArrayList<Object>(); }</FCTX> <ECTX></ECTX>","<FCTX>Options implements Serializable { public List getRequiredOptions() { return Collections.unmodifiableList(requiredOpts); } <PRIVATE_FCTX>private final List<Object> requiredOpts = new ArrayList<Object>();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_36_7_Options,Cli,36,7,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Option getOption(String opt) { opt = Util.stripLeadingHyphens(opt); if (shortOpts.containsKey(opt)) { return shortOpts.get(opt); } return longOpts.get(opt); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Option getOption(String opt) { opt = Util.stripLeadingHyphens(opt); if (shortOpts.containsKey(opt)) { return shortOpts.get(opt); } return longOpts.get(opt); } private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>","<FCTX>Options implements Serializable { public Option getOption(String opt) { opt = Util.stripLeadingHyphens(opt); if (shortOpts.containsKey(opt)) { return shortOpts.get(opt); } return longOpts.get(opt); } <PRIVATE_FCTX>private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>"
Cli_36_8_Options,Cli,36,8,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public List<String> getMatchingOptions(String opt) { opt = Util.stripLeadingHyphens(opt); List<String> matchingOpts = new ArrayList<String>(); if (longOpts.keySet().contains(opt)) { return Collections.singletonList(opt); } for (String longOpt : longOpts.keySet()) { if (longOpt.startsWith(opt)) { matchingOpts.add(longOpt); } } return matchingOpts; } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public List<String> getMatchingOptions(String opt) { opt = Util.stripLeadingHyphens(opt); List<String> matchingOpts = new ArrayList<String>(); if (longOpts.keySet().contains(opt)) { return Collections.singletonList(opt); } for (String longOpt : longOpts.keySet()) { if (longOpt.startsWith(opt)) { matchingOpts.add(longOpt); } } return matchingOpts; } private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>","<FCTX>Options implements Serializable { public List<String> getMatchingOptions(String opt) { opt = Util.stripLeadingHyphens(opt); List<String> matchingOpts = new ArrayList<String>(); if (longOpts.keySet().contains(opt)) { return Collections.singletonList(opt); } for (String longOpt : longOpts.keySet()) { if (longOpt.startsWith(opt)) { matchingOpts.add(longOpt); } } return matchingOpts; } <PRIVATE_FCTX>private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>"
Cli_36_9_Options,Cli,36,9,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public boolean hasOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt) || longOpts.containsKey(opt); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public boolean hasOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt) || longOpts.containsKey(opt); } private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>","<FCTX>Options implements Serializable { public boolean hasOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt) || longOpts.containsKey(opt); } <PRIVATE_FCTX>private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>"
Cli_36_10_Options,Cli,36,10,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public boolean hasLongOption(String opt) { opt = Util.stripLeadingHyphens(opt); return longOpts.containsKey(opt); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public boolean hasLongOption(String opt) { opt = Util.stripLeadingHyphens(opt); return longOpts.containsKey(opt); } private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>","<FCTX>Options implements Serializable { public boolean hasLongOption(String opt) { opt = Util.stripLeadingHyphens(opt); return longOpts.containsKey(opt); } <PRIVATE_FCTX>private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>"
Cli_36_11_Options,Cli,36,11,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public boolean hasShortOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public boolean hasShortOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt); } private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>","<FCTX>Options implements Serializable { public boolean hasShortOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt); } <PRIVATE_FCTX>private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX>final class Util { static String stripLeadingHyphens(String); }</ECTX>"
Cli_36_12_OptionGroup,Cli,36,12,org.apache.commons.cli.OptionGroup,OptionGroup,src/main/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedHashMap;|import java.util.Map;","OptionGroup implements Serializable { public Collection<Option> getOptions() { return optionMap.values(); } public OptionGroup addOption(Option); public Collection<String> getNames(); public Collection<Option> getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); @Override public String toString(); }","<FCTX>OptionGroup implements Serializable { public Collection<Option> getOptions() { return optionMap.values(); } private final Map<String, Option> optionMap = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX></ECTX>","<FCTX>OptionGroup implements Serializable { public Collection<Option> getOptions() { return optionMap.values(); } <PRIVATE_FCTX>private final Map<String, Option> optionMap = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_36_13_Options,Cli,36,13,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public OptionGroup getOptionGroup(Option opt) { return optionGroups.get(opt.getKey()); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public OptionGroup getOptionGroup(Option opt) { return optionGroups.get(opt.getKey()); } private final Map<String, OptionGroup> optionGroups = new LinkedHashMap<String, OptionGroup>(); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); }</ECTX>","<FCTX>Options implements Serializable { public OptionGroup getOptionGroup(Option opt) { return optionGroups.get(opt.getKey()); } <PRIVATE_FCTX>private final Map<String, OptionGroup> optionGroups = new LinkedHashMap<String, OptionGroup>();</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); }</ECTX>"
Cli_36_14_Options,Cli,36,14,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { @Override public String toString() { StringBuilder buf = new StringBuilder(); buf.append(""[ Options: [ short ""); buf.append(shortOpts.toString()); buf.append("" ] [ long ""); buf.append(longOpts); buf.append("" ]""); return buf.toString(); } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { @Override public String toString() { StringBuilder buf = new StringBuilder(); buf.append(""[ Options: [ short ""); buf.append(shortOpts.toString()); buf.append("" ] [ long ""); buf.append(longOpts); buf.append("" ]""); return buf.toString(); } private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); }</FCTX> <ECTX></ECTX>","<FCTX>Options implements Serializable { @Override public String toString() { StringBuilder buf = new StringBuilder(); buf.append(""[ Options: [ short ""); buf.append(shortOpts.toString()); buf.append("" ] [ long ""); buf.append(longOpts); buf.append("" ]""); return buf.toString(); } <PRIVATE_FCTX>private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();</PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_36_15_OptionGroup,Cli,36,15,org.apache.commons.cli.OptionGroup,OptionGroup,src/main/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedHashMap;|import java.util.Map;","OptionGroup implements Serializable { public void setSelected(Option option) throws AlreadySelectedException { if (option == null) { selected = null; return; } if (selected == null || selected.equals(option.getKey())) { selected = option.getKey(); } else { throw new AlreadySelectedException(this, option); } } public OptionGroup addOption(Option); public Collection<String> getNames(); public Collection<Option> getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); @Override public String toString(); }","<FCTX>OptionGroup implements Serializable { public void setSelected(Option option) throws AlreadySelectedException { if (option == null) { selected = null; return; } if (selected == null || selected.equals(option.getKey())) { selected = option.getKey(); } else { throw new AlreadySelectedException(this, option); } } private String selected; }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); }</ECTX>","<FCTX>OptionGroup implements Serializable { public void setSelected(Option option) throws AlreadySelectedException { if (option == null) { selected = null; return; } if (selected == null || selected.equals(option.getKey())) { selected = option.getKey(); } else { throw new AlreadySelectedException(this, option); } } <PRIVATE_FCTX>private String selected;</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); String getKey(); }</ECTX>"
Cli_36_16_OptionGroup,Cli,36,16,org.apache.commons.cli.OptionGroup,OptionGroup,src/main/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedHashMap;|import java.util.Map;","OptionGroup implements Serializable { public String getSelected() { return selected; } public OptionGroup addOption(Option); public Collection<String> getNames(); public Collection<Option> getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); @Override public String toString(); }","<FCTX>OptionGroup implements Serializable { public String getSelected() { return selected; } }</FCTX> <ECTX></ECTX>","<FCTX>OptionGroup implements Serializable { public String getSelected() { return selected; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_36_17_OptionGroup,Cli,36,17,org.apache.commons.cli.OptionGroup,OptionGroup,src/main/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedHashMap;|import java.util.Map;","OptionGroup implements Serializable { public void setRequired(boolean required) { this.required = required; } public OptionGroup addOption(Option); public Collection<String> getNames(); public Collection<Option> getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); @Override public String toString(); }","<FCTX>OptionGroup implements Serializable { public void setRequired(boolean required) { this.required = required; } }</FCTX> <ECTX></ECTX>","<FCTX>OptionGroup implements Serializable { public void setRequired(boolean required) { this.required = required; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_36_18_OptionGroup,Cli,36,18,org.apache.commons.cli.OptionGroup,OptionGroup,src/main/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedHashMap;|import java.util.Map;","OptionGroup implements Serializable { public boolean isRequired() { return required; } public OptionGroup addOption(Option); public Collection<String> getNames(); public Collection<Option> getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); @Override public String toString(); }","<FCTX>OptionGroup implements Serializable { public boolean isRequired() { return required; } }</FCTX> <ECTX></ECTX>","<FCTX>OptionGroup implements Serializable { public boolean isRequired() { return required; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_36_19_OptionGroup,Cli,36,19,org.apache.commons.cli.OptionGroup,OptionGroup,src/main/java/org/apache/commons/cli/OptionGroup.java,OptionGroup_ESTest,org/apache/commons/cli/OptionGroup_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.Collection;|import java.util.Iterator;|import java.util.LinkedHashMap;|import java.util.Map;","OptionGroup implements Serializable { @Override public String toString() { StringBuilder buff = new StringBuilder(); Iterator<Option> iter = getOptions().iterator(); buff.append(""[""); while (iter.hasNext()) { Option option = iter.next(); if (option.getOpt() != null) { buff.append(""-""); buff.append(option.getOpt()); } else { buff.append(""--""); buff.append(option.getLongOpt()); } if (option.getDescription() != null) { buff.append("" ""); buff.append(option.getDescription()); } if (iter.hasNext()) { buff.append("", ""); } } buff.append(""]""); return buff.toString(); } public OptionGroup addOption(Option); public Collection<String> getNames(); public Collection<Option> getOptions(); public void setSelected(Option); public String getSelected(); public void setRequired(boolean); public boolean isRequired(); @Override public String toString(); }","<FCTX>OptionGroup implements Serializable { @Override public String toString() { StringBuilder buff = new StringBuilder(); Iterator<Option> iter = getOptions().iterator(); buff.append(""[""); while (iter.hasNext()) { Option option = iter.next(); if (option.getOpt() != null) { buff.append(""-""); buff.append(option.getOpt()); } else { buff.append(""--""); buff.append(option.getLongOpt()); } if (option.getDescription() != null) { buff.append("" ""); buff.append(option.getDescription()); } if (iter.hasNext()) { buff.append("", ""); } } buff.append(""]""); return buff.toString(); } }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public String getOpt(); public String getLongOpt(); public String getDescription(); }</ECTX>","<FCTX>OptionGroup implements Serializable { @Override public String toString() { StringBuilder buff = new StringBuilder(); Iterator<Option> iter = getOptions().iterator(); buff.append(""[""); while (iter.hasNext()) { Option option = iter.next(); if (option.getOpt() != null) { buff.append(""-""); buff.append(option.getOpt()); } else { buff.append(""--""); buff.append(option.getLongOpt()); } if (option.getDescription() != null) { buff.append("" ""); buff.append(option.getDescription()); } if (iter.hasNext()) { buff.append("", ""); } } buff.append(""]""); return buff.toString(); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public String getOpt(); public String getLongOpt(); public String getDescription(); }</ECTX>"
Cli_36_20_Options,Cli,36,20,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Options addOptionGroup(OptionGroup group) { if (group.isRequired()) { requiredOpts.add(group); } for (Option option : group.getOptions()) { option.setRequired(false); addOption(option); optionGroups.put(option.getKey(), group); } return this; } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Options addOptionGroup(OptionGroup group) { if (group.isRequired()) { requiredOpts.add(group); } for (Option option : group.getOptions()) { option.setRequired(false); addOption(option); optionGroups.put(option.getKey(), group); } return this; } private final List<Object> requiredOpts = new ArrayList<Object>(); private final Map<String, OptionGroup> optionGroups = new LinkedHashMap<String, OptionGroup>(); }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public void setRequired(boolean); String getKey(); } public class OptionGroup implements Serializable { public boolean isRequired(); public Collection<Option> getOptions(); }</ECTX>","<FCTX>Options implements Serializable { public Options addOptionGroup(OptionGroup group) { if (group.isRequired()) { requiredOpts.add(group); } for (Option option : group.getOptions()) { option.setRequired(false); addOption(option); optionGroups.put(option.getKey(), group); } return this; } <PRIVATE_FCTX>private final List<Object> requiredOpts = new ArrayList<Object>(); private final Map<String, OptionGroup> optionGroups = new LinkedHashMap<String, OptionGroup>();</PRIVATE_FCTX> }</FCTX> <ECTX>public class Option implements Cloneable, Serializable { public Option(String, String); public Option(String, boolean, String); public Option(String, String, boolean, String); public void setRequired(boolean); String getKey(); } public class OptionGroup implements Serializable { public boolean isRequired(); public Collection<Option> getOptions(); }</ECTX>"
Cli_36_21_Options,Cli,36,21,org.apache.commons.cli.Options,Options,src/main/java/org/apache/commons/cli/Options.java,Options_ESTest,org/apache/commons/cli/Options_ESTest.java,"package org.apache.commons.cli;","import java.io.Serializable;|import java.util.ArrayList;|import java.util.Collection;|import java.util.Collections;|import java.util.HashSet;|import java.util.LinkedHashMap;|import java.util.List;|import java.util.Map;","Options implements Serializable { public Options addOption(String opt, String description) { addOption(opt, null, false, description); return this; } public Options addOptionGroup(OptionGroup); Collection<OptionGroup> getOptionGroups(); public Options addOption(String, String); public Options addOption(String, boolean, String); public Options addOption(String, String, boolean, String); public Options addOption(Option); public Collection<Option> getOptions(); List<Option> helpOptions(); public List getRequiredOptions(); public Option getOption(String); public List<String> getMatchingOptions(String); public boolean hasOption(String); public boolean hasLongOption(String); public boolean hasShortOption(String); public OptionGroup getOptionGroup(Option); @Override public String toString(); }","<FCTX>Options implements Serializable { public Options addOption(String opt, String description) { addOption(opt, null, false, description); return this; } }</FCTX> <ECTX></ECTX>","<FCTX>Options implements Serializable { public Options addOption(String opt, String description) { addOption(opt, null, false, description); return this; } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_37_0_DefaultParser,Cli,37,0,org.apache.commons.cli.DefaultParser,DefaultParser,src/main/java/org/apache/commons/cli/DefaultParser.java,DefaultParser_ESTest,org/apache/commons/cli/DefaultParser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Enumeration;|import java.util.List;|import java.util.Properties;","DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void handleConcatenatedOptions(String); protected CommandLine cmd; protected Options options; protected boolean stopAtNonOption; protected String currentToken; protected Option currentOption; protected boolean skipParsing; protected List expectedOpts; }","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } }</FCTX> <ECTX></ECTX>","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_37_1_DefaultParser,Cli,37,1,org.apache.commons.cli.DefaultParser,DefaultParser,src/main/java/org/apache/commons/cli/DefaultParser.java,DefaultParser_ESTest,org/apache/commons/cli/DefaultParser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Enumeration;|import java.util.List;|import java.util.Properties;","DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void handleConcatenatedOptions(String); protected CommandLine cmd; protected Options options; protected boolean stopAtNonOption; protected String currentToken; protected Option currentOption; protected boolean skipParsing; protected List expectedOpts; }","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } }</FCTX> <ECTX></ECTX>","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_37_2_DefaultParser,Cli,37,2,org.apache.commons.cli.DefaultParser,DefaultParser,src/main/java/org/apache/commons/cli/DefaultParser.java,DefaultParser_ESTest,org/apache/commons/cli/DefaultParser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Enumeration;|import java.util.List;|import java.util.Properties;","DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void handleConcatenatedOptions(String); protected CommandLine cmd; protected Options options; protected boolean stopAtNonOption; protected String currentToken; protected Option currentOption; protected boolean skipParsing; protected List expectedOpts; }","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } }</FCTX> <ECTX></ECTX>","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_37_3_DefaultParser,Cli,37,3,org.apache.commons.cli.DefaultParser,DefaultParser,src/main/java/org/apache/commons/cli/DefaultParser.java,DefaultParser_ESTest,org/apache/commons/cli/DefaultParser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Enumeration;|import java.util.List;|import java.util.Properties;","DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (String argument : arguments) { handleToken(argument); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void handleConcatenatedOptions(String); protected CommandLine cmd; protected Options options; protected boolean stopAtNonOption; protected String currentToken; protected Option currentOption; protected boolean skipParsing; protected List expectedOpts; }","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (String argument : arguments) { handleToken(argument); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } private void handleToken(String); private void checkRequiredArgs(); private void handleProperties(Properties); private void checkRequiredOptions(); }</FCTX> <ECTX>public class OptionGroup implements Serializable { public void setSelected(Option); } public class Options implements Serializable { public List getRequiredOptions(); Collection<OptionGroup> getOptionGroups(); }</ECTX>","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (String argument : arguments) { handleToken(argument); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } <PRIVATE_FCTX>private void handleToken(String); private void checkRequiredArgs(); private void handleProperties(Properties); private void checkRequiredOptions();</PRIVATE_FCTX> }</FCTX> <ECTX>public class OptionGroup implements Serializable { public void setSelected(Option); } public class Options implements Serializable { public List getRequiredOptions(); Collection<OptionGroup> getOptionGroups(); }</ECTX>"
Cli_38_0_DefaultParser,Cli,38,0,org.apache.commons.cli.DefaultParser,DefaultParser,src/main/java/org/apache/commons/cli/DefaultParser.java,DefaultParser_ESTest,org/apache/commons/cli/DefaultParser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Enumeration;|import java.util.List;|import java.util.Properties;","DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void handleConcatenatedOptions(String); protected CommandLine cmd; protected Options options; protected boolean stopAtNonOption; protected String currentToken; protected Option currentOption; protected boolean skipParsing; protected List expectedOpts; }","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } }</FCTX> <ECTX></ECTX>","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_38_1_DefaultParser,Cli,38,1,org.apache.commons.cli.DefaultParser,DefaultParser,src/main/java/org/apache/commons/cli/DefaultParser.java,DefaultParser_ESTest,org/apache/commons/cli/DefaultParser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Enumeration;|import java.util.List;|import java.util.Properties;","DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void handleConcatenatedOptions(String); protected CommandLine cmd; protected Options options; protected boolean stopAtNonOption; protected String currentToken; protected Option currentOption; protected boolean skipParsing; protected List expectedOpts; }","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } }</FCTX> <ECTX></ECTX>","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_38_2_DefaultParser,Cli,38,2,org.apache.commons.cli.DefaultParser,DefaultParser,src/main/java/org/apache/commons/cli/DefaultParser.java,DefaultParser_ESTest,org/apache/commons/cli/DefaultParser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Enumeration;|import java.util.List;|import java.util.Properties;","DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void handleConcatenatedOptions(String); protected CommandLine cmd; protected Options options; protected boolean stopAtNonOption; protected String currentToken; protected Option currentOption; protected boolean skipParsing; protected List expectedOpts; }","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } }</FCTX> <ECTX></ECTX>","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_38_3_DefaultParser,Cli,38,3,org.apache.commons.cli.DefaultParser,DefaultParser,src/main/java/org/apache/commons/cli/DefaultParser.java,DefaultParser_ESTest,org/apache/commons/cli/DefaultParser_ESTest.java,"package org.apache.commons.cli;","import java.util.ArrayList;|import java.util.Enumeration;|import java.util.List;|import java.util.Properties;","DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (String argument : arguments) { handleToken(argument); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } public CommandLine parse(Options, String[]); public CommandLine parse(Options, String[], Properties); public CommandLine parse(Options, String[], boolean); public CommandLine parse(Options, String[], Properties, boolean); protected void handleConcatenatedOptions(String); protected CommandLine cmd; protected Options options; protected boolean stopAtNonOption; protected String currentToken; protected Option currentOption; protected boolean skipParsing; protected List expectedOpts; }","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (String argument : arguments) { handleToken(argument); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } private void handleToken(String); private void checkRequiredArgs(); private void handleProperties(Properties); private void checkRequiredOptions(); }</FCTX> <ECTX>public class OptionGroup implements Serializable { public void setSelected(Option); } public class Options implements Serializable { public List getRequiredOptions(); Collection<OptionGroup> getOptionGroups(); }</ECTX>","<FCTX>DefaultParser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions()); for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (String argument : arguments) { handleToken(argument); } } checkRequiredArgs(); handleProperties(properties); checkRequiredOptions(); return cmd; } <PRIVATE_FCTX>private void handleToken(String); private void checkRequiredArgs(); private void handleProperties(Properties); private void checkRequiredOptions();</PRIVATE_FCTX> }</FCTX> <ECTX>public class OptionGroup implements Serializable { public void setSelected(Option); } public class Options implements Serializable { public List getRequiredOptions(); Collection<OptionGroup> getOptionGroups(); }</ECTX>"
Cli_39_0_TypeHandler,Cli,39,0,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Object createValue(final String str, final Object obj) throws ParseException { return createValue(str, (Class<?>) obj); } public static Object createValue(String, Object); public static Object createValue(String, Class<?>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Object createValue(final String str, final Object obj) throws ParseException { return createValue(str, (Class<?>) obj); } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Object createValue(final String str, final Object obj) throws ParseException { return createValue(str, (Class<?>) obj); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_39_1_TypeHandler,Cli,39,1,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Object createValue(final String str, final Class<?> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return createURL(str); } else { return null; } } public static Object createValue(String, Object); public static Object createValue(String, Class<?>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Object createValue(final String str, final Class<?> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return createURL(str); } else { return null; } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Object createValue(final String str, final Class<?> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return createURL(str); } else { return null; } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_39_2_TypeHandler,Cli,39,2,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Object createObject(final String classname) throws ParseException { Class<?> cl; try { cl = Class.forName(classname); } catch (final ClassNotFoundException cnfe) { throw new ParseException(""Unable to find the class: "" + classname); } try { return cl.newInstance(); } catch (final Exception e) { throw new ParseException(e.getClass().getName() + ""; Unable to create an instance of: "" + classname); } } public static Object createValue(String, Object); public static Object createValue(String, Class<?>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Object createObject(final String classname) throws ParseException { Class<?> cl; try { cl = Class.forName(classname); } catch (final ClassNotFoundException cnfe) { throw new ParseException(""Unable to find the class: "" + classname); } try { return cl.newInstance(); } catch (final Exception e) { throw new ParseException(e.getClass().getName() + ""; Unable to create an instance of: "" + classname); } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Object createObject(final String classname) throws ParseException { Class<?> cl; try { cl = Class.forName(classname); } catch (final ClassNotFoundException cnfe) { throw new ParseException(""Unable to find the class: "" + classname); } try { return cl.newInstance(); } catch (final Exception e) { throw new ParseException(e.getClass().getName() + ""; Unable to create an instance of: "" + classname); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_39_3_TypeHandler,Cli,39,3,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Number createNumber(final String str) throws ParseException { try { if (str.indexOf('.') != -1) { return Double.valueOf(str); } return Long.valueOf(str); } catch (final NumberFormatException e) { throw new ParseException(e.getMessage()); } } public static Object createValue(String, Object); public static Object createValue(String, Class<?>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Number createNumber(final String str) throws ParseException { try { if (str.indexOf('.') != -1) { return Double.valueOf(str); } return Long.valueOf(str); } catch (final NumberFormatException e) { throw new ParseException(e.getMessage()); } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Number createNumber(final String str) throws ParseException { try { if (str.indexOf('.') != -1) { return Double.valueOf(str); } return Long.valueOf(str); } catch (final NumberFormatException e) { throw new ParseException(e.getMessage()); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_39_4_TypeHandler,Cli,39,4,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Class<?> createClass(final String classname) throws ParseException { try { return Class.forName(classname); } catch (final ClassNotFoundException e) { throw new ParseException(""Unable to find the class: "" + classname); } } public static Object createValue(String, Object); public static Object createValue(String, Class<?>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Class<?> createClass(final String classname) throws ParseException { try { return Class.forName(classname); } catch (final ClassNotFoundException e) { throw new ParseException(""Unable to find the class: "" + classname); } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Class<?> createClass(final String classname) throws ParseException { try { return Class.forName(classname); } catch (final ClassNotFoundException e) { throw new ParseException(""Unable to find the class: "" + classname); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_39_5_TypeHandler,Cli,39,5,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Date createDate(final String str) { throw new UnsupportedOperationException(""Not yet implemented""); } public static Object createValue(String, Object); public static Object createValue(String, Class<?>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Date createDate(final String str) { throw new UnsupportedOperationException(""Not yet implemented""); } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Date createDate(final String str) { throw new UnsupportedOperationException(""Not yet implemented""); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_39_6_TypeHandler,Cli,39,6,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static URL createURL(final String str) throws ParseException { try { return new URL(str); } catch (final MalformedURLException e) { throw new ParseException(""Unable to parse the URL: "" + str); } } public static Object createValue(String, Object); public static Object createValue(String, Class<?>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static URL createURL(final String str) throws ParseException { try { return new URL(str); } catch (final MalformedURLException e) { throw new ParseException(""Unable to parse the URL: "" + str); } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static URL createURL(final String str) throws ParseException { try { return new URL(str); } catch (final MalformedURLException e) { throw new ParseException(""Unable to parse the URL: "" + str); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_39_7_TypeHandler,Cli,39,7,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static File createFile(final String str) { return new File(str); } public static Object createValue(String, Object); public static Object createValue(String, Class<?>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static File createFile(final String str) { return new File(str); } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static File createFile(final String str) { return new File(str); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_39_8_TypeHandler,Cli,39,8,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static FileInputStream openFile(String str) throws ParseException { try { return new FileInputStream(str); } catch (FileNotFoundException e) { throw new ParseException(""Unable to find file: "" + str); } } public static Object createValue(String, Object); public static Object createValue(String, Class<?>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static FileInputStream openFile(String str) throws ParseException { try { return new FileInputStream(str); } catch (FileNotFoundException e) { throw new ParseException(""Unable to find file: "" + str); } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static FileInputStream openFile(String str) throws ParseException { try { return new FileInputStream(str); } catch (FileNotFoundException e) { throw new ParseException(""Unable to find file: "" + str); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_39_9_TypeHandler,Cli,39,9,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static File[] createFiles(final String str) { throw new UnsupportedOperationException(""Not yet implemented""); } public static Object createValue(String, Object); public static Object createValue(String, Class<?>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static File[] createFiles(final String str) { throw new UnsupportedOperationException(""Not yet implemented""); } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static File[] createFiles(final String str) { throw new UnsupportedOperationException(""Not yet implemented""); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_40_0_TypeHandler,Cli,40,0,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Object createValue(final String str, final Object obj) throws ParseException { return createValue(str, (Class<?>) obj); } public static Object createValue(String, Object); @SuppressWarnings(""unchecked"") public static <T> T createValue(String, Class<T>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Object createValue(final String str, final Object obj) throws ParseException { return createValue(str, (Class<?>) obj); } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Object createValue(final String str, final Object obj) throws ParseException { return createValue(str, (Class<?>) obj); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_40_1_TypeHandler,Cli,40,1,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { @SuppressWarnings(""unchecked"") public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else { throw new ParseException(""Unable to handle the class: "" + clazz); } } public static Object createValue(String, Object); @SuppressWarnings(""unchecked"") public static <T> T createValue(String, Class<T>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { @SuppressWarnings(""unchecked"") public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else { throw new ParseException(""Unable to handle the class: "" + clazz); } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { @SuppressWarnings(""unchecked"") public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else { throw new ParseException(""Unable to handle the class: "" + clazz); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_40_2_TypeHandler,Cli,40,2,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Object createObject(final String classname) throws ParseException { Class<?> cl; try { cl = Class.forName(classname); } catch (final ClassNotFoundException cnfe) { throw new ParseException(""Unable to find the class: "" + classname); } try { return cl.newInstance(); } catch (final Exception e) { throw new ParseException(e.getClass().getName() + ""; Unable to create an instance of: "" + classname); } } public static Object createValue(String, Object); @SuppressWarnings(""unchecked"") public static <T> T createValue(String, Class<T>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Object createObject(final String classname) throws ParseException { Class<?> cl; try { cl = Class.forName(classname); } catch (final ClassNotFoundException cnfe) { throw new ParseException(""Unable to find the class: "" + classname); } try { return cl.newInstance(); } catch (final Exception e) { throw new ParseException(e.getClass().getName() + ""; Unable to create an instance of: "" + classname); } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Object createObject(final String classname) throws ParseException { Class<?> cl; try { cl = Class.forName(classname); } catch (final ClassNotFoundException cnfe) { throw new ParseException(""Unable to find the class: "" + classname); } try { return cl.newInstance(); } catch (final Exception e) { throw new ParseException(e.getClass().getName() + ""; Unable to create an instance of: "" + classname); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_40_3_TypeHandler,Cli,40,3,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Number createNumber(final String str) throws ParseException { try { if (str.indexOf('.') != -1) { return Double.valueOf(str); } return Long.valueOf(str); } catch (final NumberFormatException e) { throw new ParseException(e.getMessage()); } } public static Object createValue(String, Object); @SuppressWarnings(""unchecked"") public static <T> T createValue(String, Class<T>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Number createNumber(final String str) throws ParseException { try { if (str.indexOf('.') != -1) { return Double.valueOf(str); } return Long.valueOf(str); } catch (final NumberFormatException e) { throw new ParseException(e.getMessage()); } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Number createNumber(final String str) throws ParseException { try { if (str.indexOf('.') != -1) { return Double.valueOf(str); } return Long.valueOf(str); } catch (final NumberFormatException e) { throw new ParseException(e.getMessage()); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_40_4_TypeHandler,Cli,40,4,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Class<?> createClass(final String classname) throws ParseException { try { return Class.forName(classname); } catch (final ClassNotFoundException e) { throw new ParseException(""Unable to find the class: "" + classname); } } public static Object createValue(String, Object); @SuppressWarnings(""unchecked"") public static <T> T createValue(String, Class<T>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Class<?> createClass(final String classname) throws ParseException { try { return Class.forName(classname); } catch (final ClassNotFoundException e) { throw new ParseException(""Unable to find the class: "" + classname); } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Class<?> createClass(final String classname) throws ParseException { try { return Class.forName(classname); } catch (final ClassNotFoundException e) { throw new ParseException(""Unable to find the class: "" + classname); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_40_5_TypeHandler,Cli,40,5,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static Date createDate(final String str) { throw new UnsupportedOperationException(""Not yet implemented""); } public static Object createValue(String, Object); @SuppressWarnings(""unchecked"") public static <T> T createValue(String, Class<T>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static Date createDate(final String str) { throw new UnsupportedOperationException(""Not yet implemented""); } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static Date createDate(final String str) { throw new UnsupportedOperationException(""Not yet implemented""); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_40_6_TypeHandler,Cli,40,6,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static URL createURL(final String str) throws ParseException { try { return new URL(str); } catch (final MalformedURLException e) { throw new ParseException(""Unable to parse the URL: "" + str); } } public static Object createValue(String, Object); @SuppressWarnings(""unchecked"") public static <T> T createValue(String, Class<T>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static URL createURL(final String str) throws ParseException { try { return new URL(str); } catch (final MalformedURLException e) { throw new ParseException(""Unable to parse the URL: "" + str); } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static URL createURL(final String str) throws ParseException { try { return new URL(str); } catch (final MalformedURLException e) { throw new ParseException(""Unable to parse the URL: "" + str); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_40_7_TypeHandler,Cli,40,7,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static File createFile(final String str) { return new File(str); } public static Object createValue(String, Object); @SuppressWarnings(""unchecked"") public static <T> T createValue(String, Class<T>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static File createFile(final String str) { return new File(str); } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static File createFile(final String str) { return new File(str); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_40_8_TypeHandler,Cli,40,8,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static FileInputStream openFile(String str) throws ParseException { try { return new FileInputStream(str); } catch (FileNotFoundException e) { throw new ParseException(""Unable to find file: "" + str); } } public static Object createValue(String, Object); @SuppressWarnings(""unchecked"") public static <T> T createValue(String, Class<T>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static FileInputStream openFile(String str) throws ParseException { try { return new FileInputStream(str); } catch (FileNotFoundException e) { throw new ParseException(""Unable to find file: "" + str); } } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static FileInputStream openFile(String str) throws ParseException { try { return new FileInputStream(str); } catch (FileNotFoundException e) { throw new ParseException(""Unable to find file: "" + str); } } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
Cli_40_9_TypeHandler,Cli,40,9,org.apache.commons.cli.TypeHandler,TypeHandler,src/main/java/org/apache/commons/cli/TypeHandler.java,TypeHandler_ESTest,org/apache/commons/cli/TypeHandler_ESTest.java,"package org.apache.commons.cli;","import java.io.File;|import java.io.FileInputStream;|import java.io.FileNotFoundException;|import java.net.MalformedURLException;|import java.net.URL;|import java.util.Date;","TypeHandler { public static File[] createFiles(final String str) { throw new UnsupportedOperationException(""Not yet implemented""); } public static Object createValue(String, Object); @SuppressWarnings(""unchecked"") public static <T> T createValue(String, Class<T>); public static Object createObject(String); public static Number createNumber(String); public static Class<?> createClass(String); public static Date createDate(String); public static URL createURL(String); public static File createFile(String); public static FileInputStream openFile(String); public static File[] createFiles(String); }","<FCTX>TypeHandler { public static File[] createFiles(final String str) { throw new UnsupportedOperationException(""Not yet implemented""); } }</FCTX> <ECTX></ECTX>","<FCTX>TypeHandler { public static File[] createFiles(final String str) { throw new UnsupportedOperationException(""Not yet implemented""); } <PRIVATE_FCTX></PRIVATE_FCTX> }</FCTX> <ECTX></ECTX>"
